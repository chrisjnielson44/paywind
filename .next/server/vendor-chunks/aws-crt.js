"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/aws-crt";
exports.ids = ["vendor-chunks/aws-crt"];
exports.modules = {

/***/ "(ssr)/./node_modules/aws-crt/dist/common/aws_iot_shared.js":
/*!************************************************************!*\
  !*** ./node_modules/aws-crt/dist/common/aws_iot_shared.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.extractRegionFromEndpoint = exports.buildMqtt5FinalUsername = exports.populate_username_string_with_custom_authorizer = exports.is_string_and_not_empty = exports.add_to_username_parameter = void 0;\n/**\n *\n * A module containing miscellaneous functionality that is shared across both native and browser for aws_iot\n *\n * @packageDocumentation\n * @module aws_iot\n */\nconst platform = __importStar(__webpack_require__(/*! ./platform */ \"(ssr)/./node_modules/aws-crt/dist/common/platform.js\"));\n/**\n * A helper function to add parameters to the username in with_custom_authorizer function\n *\n * @internal\n */\nfunction add_to_username_parameter(current_username, parameter_value, parameter_pre_text) {\n    let return_string = current_username;\n    if (return_string.indexOf(\"?\") != -1) {\n        return_string += \"&\";\n    }\n    else {\n        return_string += \"?\";\n    }\n    if (parameter_value.indexOf(parameter_pre_text) != -1) {\n        return return_string + parameter_value;\n    }\n    else {\n        return return_string + parameter_pre_text + parameter_value;\n    }\n}\nexports.add_to_username_parameter = add_to_username_parameter;\n/**\n * A helper function to see if a string is not null, is defined, and is not an empty string\n *\n * @internal\n */\nfunction is_string_and_not_empty(item) {\n    return item != undefined && typeof (item) == 'string' && item != \"\";\n}\nexports.is_string_and_not_empty = is_string_and_not_empty;\n/**\n * A helper function to populate the username with the Custom Authorizer fields\n * @param current_username the current username\n * @param input_username the username to add - can be an empty string to skip\n * @param input_authorizer the name of the authorizer to add - can be an empty string to skip\n * @param input_signature the name of the signature to add - can be an empty string to skip\n * @param input_builder_username the username from the MQTT builder\n * @param input_token_key_name the token key name\n * @param input_token_value the token key value\n * @returns The finished username with the additions added to it\n *\n * @internal\n */\nfunction populate_username_string_with_custom_authorizer(current_username, input_username, input_authorizer, input_signature, input_builder_username, input_token_key_name, input_token_value) {\n    let username_string = \"\";\n    if (current_username) {\n        username_string += current_username;\n    }\n    if (is_string_and_not_empty(input_username) == false) {\n        if (is_string_and_not_empty(input_builder_username) && input_builder_username) {\n            username_string += input_builder_username;\n        }\n    }\n    else {\n        username_string += input_username;\n    }\n    if (is_string_and_not_empty(input_authorizer) && input_authorizer) {\n        username_string = add_to_username_parameter(username_string, input_authorizer, \"x-amz-customauthorizer-name=\");\n    }\n    if (is_string_and_not_empty(input_signature) && input_signature) {\n        username_string = add_to_username_parameter(username_string, input_signature, \"x-amz-customauthorizer-signature=\");\n        if ((is_string_and_not_empty(input_token_key_name) && input_token_key_name) || (is_string_and_not_empty(input_token_value) && input_token_value)) {\n            console.log(\"Warning: Signed custom authorizers with signature will not work without a token key name and \" +\n                \"token value. Your connection may be rejected/stalled on the IoT Core side due to this. Please \" +\n                \"set the token key name and token value to connect to a signed custom authorizer.\");\n        }\n    }\n    if (is_string_and_not_empty(input_signature) || is_string_and_not_empty(input_token_value) || is_string_and_not_empty(input_token_key_name)) {\n        if (!input_token_value || !input_token_key_name) {\n            throw new Error(\"Token-based custom authentication requires all token-related properties to be set\");\n        }\n        username_string = add_to_username_parameter(username_string, input_token_value, input_token_key_name + \"=\");\n    }\n    return username_string;\n}\nexports.populate_username_string_with_custom_authorizer = populate_username_string_with_custom_authorizer;\n;\n/** @internal */\nfunction addParam(paramName, paramValue, paramSet) {\n    if (paramValue) {\n        paramSet.push([paramName, paramValue]);\n    }\n}\n/**\n * Builds the final value for the CONNECT packet's username property based on AWS IoT custom auth configuration\n * and SDK metrics properties.\n *\n * @param customAuthConfig intended AWS IoT custom auth client configuration\n *\n * @internal\n */\nfunction buildMqtt5FinalUsername(customAuthConfig) {\n    let path = \"\";\n    let paramList = [];\n    if (customAuthConfig) {\n        /* If we're using token-signing authentication, then all token properties must be set */\n        let usingSigning = false;\n        if (customAuthConfig.tokenValue || customAuthConfig.tokenKeyName || customAuthConfig.tokenSignature) {\n            usingSigning = true;\n            if (!customAuthConfig.tokenValue || !customAuthConfig.tokenKeyName || !customAuthConfig.tokenSignature) {\n                throw new Error(\"Token-based custom authentication requires all token-related properties to be set\");\n            }\n        }\n        let username = customAuthConfig.username;\n        let pathSplit = (username !== null && username !== void 0 ? username : \"\").split(\"?\");\n        let params = pathSplit.slice(1);\n        path = pathSplit[0];\n        if (params.length > 1) {\n            throw new Error(\"Custom auth username property value is invalid\");\n        }\n        else if (params.length == 1) {\n            params[0].split(\"&\").forEach((keyValue, index, array) => {\n                var _a;\n                let kvPair = keyValue.split(\"=\");\n                paramList.push([kvPair[0], (_a = kvPair[1]) !== null && _a !== void 0 ? _a : \"\"]);\n            });\n        }\n        addParam(\"x-amz-customauthorizer-name\", customAuthConfig.authorizerName, paramList);\n        if (usingSigning) {\n            // @ts-ignore verified earlier\n            addParam(customAuthConfig.tokenKeyName, customAuthConfig.tokenValue, paramList);\n            addParam(\"x-amz-customauthorizer-signature\", customAuthConfig.tokenSignature, paramList);\n        }\n    }\n    paramList.push([\"SDK\", \"NodeJSv2\"]);\n    paramList.push([\"Version\", platform.crt_version()]);\n    return (path !== null && path !== void 0 ? path : \"\") + \"?\" + paramList.map((value) => `${value[0]}=${value[1]}`).join(\"&\");\n}\nexports.buildMqtt5FinalUsername = buildMqtt5FinalUsername;\n/**\n * Attempts to determine the AWS region associated with an endpoint.\n *\n * @param endpoint endpoint to compute the region for\n *\n * @internal\n */\nfunction extractRegionFromEndpoint(endpoint) {\n    const regexpRegion = /^[\\w\\-]+\\.[\\w\\-]+\\.([\\w+\\-]+)\\./;\n    const match = endpoint.match(regexpRegion);\n    if (match) {\n        return match[1];\n    }\n    throw new Error(\"AWS region could not be extracted from endpoint.  Use 'region' property on WebsocketConfig to set manually.\");\n}\nexports.extractRegionFromEndpoint = extractRegionFromEndpoint;\n//# sourceMappingURL=aws_iot_shared.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/aws-crt/dist/common/aws_iot_shared.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/aws-crt/dist/common/cancel.js":
/*!****************************************************!*\
  !*** ./node_modules/aws-crt/dist/common/cancel.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.newCancellablePromiseFromNextEvent = exports.CancelController = exports.EVENT_NAME = void 0;\n/**\n *\n * A module containing support for cancelling asynchronous operations\n *\n * @packageDocumentation\n * @module cancel\n */\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst promise = __importStar(__webpack_require__(/*! ./promise */ \"(ssr)/./node_modules/aws-crt/dist/common/promise.js\"));\nexports.EVENT_NAME = 'cancelled';\n/**\n * CRT implementation of the ICancelController interface\n */\nclass CancelController {\n    constructor(options) {\n        this.cancelled = false;\n        if (options && options.emitterFactory) {\n            this.emitter = options.emitterFactory();\n        }\n        else {\n            this.emitter = new events_1.EventEmitter();\n        }\n    }\n    /**\n     * Cancels all asynchronous operations associated with this controller\n     */\n    cancel() {\n        if (!this.cancelled) {\n            this.cancelled = true;\n            this.emitter.emit(exports.EVENT_NAME);\n            this.emitter.removeAllListeners(exports.EVENT_NAME);\n        }\n    }\n    /**\n     * Checks whether or not the controller is in the cancelled state\n     */\n    hasBeenCancelled() {\n        return this.cancelled;\n    }\n    /**\n     * Registers a callback to be notified when cancel() is invoked externally.  In general, the callback\n     * will cancel an asynchronous operation by rejecting the associated promise.\n     *\n     * IMPORTANT: The listener is invoked synchronously if the controller has already been cancelled.\n     *\n     * @param listener - function to invoke on cancel; invoked synchronously if the controller has been cancelled\n     *\n     * @return undefined if the controller has already been cancelled, otherwise a function object whose invocation\n     * will remove the listener from the controller's event emitter.\n     *\n     */\n    addListener(listener) {\n        if (this.cancelled) {\n            listener();\n            return undefined;\n        }\n        this.emitter.on(exports.EVENT_NAME, listener);\n        return () => { this.emitter.removeListener(exports.EVENT_NAME, listener); };\n    }\n}\nexports.CancelController = CancelController;\n/**\n * Creates a promise that can be rejected by a CancelController and resolved by the receipt of an event from an\n * EventEmitter.\n *\n * @param config promise creation options\n */\nfunction newCancellablePromiseFromNextEvent(config) {\n    let onEvent = undefined;\n    let cancelRemoveListener = undefined;\n    let liftedPromise = promise.newLiftedPromise();\n    onEvent = (eventData) => {\n        try {\n            if (config.eventDataTransformer) {\n                liftedPromise.resolve(config.eventDataTransformer(eventData));\n            }\n            else {\n                liftedPromise.resolve(eventData);\n            }\n        }\n        catch (err) {\n            liftedPromise.reject(err);\n        }\n    };\n    config.emitter.addListener(config.eventName, onEvent);\n    if (config.cancelController) {\n        cancelRemoveListener = config.cancelController.addListener(() => {\n            liftedPromise.reject(config.cancelMessage);\n        });\n    }\n    return promise.makeSelfCleaningPromise(liftedPromise.promise, () => {\n        if (onEvent) {\n            config.emitter.removeListener(config.eventName, onEvent);\n        }\n        if (cancelRemoveListener) {\n            cancelRemoveListener();\n        }\n    });\n}\nexports.newCancellablePromiseFromNextEvent = newCancellablePromiseFromNextEvent;\n//# sourceMappingURL=cancel.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXdzLWNydC9kaXN0L2NvbW1vbi9jYW5jZWwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMENBQTBDLDRCQUE0QjtBQUN0RSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMENBQTBDLEdBQUcsd0JBQXdCLEdBQUcsa0JBQWtCO0FBQzFGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLG1CQUFPLENBQUMsc0JBQVE7QUFDakMsNkJBQTZCLG1CQUFPLENBQUMsc0VBQVc7QUFDaEQsa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsMENBQTBDO0FBQzFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGF5d2luZC8uL25vZGVfbW9kdWxlcy9hd3MtY3J0L2Rpc3QvY29tbW9uL2NhbmNlbC5qcz9kZWI5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjAuXG4gKi9cbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5uZXdDYW5jZWxsYWJsZVByb21pc2VGcm9tTmV4dEV2ZW50ID0gZXhwb3J0cy5DYW5jZWxDb250cm9sbGVyID0gZXhwb3J0cy5FVkVOVF9OQU1FID0gdm9pZCAwO1xuLyoqXG4gKlxuICogQSBtb2R1bGUgY29udGFpbmluZyBzdXBwb3J0IGZvciBjYW5jZWxsaW5nIGFzeW5jaHJvbm91cyBvcGVyYXRpb25zXG4gKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIGNhbmNlbFxuICovXG5jb25zdCBldmVudHNfMSA9IHJlcXVpcmUoXCJldmVudHNcIik7XG5jb25zdCBwcm9taXNlID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL3Byb21pc2VcIikpO1xuZXhwb3J0cy5FVkVOVF9OQU1FID0gJ2NhbmNlbGxlZCc7XG4vKipcbiAqIENSVCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgSUNhbmNlbENvbnRyb2xsZXIgaW50ZXJmYWNlXG4gKi9cbmNsYXNzIENhbmNlbENvbnRyb2xsZXIge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5jYW5jZWxsZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5lbWl0dGVyRmFjdG9yeSkge1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVyID0gb3B0aW9ucy5lbWl0dGVyRmFjdG9yeSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVyID0gbmV3IGV2ZW50c18xLkV2ZW50RW1pdHRlcigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbmNlbHMgYWxsIGFzeW5jaHJvbm91cyBvcGVyYXRpb25zIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGNvbnRyb2xsZXJcbiAgICAgKi9cbiAgICBjYW5jZWwoKSB7XG4gICAgICAgIGlmICghdGhpcy5jYW5jZWxsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuZW1pdHRlci5lbWl0KGV4cG9ydHMuRVZFTlRfTkFNRSk7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIucmVtb3ZlQWxsTGlzdGVuZXJzKGV4cG9ydHMuRVZFTlRfTkFNRSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgb3Igbm90IHRoZSBjb250cm9sbGVyIGlzIGluIHRoZSBjYW5jZWxsZWQgc3RhdGVcbiAgICAgKi9cbiAgICBoYXNCZWVuQ2FuY2VsbGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYW5jZWxsZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBhIGNhbGxiYWNrIHRvIGJlIG5vdGlmaWVkIHdoZW4gY2FuY2VsKCkgaXMgaW52b2tlZCBleHRlcm5hbGx5LiAgSW4gZ2VuZXJhbCwgdGhlIGNhbGxiYWNrXG4gICAgICogd2lsbCBjYW5jZWwgYW4gYXN5bmNocm9ub3VzIG9wZXJhdGlvbiBieSByZWplY3RpbmcgdGhlIGFzc29jaWF0ZWQgcHJvbWlzZS5cbiAgICAgKlxuICAgICAqIElNUE9SVEFOVDogVGhlIGxpc3RlbmVyIGlzIGludm9rZWQgc3luY2hyb25vdXNseSBpZiB0aGUgY29udHJvbGxlciBoYXMgYWxyZWFkeSBiZWVuIGNhbmNlbGxlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBsaXN0ZW5lciAtIGZ1bmN0aW9uIHRvIGludm9rZSBvbiBjYW5jZWw7IGludm9rZWQgc3luY2hyb25vdXNseSBpZiB0aGUgY29udHJvbGxlciBoYXMgYmVlbiBjYW5jZWxsZWRcbiAgICAgKlxuICAgICAqIEByZXR1cm4gdW5kZWZpbmVkIGlmIHRoZSBjb250cm9sbGVyIGhhcyBhbHJlYWR5IGJlZW4gY2FuY2VsbGVkLCBvdGhlcndpc2UgYSBmdW5jdGlvbiBvYmplY3Qgd2hvc2UgaW52b2NhdGlvblxuICAgICAqIHdpbGwgcmVtb3ZlIHRoZSBsaXN0ZW5lciBmcm9tIHRoZSBjb250cm9sbGVyJ3MgZXZlbnQgZW1pdHRlci5cbiAgICAgKlxuICAgICAqL1xuICAgIGFkZExpc3RlbmVyKGxpc3RlbmVyKSB7XG4gICAgICAgIGlmICh0aGlzLmNhbmNlbGxlZCkge1xuICAgICAgICAgICAgbGlzdGVuZXIoKTtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbWl0dGVyLm9uKGV4cG9ydHMuRVZFTlRfTkFNRSwgbGlzdGVuZXIpO1xuICAgICAgICByZXR1cm4gKCkgPT4geyB0aGlzLmVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIoZXhwb3J0cy5FVkVOVF9OQU1FLCBsaXN0ZW5lcik7IH07XG4gICAgfVxufVxuZXhwb3J0cy5DYW5jZWxDb250cm9sbGVyID0gQ2FuY2VsQ29udHJvbGxlcjtcbi8qKlxuICogQ3JlYXRlcyBhIHByb21pc2UgdGhhdCBjYW4gYmUgcmVqZWN0ZWQgYnkgYSBDYW5jZWxDb250cm9sbGVyIGFuZCByZXNvbHZlZCBieSB0aGUgcmVjZWlwdCBvZiBhbiBldmVudCBmcm9tIGFuXG4gKiBFdmVudEVtaXR0ZXIuXG4gKlxuICogQHBhcmFtIGNvbmZpZyBwcm9taXNlIGNyZWF0aW9uIG9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gbmV3Q2FuY2VsbGFibGVQcm9taXNlRnJvbU5leHRFdmVudChjb25maWcpIHtcbiAgICBsZXQgb25FdmVudCA9IHVuZGVmaW5lZDtcbiAgICBsZXQgY2FuY2VsUmVtb3ZlTGlzdGVuZXIgPSB1bmRlZmluZWQ7XG4gICAgbGV0IGxpZnRlZFByb21pc2UgPSBwcm9taXNlLm5ld0xpZnRlZFByb21pc2UoKTtcbiAgICBvbkV2ZW50ID0gKGV2ZW50RGF0YSkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGNvbmZpZy5ldmVudERhdGFUcmFuc2Zvcm1lcikge1xuICAgICAgICAgICAgICAgIGxpZnRlZFByb21pc2UucmVzb2x2ZShjb25maWcuZXZlbnREYXRhVHJhbnNmb3JtZXIoZXZlbnREYXRhKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsaWZ0ZWRQcm9taXNlLnJlc29sdmUoZXZlbnREYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBsaWZ0ZWRQcm9taXNlLnJlamVjdChlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25maWcuZW1pdHRlci5hZGRMaXN0ZW5lcihjb25maWcuZXZlbnROYW1lLCBvbkV2ZW50KTtcbiAgICBpZiAoY29uZmlnLmNhbmNlbENvbnRyb2xsZXIpIHtcbiAgICAgICAgY2FuY2VsUmVtb3ZlTGlzdGVuZXIgPSBjb25maWcuY2FuY2VsQ29udHJvbGxlci5hZGRMaXN0ZW5lcigoKSA9PiB7XG4gICAgICAgICAgICBsaWZ0ZWRQcm9taXNlLnJlamVjdChjb25maWcuY2FuY2VsTWVzc2FnZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcHJvbWlzZS5tYWtlU2VsZkNsZWFuaW5nUHJvbWlzZShsaWZ0ZWRQcm9taXNlLnByb21pc2UsICgpID0+IHtcbiAgICAgICAgaWYgKG9uRXZlbnQpIHtcbiAgICAgICAgICAgIGNvbmZpZy5lbWl0dGVyLnJlbW92ZUxpc3RlbmVyKGNvbmZpZy5ldmVudE5hbWUsIG9uRXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYW5jZWxSZW1vdmVMaXN0ZW5lcikge1xuICAgICAgICAgICAgY2FuY2VsUmVtb3ZlTGlzdGVuZXIoKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0cy5uZXdDYW5jZWxsYWJsZVByb21pc2VGcm9tTmV4dEV2ZW50ID0gbmV3Q2FuY2VsbGFibGVQcm9taXNlRnJvbU5leHRFdmVudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNhbmNlbC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/aws-crt/dist/common/cancel.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/aws-crt/dist/common/event.js":
/*!***************************************************!*\
  !*** ./node_modules/aws-crt/dist/common/event.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BufferedEventEmitter = void 0;\n/**\n * Module for base types related to event emission\n *\n * @packageDocumentation\n * @module event\n */\nconst events_1 = __webpack_require__(/*! events */ \"events\");\n/**\n * @internal\n */\nclass BufferedEvent {\n    constructor(event, args) {\n        this.event = event;\n        this.args = args;\n    }\n}\n/**\n * Provides buffered event emitting semantics, similar to many Node-style streams.\n * Subclasses will override EventEmitter.on() and trigger uncorking.\n * NOTE: It is HIGHLY recommended that uncorking should always be done via\n * ```process.nextTick()```, not during the EventEmitter.on() call.\n *\n * See also: [Node writable streams](https://nodejs.org/api/stream.html#stream_writable_cork)\n *\n * @category Events\n */\nclass BufferedEventEmitter extends events_1.EventEmitter {\n    constructor() {\n        super();\n        this.corked = false;\n    }\n    /**\n     * Forces all written events to be buffered in memory. The buffered data will be\n     * flushed when {@link BufferedEventEmitter.uncork} is called.\n     */\n    cork() {\n        this.corked = true;\n    }\n    /**\n     * Flushes all data buffered since {@link BufferedEventEmitter.cork} was called.\n     *\n     * NOTE: It is HIGHLY recommended that uncorking should always be done via\n     * ``` process.nextTick```, not during the ```EventEmitter.on()``` call.\n     */\n    uncork() {\n        this.corked = false;\n        while (this.eventQueue) {\n            const event = this.eventQueue;\n            super.emit(event.event, ...event.args);\n            this.eventQueue = this.eventQueue.next;\n        }\n    }\n    /**\n     * Synchronously calls each of the listeners registered for the event key supplied\n     * in registration order. If the {@link BufferedEventEmitter} is currently corked,\n     * the event will be buffered until {@link BufferedEventEmitter.uncork} is called.\n     * @param event The name of the event\n     * @param args Event payload\n     */\n    emit(event, ...args) {\n        if (this.corked) {\n            // queue requests in order\n            let last = this.lastQueuedEvent;\n            this.lastQueuedEvent = new BufferedEvent(event, args);\n            if (last) {\n                last.next = this.lastQueuedEvent;\n            }\n            else {\n                this.eventQueue = this.lastQueuedEvent;\n            }\n            return this.listeners(event).length > 0;\n        }\n        return super.emit(event, ...args);\n    }\n}\nexports.BufferedEventEmitter = BufferedEventEmitter;\n//# sourceMappingURL=event.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXdzLWNydC9kaXN0L2NvbW1vbi9ldmVudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsbUJBQU8sQ0FBQyxzQkFBUTtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLG1DQUFtQztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLGlDQUFpQztBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLDRCQUE0QjtBQUNsRSx5Q0FBeUMsbUNBQW1DO0FBQzVFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGF5d2luZC8uL25vZGVfbW9kdWxlcy9hd3MtY3J0L2Rpc3QvY29tbW9uL2V2ZW50LmpzPzdmOGIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMC5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5CdWZmZXJlZEV2ZW50RW1pdHRlciA9IHZvaWQgMDtcbi8qKlxuICogTW9kdWxlIGZvciBiYXNlIHR5cGVzIHJlbGF0ZWQgdG8gZXZlbnQgZW1pc3Npb25cbiAqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgZXZlbnRcbiAqL1xuY29uc3QgZXZlbnRzXzEgPSByZXF1aXJlKFwiZXZlbnRzXCIpO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuY2xhc3MgQnVmZmVyZWRFdmVudCB7XG4gICAgY29uc3RydWN0b3IoZXZlbnQsIGFyZ3MpIHtcbiAgICAgICAgdGhpcy5ldmVudCA9IGV2ZW50O1xuICAgICAgICB0aGlzLmFyZ3MgPSBhcmdzO1xuICAgIH1cbn1cbi8qKlxuICogUHJvdmlkZXMgYnVmZmVyZWQgZXZlbnQgZW1pdHRpbmcgc2VtYW50aWNzLCBzaW1pbGFyIHRvIG1hbnkgTm9kZS1zdHlsZSBzdHJlYW1zLlxuICogU3ViY2xhc3NlcyB3aWxsIG92ZXJyaWRlIEV2ZW50RW1pdHRlci5vbigpIGFuZCB0cmlnZ2VyIHVuY29ya2luZy5cbiAqIE5PVEU6IEl0IGlzIEhJR0hMWSByZWNvbW1lbmRlZCB0aGF0IHVuY29ya2luZyBzaG91bGQgYWx3YXlzIGJlIGRvbmUgdmlhXG4gKiBgYGBwcm9jZXNzLm5leHRUaWNrKClgYGAsIG5vdCBkdXJpbmcgdGhlIEV2ZW50RW1pdHRlci5vbigpIGNhbGwuXG4gKlxuICogU2VlIGFsc286IFtOb2RlIHdyaXRhYmxlIHN0cmVhbXNdKGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvc3RyZWFtLmh0bWwjc3RyZWFtX3dyaXRhYmxlX2NvcmspXG4gKlxuICogQGNhdGVnb3J5IEV2ZW50c1xuICovXG5jbGFzcyBCdWZmZXJlZEV2ZW50RW1pdHRlciBleHRlbmRzIGV2ZW50c18xLkV2ZW50RW1pdHRlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuY29ya2VkID0gZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZvcmNlcyBhbGwgd3JpdHRlbiBldmVudHMgdG8gYmUgYnVmZmVyZWQgaW4gbWVtb3J5LiBUaGUgYnVmZmVyZWQgZGF0YSB3aWxsIGJlXG4gICAgICogZmx1c2hlZCB3aGVuIHtAbGluayBCdWZmZXJlZEV2ZW50RW1pdHRlci51bmNvcmt9IGlzIGNhbGxlZC5cbiAgICAgKi9cbiAgICBjb3JrKCkge1xuICAgICAgICB0aGlzLmNvcmtlZCA9IHRydWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZsdXNoZXMgYWxsIGRhdGEgYnVmZmVyZWQgc2luY2Uge0BsaW5rIEJ1ZmZlcmVkRXZlbnRFbWl0dGVyLmNvcmt9IHdhcyBjYWxsZWQuXG4gICAgICpcbiAgICAgKiBOT1RFOiBJdCBpcyBISUdITFkgcmVjb21tZW5kZWQgdGhhdCB1bmNvcmtpbmcgc2hvdWxkIGFsd2F5cyBiZSBkb25lIHZpYVxuICAgICAqIGBgYCBwcm9jZXNzLm5leHRUaWNrYGBgLCBub3QgZHVyaW5nIHRoZSBgYGBFdmVudEVtaXR0ZXIub24oKWBgYCBjYWxsLlxuICAgICAqL1xuICAgIHVuY29yaygpIHtcbiAgICAgICAgdGhpcy5jb3JrZWQgPSBmYWxzZTtcbiAgICAgICAgd2hpbGUgKHRoaXMuZXZlbnRRdWV1ZSkge1xuICAgICAgICAgICAgY29uc3QgZXZlbnQgPSB0aGlzLmV2ZW50UXVldWU7XG4gICAgICAgICAgICBzdXBlci5lbWl0KGV2ZW50LmV2ZW50LCAuLi5ldmVudC5hcmdzKTtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRRdWV1ZSA9IHRoaXMuZXZlbnRRdWV1ZS5uZXh0O1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN5bmNocm9ub3VzbHkgY2FsbHMgZWFjaCBvZiB0aGUgbGlzdGVuZXJzIHJlZ2lzdGVyZWQgZm9yIHRoZSBldmVudCBrZXkgc3VwcGxpZWRcbiAgICAgKiBpbiByZWdpc3RyYXRpb24gb3JkZXIuIElmIHRoZSB7QGxpbmsgQnVmZmVyZWRFdmVudEVtaXR0ZXJ9IGlzIGN1cnJlbnRseSBjb3JrZWQsXG4gICAgICogdGhlIGV2ZW50IHdpbGwgYmUgYnVmZmVyZWQgdW50aWwge0BsaW5rIEJ1ZmZlcmVkRXZlbnRFbWl0dGVyLnVuY29ya30gaXMgY2FsbGVkLlxuICAgICAqIEBwYXJhbSBldmVudCBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcbiAgICAgKiBAcGFyYW0gYXJncyBFdmVudCBwYXlsb2FkXG4gICAgICovXG4gICAgZW1pdChldmVudCwgLi4uYXJncykge1xuICAgICAgICBpZiAodGhpcy5jb3JrZWQpIHtcbiAgICAgICAgICAgIC8vIHF1ZXVlIHJlcXVlc3RzIGluIG9yZGVyXG4gICAgICAgICAgICBsZXQgbGFzdCA9IHRoaXMubGFzdFF1ZXVlZEV2ZW50O1xuICAgICAgICAgICAgdGhpcy5sYXN0UXVldWVkRXZlbnQgPSBuZXcgQnVmZmVyZWRFdmVudChldmVudCwgYXJncyk7XG4gICAgICAgICAgICBpZiAobGFzdCkge1xuICAgICAgICAgICAgICAgIGxhc3QubmV4dCA9IHRoaXMubGFzdFF1ZXVlZEV2ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ldmVudFF1ZXVlID0gdGhpcy5sYXN0UXVldWVkRXZlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0ZW5lcnMoZXZlbnQpLmxlbmd0aCA+IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1cGVyLmVtaXQoZXZlbnQsIC4uLmFyZ3MpO1xuICAgIH1cbn1cbmV4cG9ydHMuQnVmZmVyZWRFdmVudEVtaXR0ZXIgPSBCdWZmZXJlZEV2ZW50RW1pdHRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV2ZW50LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/aws-crt/dist/common/event.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/aws-crt/dist/common/http.js":
/*!**************************************************!*\
  !*** ./node_modules/aws-crt/dist/common/http.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n *\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CommonHttpProxyOptions = exports.HttpProxyAuthenticationType = exports.HttpVersion = void 0;\n/**\n *\n * A module containing support for creating http connections and making requests on them.\n *\n * @packageDocumentation\n * @module http\n */\n/**\n * HTTP protocol version\n *\n * @category HTTP\n */\nvar HttpVersion;\n(function (HttpVersion) {\n    HttpVersion[HttpVersion[\"Unknown\"] = 0] = \"Unknown\";\n    /** HTTP/1.0 */\n    HttpVersion[HttpVersion[\"Http1_0\"] = 1] = \"Http1_0\";\n    /** HTTP/1.1 */\n    HttpVersion[HttpVersion[\"Http1_1\"] = 2] = \"Http1_1\";\n    /** HTTP/2 */\n    HttpVersion[HttpVersion[\"Http2\"] = 3] = \"Http2\";\n})(HttpVersion = exports.HttpVersion || (exports.HttpVersion = {}));\n/**\n * Proxy authentication types\n *\n * @category HTTP\n */\nvar HttpProxyAuthenticationType;\n(function (HttpProxyAuthenticationType) {\n    /**\n     * No to-proxy authentication logic\n     */\n    HttpProxyAuthenticationType[HttpProxyAuthenticationType[\"None\"] = 0] = \"None\";\n    /**\n     * Use basic authentication (user/pass).  Supply these values in {@link HttpProxyOptions}\n     */\n    HttpProxyAuthenticationType[HttpProxyAuthenticationType[\"Basic\"] = 1] = \"Basic\";\n})(HttpProxyAuthenticationType = exports.HttpProxyAuthenticationType || (exports.HttpProxyAuthenticationType = {}));\n;\n/**\n * Options used when connecting to an HTTP endpoint via a proxy\n *\n * @category HTTP\n */\nclass CommonHttpProxyOptions {\n    /**\n     *\n     * @param host_name endpoint of the proxy to use\n     * @param port port of proxy to use\n     * @param auth_method type of authentication to use with the proxy\n     * @param auth_username (basic authentication only) proxy username\n     * @param auth_password (basic authentication only) password associated with the username\n     */\n    constructor(host_name, port, auth_method = HttpProxyAuthenticationType.None, auth_username, auth_password) {\n        this.host_name = host_name;\n        this.port = port;\n        this.auth_method = auth_method;\n        this.auth_username = auth_username;\n        this.auth_password = auth_password;\n    }\n}\nexports.CommonHttpProxyOptions = CommonHttpProxyOptions;\n//# sourceMappingURL=http.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXdzLWNydC9kaXN0L2NvbW1vbi9odHRwLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw4QkFBOEIsR0FBRyxtQ0FBbUMsR0FBRyxtQkFBbUI7QUFDMUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyx3Q0FBd0MsbUJBQW1CLEtBQUs7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0VBQXNFO0FBQ3RFO0FBQ0E7QUFDQSxDQUFDLHdFQUF3RSxtQ0FBbUMsS0FBSztBQUNqSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGF5d2luZC8uL25vZGVfbW9kdWxlcy9hd3MtY3J0L2Rpc3QvY29tbW9uL2h0dHAuanM/MDdkMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKlxuICogQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMC5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db21tb25IdHRwUHJveHlPcHRpb25zID0gZXhwb3J0cy5IdHRwUHJveHlBdXRoZW50aWNhdGlvblR5cGUgPSBleHBvcnRzLkh0dHBWZXJzaW9uID0gdm9pZCAwO1xuLyoqXG4gKlxuICogQSBtb2R1bGUgY29udGFpbmluZyBzdXBwb3J0IGZvciBjcmVhdGluZyBodHRwIGNvbm5lY3Rpb25zIGFuZCBtYWtpbmcgcmVxdWVzdHMgb24gdGhlbS5cbiAqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgaHR0cFxuICovXG4vKipcbiAqIEhUVFAgcHJvdG9jb2wgdmVyc2lvblxuICpcbiAqIEBjYXRlZ29yeSBIVFRQXG4gKi9cbnZhciBIdHRwVmVyc2lvbjtcbihmdW5jdGlvbiAoSHR0cFZlcnNpb24pIHtcbiAgICBIdHRwVmVyc2lvbltIdHRwVmVyc2lvbltcIlVua25vd25cIl0gPSAwXSA9IFwiVW5rbm93blwiO1xuICAgIC8qKiBIVFRQLzEuMCAqL1xuICAgIEh0dHBWZXJzaW9uW0h0dHBWZXJzaW9uW1wiSHR0cDFfMFwiXSA9IDFdID0gXCJIdHRwMV8wXCI7XG4gICAgLyoqIEhUVFAvMS4xICovXG4gICAgSHR0cFZlcnNpb25bSHR0cFZlcnNpb25bXCJIdHRwMV8xXCJdID0gMl0gPSBcIkh0dHAxXzFcIjtcbiAgICAvKiogSFRUUC8yICovXG4gICAgSHR0cFZlcnNpb25bSHR0cFZlcnNpb25bXCJIdHRwMlwiXSA9IDNdID0gXCJIdHRwMlwiO1xufSkoSHR0cFZlcnNpb24gPSBleHBvcnRzLkh0dHBWZXJzaW9uIHx8IChleHBvcnRzLkh0dHBWZXJzaW9uID0ge30pKTtcbi8qKlxuICogUHJveHkgYXV0aGVudGljYXRpb24gdHlwZXNcbiAqXG4gKiBAY2F0ZWdvcnkgSFRUUFxuICovXG52YXIgSHR0cFByb3h5QXV0aGVudGljYXRpb25UeXBlO1xuKGZ1bmN0aW9uIChIdHRwUHJveHlBdXRoZW50aWNhdGlvblR5cGUpIHtcbiAgICAvKipcbiAgICAgKiBObyB0by1wcm94eSBhdXRoZW50aWNhdGlvbiBsb2dpY1xuICAgICAqL1xuICAgIEh0dHBQcm94eUF1dGhlbnRpY2F0aW9uVHlwZVtIdHRwUHJveHlBdXRoZW50aWNhdGlvblR5cGVbXCJOb25lXCJdID0gMF0gPSBcIk5vbmVcIjtcbiAgICAvKipcbiAgICAgKiBVc2UgYmFzaWMgYXV0aGVudGljYXRpb24gKHVzZXIvcGFzcykuICBTdXBwbHkgdGhlc2UgdmFsdWVzIGluIHtAbGluayBIdHRwUHJveHlPcHRpb25zfVxuICAgICAqL1xuICAgIEh0dHBQcm94eUF1dGhlbnRpY2F0aW9uVHlwZVtIdHRwUHJveHlBdXRoZW50aWNhdGlvblR5cGVbXCJCYXNpY1wiXSA9IDFdID0gXCJCYXNpY1wiO1xufSkoSHR0cFByb3h5QXV0aGVudGljYXRpb25UeXBlID0gZXhwb3J0cy5IdHRwUHJveHlBdXRoZW50aWNhdGlvblR5cGUgfHwgKGV4cG9ydHMuSHR0cFByb3h5QXV0aGVudGljYXRpb25UeXBlID0ge30pKTtcbjtcbi8qKlxuICogT3B0aW9ucyB1c2VkIHdoZW4gY29ubmVjdGluZyB0byBhbiBIVFRQIGVuZHBvaW50IHZpYSBhIHByb3h5XG4gKlxuICogQGNhdGVnb3J5IEhUVFBcbiAqL1xuY2xhc3MgQ29tbW9uSHR0cFByb3h5T3B0aW9ucyB7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaG9zdF9uYW1lIGVuZHBvaW50IG9mIHRoZSBwcm94eSB0byB1c2VcbiAgICAgKiBAcGFyYW0gcG9ydCBwb3J0IG9mIHByb3h5IHRvIHVzZVxuICAgICAqIEBwYXJhbSBhdXRoX21ldGhvZCB0eXBlIG9mIGF1dGhlbnRpY2F0aW9uIHRvIHVzZSB3aXRoIHRoZSBwcm94eVxuICAgICAqIEBwYXJhbSBhdXRoX3VzZXJuYW1lIChiYXNpYyBhdXRoZW50aWNhdGlvbiBvbmx5KSBwcm94eSB1c2VybmFtZVxuICAgICAqIEBwYXJhbSBhdXRoX3Bhc3N3b3JkIChiYXNpYyBhdXRoZW50aWNhdGlvbiBvbmx5KSBwYXNzd29yZCBhc3NvY2lhdGVkIHdpdGggdGhlIHVzZXJuYW1lXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoaG9zdF9uYW1lLCBwb3J0LCBhdXRoX21ldGhvZCA9IEh0dHBQcm94eUF1dGhlbnRpY2F0aW9uVHlwZS5Ob25lLCBhdXRoX3VzZXJuYW1lLCBhdXRoX3Bhc3N3b3JkKSB7XG4gICAgICAgIHRoaXMuaG9zdF9uYW1lID0gaG9zdF9uYW1lO1xuICAgICAgICB0aGlzLnBvcnQgPSBwb3J0O1xuICAgICAgICB0aGlzLmF1dGhfbWV0aG9kID0gYXV0aF9tZXRob2Q7XG4gICAgICAgIHRoaXMuYXV0aF91c2VybmFtZSA9IGF1dGhfdXNlcm5hbWU7XG4gICAgICAgIHRoaXMuYXV0aF9wYXNzd29yZCA9IGF1dGhfcGFzc3dvcmQ7XG4gICAgfVxufVxuZXhwb3J0cy5Db21tb25IdHRwUHJveHlPcHRpb25zID0gQ29tbW9uSHR0cFByb3h5T3B0aW9ucztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWh0dHAuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/aws-crt/dist/common/http.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/aws-crt/dist/common/io.js":
/*!************************************************!*\
  !*** ./node_modules/aws-crt/dist/common/io.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SocketDomain = exports.SocketType = exports.TlsVersion = void 0;\n/**\n *\n * A module containing a grab bag of support for core network I/O functionality, including sockets, TLS, DNS, logging,\n * error handling, streams, and connection -> thread mapping.\n *\n * Categories include:\n * - Network: socket configuration\n * - TLS: tls configuration\n * - Logging: logging controls and configuration\n * - IO: everything else\n *\n * @packageDocumentation\n * @module io\n */\n/**\n * TLS Version\n *\n * @category TLS\n */\nvar TlsVersion;\n(function (TlsVersion) {\n    TlsVersion[TlsVersion[\"SSLv3\"] = 0] = \"SSLv3\";\n    TlsVersion[TlsVersion[\"TLSv1\"] = 1] = \"TLSv1\";\n    TlsVersion[TlsVersion[\"TLSv1_1\"] = 2] = \"TLSv1_1\";\n    TlsVersion[TlsVersion[\"TLSv1_2\"] = 3] = \"TLSv1_2\";\n    TlsVersion[TlsVersion[\"TLSv1_3\"] = 4] = \"TLSv1_3\";\n    TlsVersion[TlsVersion[\"Default\"] = 128] = \"Default\";\n})(TlsVersion = exports.TlsVersion || (exports.TlsVersion = {}));\n/**\n * @category Network\n */\nvar SocketType;\n(function (SocketType) {\n    /**\n     * A streaming socket sends reliable messages over a two-way connection.\n     * This means TCP when used with {@link SocketDomain.IPV4}/{@link SocketDomain.IPV6},\n     * and Unix domain sockets when used with {@link SocketDomain.LOCAL }\n      */\n    SocketType[SocketType[\"STREAM\"] = 0] = \"STREAM\";\n    /**\n     * A datagram socket is connectionless and sends unreliable messages.\n     * This means UDP when used with {@link SocketDomain.IPV4}/{@link SocketDomain.IPV6}.\n     * {@link SocketDomain.LOCAL} is not compatible with {@link DGRAM}\n     */\n    SocketType[SocketType[\"DGRAM\"] = 1] = \"DGRAM\";\n})(SocketType = exports.SocketType || (exports.SocketType = {}));\n/**\n * @category Network\n */\nvar SocketDomain;\n(function (SocketDomain) {\n    /** IPv4 sockets */\n    SocketDomain[SocketDomain[\"IPV4\"] = 0] = \"IPV4\";\n    /** IPv6 sockets */\n    SocketDomain[SocketDomain[\"IPV6\"] = 1] = \"IPV6\";\n    /** UNIX domain socket/Windows named pipes */\n    SocketDomain[SocketDomain[\"LOCAL\"] = 2] = \"LOCAL\";\n})(SocketDomain = exports.SocketDomain || (exports.SocketDomain = {}));\n//# sourceMappingURL=io.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXdzLWNydC9kaXN0L2NvbW1vbi9pby5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQixHQUFHLGtCQUFrQixHQUFHLGtCQUFrQjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHNDQUFzQyxrQkFBa0IsS0FBSztBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyx3QkFBd0IsRUFBRSx3QkFBd0I7QUFDeEYsK0NBQStDO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLHdCQUF3QixFQUFFLHdCQUF3QjtBQUN4RixRQUFRLDBCQUEwQix3QkFBd0I7QUFDMUQ7QUFDQTtBQUNBLENBQUMsc0NBQXNDLGtCQUFrQixLQUFLO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDBDQUEwQyxvQkFBb0IsS0FBSztBQUNwRSIsInNvdXJjZXMiOlsid2VicGFjazovL3BheXdpbmQvLi9ub2RlX21vZHVsZXMvYXdzLWNydC9kaXN0L2NvbW1vbi9pby5qcz84MTI1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjAuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU29ja2V0RG9tYWluID0gZXhwb3J0cy5Tb2NrZXRUeXBlID0gZXhwb3J0cy5UbHNWZXJzaW9uID0gdm9pZCAwO1xuLyoqXG4gKlxuICogQSBtb2R1bGUgY29udGFpbmluZyBhIGdyYWIgYmFnIG9mIHN1cHBvcnQgZm9yIGNvcmUgbmV0d29yayBJL08gZnVuY3Rpb25hbGl0eSwgaW5jbHVkaW5nIHNvY2tldHMsIFRMUywgRE5TLCBsb2dnaW5nLFxuICogZXJyb3IgaGFuZGxpbmcsIHN0cmVhbXMsIGFuZCBjb25uZWN0aW9uIC0+IHRocmVhZCBtYXBwaW5nLlxuICpcbiAqIENhdGVnb3JpZXMgaW5jbHVkZTpcbiAqIC0gTmV0d29yazogc29ja2V0IGNvbmZpZ3VyYXRpb25cbiAqIC0gVExTOiB0bHMgY29uZmlndXJhdGlvblxuICogLSBMb2dnaW5nOiBsb2dnaW5nIGNvbnRyb2xzIGFuZCBjb25maWd1cmF0aW9uXG4gKiAtIElPOiBldmVyeXRoaW5nIGVsc2VcbiAqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgaW9cbiAqL1xuLyoqXG4gKiBUTFMgVmVyc2lvblxuICpcbiAqIEBjYXRlZ29yeSBUTFNcbiAqL1xudmFyIFRsc1ZlcnNpb247XG4oZnVuY3Rpb24gKFRsc1ZlcnNpb24pIHtcbiAgICBUbHNWZXJzaW9uW1Rsc1ZlcnNpb25bXCJTU0x2M1wiXSA9IDBdID0gXCJTU0x2M1wiO1xuICAgIFRsc1ZlcnNpb25bVGxzVmVyc2lvbltcIlRMU3YxXCJdID0gMV0gPSBcIlRMU3YxXCI7XG4gICAgVGxzVmVyc2lvbltUbHNWZXJzaW9uW1wiVExTdjFfMVwiXSA9IDJdID0gXCJUTFN2MV8xXCI7XG4gICAgVGxzVmVyc2lvbltUbHNWZXJzaW9uW1wiVExTdjFfMlwiXSA9IDNdID0gXCJUTFN2MV8yXCI7XG4gICAgVGxzVmVyc2lvbltUbHNWZXJzaW9uW1wiVExTdjFfM1wiXSA9IDRdID0gXCJUTFN2MV8zXCI7XG4gICAgVGxzVmVyc2lvbltUbHNWZXJzaW9uW1wiRGVmYXVsdFwiXSA9IDEyOF0gPSBcIkRlZmF1bHRcIjtcbn0pKFRsc1ZlcnNpb24gPSBleHBvcnRzLlRsc1ZlcnNpb24gfHwgKGV4cG9ydHMuVGxzVmVyc2lvbiA9IHt9KSk7XG4vKipcbiAqIEBjYXRlZ29yeSBOZXR3b3JrXG4gKi9cbnZhciBTb2NrZXRUeXBlO1xuKGZ1bmN0aW9uIChTb2NrZXRUeXBlKSB7XG4gICAgLyoqXG4gICAgICogQSBzdHJlYW1pbmcgc29ja2V0IHNlbmRzIHJlbGlhYmxlIG1lc3NhZ2VzIG92ZXIgYSB0d28td2F5IGNvbm5lY3Rpb24uXG4gICAgICogVGhpcyBtZWFucyBUQ1Agd2hlbiB1c2VkIHdpdGgge0BsaW5rIFNvY2tldERvbWFpbi5JUFY0fS97QGxpbmsgU29ja2V0RG9tYWluLklQVjZ9LFxuICAgICAqIGFuZCBVbml4IGRvbWFpbiBzb2NrZXRzIHdoZW4gdXNlZCB3aXRoIHtAbGluayBTb2NrZXREb21haW4uTE9DQUwgfVxuICAgICAgKi9cbiAgICBTb2NrZXRUeXBlW1NvY2tldFR5cGVbXCJTVFJFQU1cIl0gPSAwXSA9IFwiU1RSRUFNXCI7XG4gICAgLyoqXG4gICAgICogQSBkYXRhZ3JhbSBzb2NrZXQgaXMgY29ubmVjdGlvbmxlc3MgYW5kIHNlbmRzIHVucmVsaWFibGUgbWVzc2FnZXMuXG4gICAgICogVGhpcyBtZWFucyBVRFAgd2hlbiB1c2VkIHdpdGgge0BsaW5rIFNvY2tldERvbWFpbi5JUFY0fS97QGxpbmsgU29ja2V0RG9tYWluLklQVjZ9LlxuICAgICAqIHtAbGluayBTb2NrZXREb21haW4uTE9DQUx9IGlzIG5vdCBjb21wYXRpYmxlIHdpdGgge0BsaW5rIERHUkFNfVxuICAgICAqL1xuICAgIFNvY2tldFR5cGVbU29ja2V0VHlwZVtcIkRHUkFNXCJdID0gMV0gPSBcIkRHUkFNXCI7XG59KShTb2NrZXRUeXBlID0gZXhwb3J0cy5Tb2NrZXRUeXBlIHx8IChleHBvcnRzLlNvY2tldFR5cGUgPSB7fSkpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgTmV0d29ya1xuICovXG52YXIgU29ja2V0RG9tYWluO1xuKGZ1bmN0aW9uIChTb2NrZXREb21haW4pIHtcbiAgICAvKiogSVB2NCBzb2NrZXRzICovXG4gICAgU29ja2V0RG9tYWluW1NvY2tldERvbWFpbltcIklQVjRcIl0gPSAwXSA9IFwiSVBWNFwiO1xuICAgIC8qKiBJUHY2IHNvY2tldHMgKi9cbiAgICBTb2NrZXREb21haW5bU29ja2V0RG9tYWluW1wiSVBWNlwiXSA9IDFdID0gXCJJUFY2XCI7XG4gICAgLyoqIFVOSVggZG9tYWluIHNvY2tldC9XaW5kb3dzIG5hbWVkIHBpcGVzICovXG4gICAgU29ja2V0RG9tYWluW1NvY2tldERvbWFpbltcIkxPQ0FMXCJdID0gMl0gPSBcIkxPQ0FMXCI7XG59KShTb2NrZXREb21haW4gPSBleHBvcnRzLlNvY2tldERvbWFpbiB8fCAoZXhwb3J0cy5Tb2NrZXREb21haW4gPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW8uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/aws-crt/dist/common/io.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/aws-crt/dist/common/mqtt.js":
/*!**************************************************!*\
  !*** ./node_modules/aws-crt/dist/common/mqtt.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DEFAULT_RECONNECT_MIN_SEC = exports.DEFAULT_RECONNECT_MAX_SEC = exports.MqttWill = exports.QoS = void 0;\n/**\n * Quality of service control for mqtt publish operations\n *\n * @category MQTT\n */\nvar QoS;\n(function (QoS) {\n    /**\n     * QoS 0 - At most once delivery\n     * The message is delivered according to the capabilities of the underlying network.\n     * No response is sent by the receiver and no retry is performed by the sender.\n     * The message arrives at the receiver either once or not at all.\n     */\n    QoS[QoS[\"AtMostOnce\"] = 0] = \"AtMostOnce\";\n    /**\n     * QoS 1 - At least once delivery\n     * This quality of service ensures that the message arrives at the receiver at least once.\n     */\n    QoS[QoS[\"AtLeastOnce\"] = 1] = \"AtLeastOnce\";\n    /**\n     * QoS 2 - Exactly once delivery\n\n     * This is the highest quality of service, for use when neither loss nor\n     * duplication of messages are acceptable. There is an increased overhead\n     * associated with this quality of service.\n\n     * Note that, while this client supports QoS 2, the AWS IoT Core service\n     * does not support QoS 2 at time of writing (May 2020).\n     */\n    QoS[QoS[\"ExactlyOnce\"] = 2] = \"ExactlyOnce\";\n})(QoS = exports.QoS || (exports.QoS = {}));\n/**\n * A Will message is published by the server if a client is lost unexpectedly.\n *\n * The Will message is stored on the server when a client connects.\n * It is published if the client connection is lost without the server\n * receiving a DISCONNECT packet.\n *\n * [MQTT - 3.1.2 - 8]\n *\n * @category MQTT\n */\nclass MqttWill {\n    constructor(\n    /** Topic to publish Will message on. */\n    topic, \n    /** QoS used when publishing the Will message. */\n    qos, \n    /** Content of Will message. */\n    payload, \n    /** Whether the Will message is to be retained when it is published. */\n    retain = false) {\n        this.topic = topic;\n        this.qos = qos;\n        this.payload = payload;\n        this.retain = retain;\n    }\n}\nexports.MqttWill = MqttWill;\n/**\n * Const value for max reconnection back off time\n *\n * @category MQTT\n */\nexports.DEFAULT_RECONNECT_MAX_SEC = 128;\n/**\n * Const value for min reconnection back off time\n *\n * @category MQTT\n */\nexports.DEFAULT_RECONNECT_MIN_SEC = 1;\n//# sourceMappingURL=mqtt.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXdzLWNydC9kaXN0L2NvbW1vbi9tcXR0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUNBQWlDLEdBQUcsaUNBQWlDLEdBQUcsZ0JBQWdCLEdBQUcsV0FBVztBQUN0RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyx3QkFBd0IsV0FBVyxLQUFLO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXl3aW5kLy4vbm9kZV9tb2R1bGVzL2F3cy1jcnQvZGlzdC9jb21tb24vbXF0dC5qcz9hMWU2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjAuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuREVGQVVMVF9SRUNPTk5FQ1RfTUlOX1NFQyA9IGV4cG9ydHMuREVGQVVMVF9SRUNPTk5FQ1RfTUFYX1NFQyA9IGV4cG9ydHMuTXF0dFdpbGwgPSBleHBvcnRzLlFvUyA9IHZvaWQgMDtcbi8qKlxuICogUXVhbGl0eSBvZiBzZXJ2aWNlIGNvbnRyb2wgZm9yIG1xdHQgcHVibGlzaCBvcGVyYXRpb25zXG4gKlxuICogQGNhdGVnb3J5IE1RVFRcbiAqL1xudmFyIFFvUztcbihmdW5jdGlvbiAoUW9TKSB7XG4gICAgLyoqXG4gICAgICogUW9TIDAgLSBBdCBtb3N0IG9uY2UgZGVsaXZlcnlcbiAgICAgKiBUaGUgbWVzc2FnZSBpcyBkZWxpdmVyZWQgYWNjb3JkaW5nIHRvIHRoZSBjYXBhYmlsaXRpZXMgb2YgdGhlIHVuZGVybHlpbmcgbmV0d29yay5cbiAgICAgKiBObyByZXNwb25zZSBpcyBzZW50IGJ5IHRoZSByZWNlaXZlciBhbmQgbm8gcmV0cnkgaXMgcGVyZm9ybWVkIGJ5IHRoZSBzZW5kZXIuXG4gICAgICogVGhlIG1lc3NhZ2UgYXJyaXZlcyBhdCB0aGUgcmVjZWl2ZXIgZWl0aGVyIG9uY2Ugb3Igbm90IGF0IGFsbC5cbiAgICAgKi9cbiAgICBRb1NbUW9TW1wiQXRNb3N0T25jZVwiXSA9IDBdID0gXCJBdE1vc3RPbmNlXCI7XG4gICAgLyoqXG4gICAgICogUW9TIDEgLSBBdCBsZWFzdCBvbmNlIGRlbGl2ZXJ5XG4gICAgICogVGhpcyBxdWFsaXR5IG9mIHNlcnZpY2UgZW5zdXJlcyB0aGF0IHRoZSBtZXNzYWdlIGFycml2ZXMgYXQgdGhlIHJlY2VpdmVyIGF0IGxlYXN0IG9uY2UuXG4gICAgICovXG4gICAgUW9TW1FvU1tcIkF0TGVhc3RPbmNlXCJdID0gMV0gPSBcIkF0TGVhc3RPbmNlXCI7XG4gICAgLyoqXG4gICAgICogUW9TIDIgLSBFeGFjdGx5IG9uY2UgZGVsaXZlcnlcblxuICAgICAqIFRoaXMgaXMgdGhlIGhpZ2hlc3QgcXVhbGl0eSBvZiBzZXJ2aWNlLCBmb3IgdXNlIHdoZW4gbmVpdGhlciBsb3NzIG5vclxuICAgICAqIGR1cGxpY2F0aW9uIG9mIG1lc3NhZ2VzIGFyZSBhY2NlcHRhYmxlLiBUaGVyZSBpcyBhbiBpbmNyZWFzZWQgb3ZlcmhlYWRcbiAgICAgKiBhc3NvY2lhdGVkIHdpdGggdGhpcyBxdWFsaXR5IG9mIHNlcnZpY2UuXG5cbiAgICAgKiBOb3RlIHRoYXQsIHdoaWxlIHRoaXMgY2xpZW50IHN1cHBvcnRzIFFvUyAyLCB0aGUgQVdTIElvVCBDb3JlIHNlcnZpY2VcbiAgICAgKiBkb2VzIG5vdCBzdXBwb3J0IFFvUyAyIGF0IHRpbWUgb2Ygd3JpdGluZyAoTWF5IDIwMjApLlxuICAgICAqL1xuICAgIFFvU1tRb1NbXCJFeGFjdGx5T25jZVwiXSA9IDJdID0gXCJFeGFjdGx5T25jZVwiO1xufSkoUW9TID0gZXhwb3J0cy5Rb1MgfHwgKGV4cG9ydHMuUW9TID0ge30pKTtcbi8qKlxuICogQSBXaWxsIG1lc3NhZ2UgaXMgcHVibGlzaGVkIGJ5IHRoZSBzZXJ2ZXIgaWYgYSBjbGllbnQgaXMgbG9zdCB1bmV4cGVjdGVkbHkuXG4gKlxuICogVGhlIFdpbGwgbWVzc2FnZSBpcyBzdG9yZWQgb24gdGhlIHNlcnZlciB3aGVuIGEgY2xpZW50IGNvbm5lY3RzLlxuICogSXQgaXMgcHVibGlzaGVkIGlmIHRoZSBjbGllbnQgY29ubmVjdGlvbiBpcyBsb3N0IHdpdGhvdXQgdGhlIHNlcnZlclxuICogcmVjZWl2aW5nIGEgRElTQ09OTkVDVCBwYWNrZXQuXG4gKlxuICogW01RVFQgLSAzLjEuMiAtIDhdXG4gKlxuICogQGNhdGVnb3J5IE1RVFRcbiAqL1xuY2xhc3MgTXF0dFdpbGwge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKiBUb3BpYyB0byBwdWJsaXNoIFdpbGwgbWVzc2FnZSBvbi4gKi9cbiAgICB0b3BpYywgXG4gICAgLyoqIFFvUyB1c2VkIHdoZW4gcHVibGlzaGluZyB0aGUgV2lsbCBtZXNzYWdlLiAqL1xuICAgIHFvcywgXG4gICAgLyoqIENvbnRlbnQgb2YgV2lsbCBtZXNzYWdlLiAqL1xuICAgIHBheWxvYWQsIFxuICAgIC8qKiBXaGV0aGVyIHRoZSBXaWxsIG1lc3NhZ2UgaXMgdG8gYmUgcmV0YWluZWQgd2hlbiBpdCBpcyBwdWJsaXNoZWQuICovXG4gICAgcmV0YWluID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy50b3BpYyA9IHRvcGljO1xuICAgICAgICB0aGlzLnFvcyA9IHFvcztcbiAgICAgICAgdGhpcy5wYXlsb2FkID0gcGF5bG9hZDtcbiAgICAgICAgdGhpcy5yZXRhaW4gPSByZXRhaW47XG4gICAgfVxufVxuZXhwb3J0cy5NcXR0V2lsbCA9IE1xdHRXaWxsO1xuLyoqXG4gKiBDb25zdCB2YWx1ZSBmb3IgbWF4IHJlY29ubmVjdGlvbiBiYWNrIG9mZiB0aW1lXG4gKlxuICogQGNhdGVnb3J5IE1RVFRcbiAqL1xuZXhwb3J0cy5ERUZBVUxUX1JFQ09OTkVDVF9NQVhfU0VDID0gMTI4O1xuLyoqXG4gKiBDb25zdCB2YWx1ZSBmb3IgbWluIHJlY29ubmVjdGlvbiBiYWNrIG9mZiB0aW1lXG4gKlxuICogQGNhdGVnb3J5IE1RVFRcbiAqL1xuZXhwb3J0cy5ERUZBVUxUX1JFQ09OTkVDVF9NSU5fU0VDID0gMTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1xdHQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/aws-crt/dist/common/mqtt.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/aws-crt/dist/common/mqtt5.js":
/*!***************************************************!*\
  !*** ./node_modules/aws-crt/dist/common/mqtt5.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RetryJitterType = exports.ClientSessionBehavior = void 0;\n/**\n * Controls how the MQTT5 client should behave with respect to MQTT sessions.\n */\nvar ClientSessionBehavior;\n(function (ClientSessionBehavior) {\n    /** Maps to Clean */\n    ClientSessionBehavior[ClientSessionBehavior[\"Default\"] = 0] = \"Default\";\n    /**\n     * Always ask for a clean session when connecting\n     */\n    ClientSessionBehavior[ClientSessionBehavior[\"Clean\"] = 1] = \"Clean\";\n    /**\n     * Always attempt to rejoin an existing session after an initial connection success.\n     *\n     * Session rejoin requires an appropriate non-zero session expiry interval in the client's CONNECT options.\n     */\n    ClientSessionBehavior[ClientSessionBehavior[\"RejoinPostSuccess\"] = 2] = \"RejoinPostSuccess\";\n    /**\n     * Always attempt to rejoin an existing session.  Since the client does not yet support durable session persistence,\n     * this option is not guaranteed to be spec compliant because any unacknowledged qos1 publishes (which are\n     * part of the client session state) will not be present on the initial connection.  Until we support\n     * durable session resumption, this option is technically spec-breaking, but useful.\n     */\n    ClientSessionBehavior[ClientSessionBehavior[\"RejoinAlways\"] = 3] = \"RejoinAlways\";\n})(ClientSessionBehavior = exports.ClientSessionBehavior || (exports.ClientSessionBehavior = {}));\n/**\n * Controls how the reconnect delay is modified in order to smooth out the distribution of reconnection attempt\n * timepoints for a large set of reconnecting clients.\n *\n * See [Exponential Backoff and Jitter](https://aws.amazon.com/blogs/architecture/exponential-backoff-and-jitter/)\n */\nvar RetryJitterType;\n(function (RetryJitterType) {\n    /**\n     * Maps to Full\n     */\n    RetryJitterType[RetryJitterType[\"Default\"] = 0] = \"Default\";\n    /**\n     * Do not perform any randomization on the reconnect delay:\n     * ```NextReconnectDelay = CurrentExponentialBackoffValue```\n     */\n    RetryJitterType[RetryJitterType[\"None\"] = 1] = \"None\";\n    /**\n     * Fully random between no delay and the current exponential backoff value.\n     * ```NextReconnectDelay = Random(0, CurrentExponentialBackoffValue)```\n     */\n    RetryJitterType[RetryJitterType[\"Full\"] = 2] = \"Full\";\n    /**\n     * ```NextReconnectDelay = Min(MaxReconnectDelay, Random(MinReconnectDelay, 3 * CurrentReconnectDelay)```\n     */\n    RetryJitterType[RetryJitterType[\"Decorrelated\"] = 3] = \"Decorrelated\";\n})(RetryJitterType = exports.RetryJitterType || (exports.RetryJitterType = {}));\n//# sourceMappingURL=mqtt5.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXdzLWNydC9kaXN0L2NvbW1vbi9tcXR0NS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QixHQUFHLDZCQUE2QjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDREQUE0RCw2QkFBNkIsS0FBSztBQUMvRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxnREFBZ0QsdUJBQXVCLEtBQUs7QUFDN0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXl3aW5kLy4vbm9kZV9tb2R1bGVzL2F3cy1jcnQvZGlzdC9jb21tb24vbXF0dDUuanM/YWMyYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJldHJ5Sml0dGVyVHlwZSA9IGV4cG9ydHMuQ2xpZW50U2Vzc2lvbkJlaGF2aW9yID0gdm9pZCAwO1xuLyoqXG4gKiBDb250cm9scyBob3cgdGhlIE1RVFQ1IGNsaWVudCBzaG91bGQgYmVoYXZlIHdpdGggcmVzcGVjdCB0byBNUVRUIHNlc3Npb25zLlxuICovXG52YXIgQ2xpZW50U2Vzc2lvbkJlaGF2aW9yO1xuKGZ1bmN0aW9uIChDbGllbnRTZXNzaW9uQmVoYXZpb3IpIHtcbiAgICAvKiogTWFwcyB0byBDbGVhbiAqL1xuICAgIENsaWVudFNlc3Npb25CZWhhdmlvcltDbGllbnRTZXNzaW9uQmVoYXZpb3JbXCJEZWZhdWx0XCJdID0gMF0gPSBcIkRlZmF1bHRcIjtcbiAgICAvKipcbiAgICAgKiBBbHdheXMgYXNrIGZvciBhIGNsZWFuIHNlc3Npb24gd2hlbiBjb25uZWN0aW5nXG4gICAgICovXG4gICAgQ2xpZW50U2Vzc2lvbkJlaGF2aW9yW0NsaWVudFNlc3Npb25CZWhhdmlvcltcIkNsZWFuXCJdID0gMV0gPSBcIkNsZWFuXCI7XG4gICAgLyoqXG4gICAgICogQWx3YXlzIGF0dGVtcHQgdG8gcmVqb2luIGFuIGV4aXN0aW5nIHNlc3Npb24gYWZ0ZXIgYW4gaW5pdGlhbCBjb25uZWN0aW9uIHN1Y2Nlc3MuXG4gICAgICpcbiAgICAgKiBTZXNzaW9uIHJlam9pbiByZXF1aXJlcyBhbiBhcHByb3ByaWF0ZSBub24temVybyBzZXNzaW9uIGV4cGlyeSBpbnRlcnZhbCBpbiB0aGUgY2xpZW50J3MgQ09OTkVDVCBvcHRpb25zLlxuICAgICAqL1xuICAgIENsaWVudFNlc3Npb25CZWhhdmlvcltDbGllbnRTZXNzaW9uQmVoYXZpb3JbXCJSZWpvaW5Qb3N0U3VjY2Vzc1wiXSA9IDJdID0gXCJSZWpvaW5Qb3N0U3VjY2Vzc1wiO1xuICAgIC8qKlxuICAgICAqIEFsd2F5cyBhdHRlbXB0IHRvIHJlam9pbiBhbiBleGlzdGluZyBzZXNzaW9uLiAgU2luY2UgdGhlIGNsaWVudCBkb2VzIG5vdCB5ZXQgc3VwcG9ydCBkdXJhYmxlIHNlc3Npb24gcGVyc2lzdGVuY2UsXG4gICAgICogdGhpcyBvcHRpb24gaXMgbm90IGd1YXJhbnRlZWQgdG8gYmUgc3BlYyBjb21wbGlhbnQgYmVjYXVzZSBhbnkgdW5hY2tub3dsZWRnZWQgcW9zMSBwdWJsaXNoZXMgKHdoaWNoIGFyZVxuICAgICAqIHBhcnQgb2YgdGhlIGNsaWVudCBzZXNzaW9uIHN0YXRlKSB3aWxsIG5vdCBiZSBwcmVzZW50IG9uIHRoZSBpbml0aWFsIGNvbm5lY3Rpb24uICBVbnRpbCB3ZSBzdXBwb3J0XG4gICAgICogZHVyYWJsZSBzZXNzaW9uIHJlc3VtcHRpb24sIHRoaXMgb3B0aW9uIGlzIHRlY2huaWNhbGx5IHNwZWMtYnJlYWtpbmcsIGJ1dCB1c2VmdWwuXG4gICAgICovXG4gICAgQ2xpZW50U2Vzc2lvbkJlaGF2aW9yW0NsaWVudFNlc3Npb25CZWhhdmlvcltcIlJlam9pbkFsd2F5c1wiXSA9IDNdID0gXCJSZWpvaW5BbHdheXNcIjtcbn0pKENsaWVudFNlc3Npb25CZWhhdmlvciA9IGV4cG9ydHMuQ2xpZW50U2Vzc2lvbkJlaGF2aW9yIHx8IChleHBvcnRzLkNsaWVudFNlc3Npb25CZWhhdmlvciA9IHt9KSk7XG4vKipcbiAqIENvbnRyb2xzIGhvdyB0aGUgcmVjb25uZWN0IGRlbGF5IGlzIG1vZGlmaWVkIGluIG9yZGVyIHRvIHNtb290aCBvdXQgdGhlIGRpc3RyaWJ1dGlvbiBvZiByZWNvbm5lY3Rpb24gYXR0ZW1wdFxuICogdGltZXBvaW50cyBmb3IgYSBsYXJnZSBzZXQgb2YgcmVjb25uZWN0aW5nIGNsaWVudHMuXG4gKlxuICogU2VlIFtFeHBvbmVudGlhbCBCYWNrb2ZmIGFuZCBKaXR0ZXJdKGh0dHBzOi8vYXdzLmFtYXpvbi5jb20vYmxvZ3MvYXJjaGl0ZWN0dXJlL2V4cG9uZW50aWFsLWJhY2tvZmYtYW5kLWppdHRlci8pXG4gKi9cbnZhciBSZXRyeUppdHRlclR5cGU7XG4oZnVuY3Rpb24gKFJldHJ5Sml0dGVyVHlwZSkge1xuICAgIC8qKlxuICAgICAqIE1hcHMgdG8gRnVsbFxuICAgICAqL1xuICAgIFJldHJ5Sml0dGVyVHlwZVtSZXRyeUppdHRlclR5cGVbXCJEZWZhdWx0XCJdID0gMF0gPSBcIkRlZmF1bHRcIjtcbiAgICAvKipcbiAgICAgKiBEbyBub3QgcGVyZm9ybSBhbnkgcmFuZG9taXphdGlvbiBvbiB0aGUgcmVjb25uZWN0IGRlbGF5OlxuICAgICAqIGBgYE5leHRSZWNvbm5lY3REZWxheSA9IEN1cnJlbnRFeHBvbmVudGlhbEJhY2tvZmZWYWx1ZWBgYFxuICAgICAqL1xuICAgIFJldHJ5Sml0dGVyVHlwZVtSZXRyeUppdHRlclR5cGVbXCJOb25lXCJdID0gMV0gPSBcIk5vbmVcIjtcbiAgICAvKipcbiAgICAgKiBGdWxseSByYW5kb20gYmV0d2VlbiBubyBkZWxheSBhbmQgdGhlIGN1cnJlbnQgZXhwb25lbnRpYWwgYmFja29mZiB2YWx1ZS5cbiAgICAgKiBgYGBOZXh0UmVjb25uZWN0RGVsYXkgPSBSYW5kb20oMCwgQ3VycmVudEV4cG9uZW50aWFsQmFja29mZlZhbHVlKWBgYFxuICAgICAqL1xuICAgIFJldHJ5Sml0dGVyVHlwZVtSZXRyeUppdHRlclR5cGVbXCJGdWxsXCJdID0gMl0gPSBcIkZ1bGxcIjtcbiAgICAvKipcbiAgICAgKiBgYGBOZXh0UmVjb25uZWN0RGVsYXkgPSBNaW4oTWF4UmVjb25uZWN0RGVsYXksIFJhbmRvbShNaW5SZWNvbm5lY3REZWxheSwgMyAqIEN1cnJlbnRSZWNvbm5lY3REZWxheSlgYGBcbiAgICAgKi9cbiAgICBSZXRyeUppdHRlclR5cGVbUmV0cnlKaXR0ZXJUeXBlW1wiRGVjb3JyZWxhdGVkXCJdID0gM10gPSBcIkRlY29ycmVsYXRlZFwiO1xufSkoUmV0cnlKaXR0ZXJUeXBlID0gZXhwb3J0cy5SZXRyeUppdHRlclR5cGUgfHwgKGV4cG9ydHMuUmV0cnlKaXR0ZXJUeXBlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1xdHQ1LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/aws-crt/dist/common/mqtt5.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/aws-crt/dist/common/mqtt5_packet.js":
/*!**********************************************************!*\
  !*** ./node_modules/aws-crt/dist/common/mqtt5_packet.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PacketType = exports.RetainHandlingType = exports.QoS = exports.PayloadFormatIndicator = exports.isSuccessfulPubackReasonCode = exports.PubackReasonCode = exports.isSuccessfulUnsubackReasonCode = exports.UnsubackReasonCode = exports.isSuccessfulSubackReasonCode = exports.SubackReasonCode = exports.isSuccessfulDisconnectReasonCode = exports.DisconnectReasonCode = exports.isSuccessfulConnectReasonCode = exports.ConnectReasonCode = void 0;\n/**\n * Server return code for connect attempts.\n *\n * Enum values match [MQTT5 spec](https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901079) encoding values.\n */\nvar ConnectReasonCode;\n(function (ConnectReasonCode) {\n    /**\n     * Returned when the connection is accepted.\n     */\n    ConnectReasonCode[ConnectReasonCode[\"Success\"] = 0] = \"Success\";\n    /**\n     * Returned when the server has a failure but does not want to specify a reason or none\n     * of the other reason codes apply.\n     */\n    ConnectReasonCode[ConnectReasonCode[\"UnspecifiedError\"] = 128] = \"UnspecifiedError\";\n    /**\n     * Returned when data in the CONNECT packet could not be correctly parsed by the server.\n     */\n    ConnectReasonCode[ConnectReasonCode[\"MalformedPacket\"] = 129] = \"MalformedPacket\";\n    /**\n     * Returned when data in the CONNECT packet does not conform to the MQTT5 specification requirements.\n     */\n    ConnectReasonCode[ConnectReasonCode[\"ProtocolError\"] = 130] = \"ProtocolError\";\n    /**\n     * Returned when the CONNECT packet is valid but was not accepted by the server.\n     */\n    ConnectReasonCode[ConnectReasonCode[\"ImplementationSpecificError\"] = 131] = \"ImplementationSpecificError\";\n    /**\n     * Returned when the server does not support MQTT5 protocol version specified in the connection.\n     */\n    ConnectReasonCode[ConnectReasonCode[\"UnsupportedProtocolVersion\"] = 132] = \"UnsupportedProtocolVersion\";\n    /**\n     * Returned when the client identifier in the CONNECT packet is a valid string but not one that\n     * is allowed on the server.\n     */\n    ConnectReasonCode[ConnectReasonCode[\"ClientIdentifierNotValid\"] = 133] = \"ClientIdentifierNotValid\";\n    /**\n     * Returned when the server does not accept the username and/or password specified by the client\n     * in the connection packet.\n     */\n    ConnectReasonCode[ConnectReasonCode[\"BadUsernameOrPassword\"] = 134] = \"BadUsernameOrPassword\";\n    /**\n     * Returned when the client is not authorized to connect to the server.\n     */\n    ConnectReasonCode[ConnectReasonCode[\"NotAuthorized\"] = 135] = \"NotAuthorized\";\n    /**\n     * Returned when the MQTT5 server is not available.\n     */\n    ConnectReasonCode[ConnectReasonCode[\"ServerUnavailable\"] = 136] = \"ServerUnavailable\";\n    /**\n     * Returned when the server is too busy to make a connection. It is recommended that the client try again later.\n     */\n    ConnectReasonCode[ConnectReasonCode[\"ServerBusy\"] = 137] = \"ServerBusy\";\n    /**\n     * Returned when the client has been banned by the server.\n     */\n    ConnectReasonCode[ConnectReasonCode[\"Banned\"] = 138] = \"Banned\";\n    /**\n     * Returned when the authentication method used in the connection is either not supported on the server or it does\n     * not match the authentication method currently in use in the CONNECT packet.\n     */\n    ConnectReasonCode[ConnectReasonCode[\"BadAuthenticationMethod\"] = 140] = \"BadAuthenticationMethod\";\n    /**\n     * Returned when the Will topic name sent in the connection packet is correctly formed, but is not accepted by\n     * the server.\n     */\n    ConnectReasonCode[ConnectReasonCode[\"TopicNameInvalid\"] = 144] = \"TopicNameInvalid\";\n    /**\n     * Returned when the connection packet exceeded the maximum permissible size on the server.\n     */\n    ConnectReasonCode[ConnectReasonCode[\"PacketTooLarge\"] = 149] = \"PacketTooLarge\";\n    /**\n     * Returned when the quota limits set on the server have been met and/or exceeded.\n     */\n    ConnectReasonCode[ConnectReasonCode[\"QuotaExceeded\"] = 151] = \"QuotaExceeded\";\n    /**\n     * Returned when the Will payload in the CONNECT packet does not match the specified payload format indicator.\n     */\n    ConnectReasonCode[ConnectReasonCode[\"PayloadFormatInvalid\"] = 153] = \"PayloadFormatInvalid\";\n    /**\n     * Returned when the server does not retain messages but the connection packet on the client had Will retain enabled.\n     */\n    ConnectReasonCode[ConnectReasonCode[\"RetainNotSupported\"] = 154] = \"RetainNotSupported\";\n    /**\n     * Returned when the server does not support the QOS setting in the Will QOS in the connection packet.\n     */\n    ConnectReasonCode[ConnectReasonCode[\"QosNotSupported\"] = 155] = \"QosNotSupported\";\n    /**\n     * Returned when the server is telling the client to temporarily use another server instead of the one they\n     * are trying to connect to.\n     */\n    ConnectReasonCode[ConnectReasonCode[\"UseAnotherServer\"] = 156] = \"UseAnotherServer\";\n    /**\n     * Returned when the server is telling the client to permanently use another server instead of the one they\n     * are trying to connect to.\n     */\n    ConnectReasonCode[ConnectReasonCode[\"ServerMoved\"] = 157] = \"ServerMoved\";\n    /**\n     * Returned when the server connection rate limit has been exceeded.\n     */\n    ConnectReasonCode[ConnectReasonCode[\"ConnectionRateExceeded\"] = 159] = \"ConnectionRateExceeded\";\n})(ConnectReasonCode = exports.ConnectReasonCode || (exports.ConnectReasonCode = {}));\n/**\n * Determines if a reason code represents a successful connect operation\n *\n * @param reasonCode reason code to check success for\n */\nfunction isSuccessfulConnectReasonCode(reasonCode) {\n    return reasonCode < 128;\n}\nexports.isSuccessfulConnectReasonCode = isSuccessfulConnectReasonCode;\n/**\n * Reason code inside DISCONNECT packets.  Helps determine why a connection was terminated.\n *\n * Enum values match [MQTT5 spec](https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901208) encoding values.\n */\nvar DisconnectReasonCode;\n(function (DisconnectReasonCode) {\n    /**\n     * Returned when the remote endpoint wishes to disconnect normally. Will not trigger the publish of a Will message if a\n     * Will message was configured on the connection.\n     *\n     * May be sent by the client or server.\n     */\n    DisconnectReasonCode[DisconnectReasonCode[\"NormalDisconnection\"] = 0] = \"NormalDisconnection\";\n    /**\n     * Returns that the client wants to disconnect but requires that the server publish the Will message configured\n     * on the connection.\n     *\n     * May only be sent by the client.\n     */\n    DisconnectReasonCode[DisconnectReasonCode[\"DisconnectWithWillMessage\"] = 4] = \"DisconnectWithWillMessage\";\n    /**\n     * Returned when the connection was closed but the sender does not want to specify a reason or none\n     * of the other reason codes apply.\n     *\n     * May be sent by the client or the server.\n     */\n    DisconnectReasonCode[DisconnectReasonCode[\"UnspecifiedError\"] = 128] = \"UnspecifiedError\";\n    /**\n     * Indicates the remote endpoint received a packet that does not conform to the MQTT specification.\n     *\n     * May be sent by the client or the server.\n     */\n    DisconnectReasonCode[DisconnectReasonCode[\"MalformedPacket\"] = 129] = \"MalformedPacket\";\n    /**\n     * Returned when an unexpected or out-of-order packet was received by the remote endpoint.\n     *\n     * May be sent by the client or the server.\n     */\n    DisconnectReasonCode[DisconnectReasonCode[\"ProtocolError\"] = 130] = \"ProtocolError\";\n    /**\n     * Returned when a valid packet was received by the remote endpoint, but could not be processed by the current implementation.\n     *\n     * May be sent by the client or the server.\n     */\n    DisconnectReasonCode[DisconnectReasonCode[\"ImplementationSpecificError\"] = 131] = \"ImplementationSpecificError\";\n    /**\n     * Returned when the remote endpoint received a packet that represented an operation that was not authorized within\n     * the current connection.\n     *\n     * May only be sent by the server.\n     */\n    DisconnectReasonCode[DisconnectReasonCode[\"NotAuthorized\"] = 135] = \"NotAuthorized\";\n    /**\n     * Returned when the server is busy and cannot continue processing packets from the client.\n     *\n     * May only be sent by the server.\n     */\n    DisconnectReasonCode[DisconnectReasonCode[\"ServerBusy\"] = 137] = \"ServerBusy\";\n    /**\n     * Returned when the server is shutting down.\n     *\n     * May only be sent by the server.\n     */\n    DisconnectReasonCode[DisconnectReasonCode[\"ServerShuttingDown\"] = 139] = \"ServerShuttingDown\";\n    /**\n     * Returned when the server closes the connection because no packet from the client has been received in\n     * 1.5 times the KeepAlive time set when the connection was established.\n     *\n     * May only be sent by the server.\n     */\n    DisconnectReasonCode[DisconnectReasonCode[\"KeepAliveTimeout\"] = 141] = \"KeepAliveTimeout\";\n    /**\n     * Returned when the server has established another connection with the same client ID as a client's current\n     * connection, causing the current client to become disconnected.\n     *\n     * May only be sent by the server.\n     */\n    DisconnectReasonCode[DisconnectReasonCode[\"SessionTakenOver\"] = 142] = \"SessionTakenOver\";\n    /**\n     * Returned when the topic filter name is correctly formed but not accepted by the server.\n     *\n     * May only be sent by the server.\n     */\n    DisconnectReasonCode[DisconnectReasonCode[\"TopicFilterInvalid\"] = 143] = \"TopicFilterInvalid\";\n    /**\n     * Returned when topic name is correctly formed, but is not accepted.\n     *\n     * May be sent by the client or the server.\n     */\n    DisconnectReasonCode[DisconnectReasonCode[\"TopicNameInvalid\"] = 144] = \"TopicNameInvalid\";\n    /**\n     * Returned when the remote endpoint reached a state where there were more in-progress QoS1+ publishes then the\n     * limit it established for itself when the connection was opened.\n     *\n     * May be sent by the client or the server.\n     */\n    DisconnectReasonCode[DisconnectReasonCode[\"ReceiveMaximumExceeded\"] = 147] = \"ReceiveMaximumExceeded\";\n    /**\n     * Returned when the remote endpoint receives a PUBLISH packet that contained a topic alias greater than the\n     * maximum topic alias limit that it established for itself when the connection was opened.\n     *\n     * May be sent by the client or the server.\n     */\n    DisconnectReasonCode[DisconnectReasonCode[\"TopicAliasInvalid\"] = 148] = \"TopicAliasInvalid\";\n    /**\n     * Returned when the remote endpoint received a packet whose size was greater than the maximum packet size limit\n     * it established for itself when the connection was opened.\n     *\n     * May be sent by the client or the server.\n     */\n    DisconnectReasonCode[DisconnectReasonCode[\"PacketTooLarge\"] = 149] = \"PacketTooLarge\";\n    /**\n     * Returned when the remote endpoint's incoming data rate was too high.\n     *\n     * May be sent by the client or the server.\n     */\n    DisconnectReasonCode[DisconnectReasonCode[\"MessageRateTooHigh\"] = 150] = \"MessageRateTooHigh\";\n    /**\n     * Returned when an internal quota of the remote endpoint was exceeded.\n     *\n     * May be sent by the client or the server.\n     */\n    DisconnectReasonCode[DisconnectReasonCode[\"QuotaExceeded\"] = 151] = \"QuotaExceeded\";\n    /**\n     * Returned when the connection was closed due to an administrative action.\n     *\n     * May be sent by the client or the server.\n     */\n    DisconnectReasonCode[DisconnectReasonCode[\"AdministrativeAction\"] = 152] = \"AdministrativeAction\";\n    /**\n     * Returned when the remote endpoint received a packet where payload format did not match the format specified\n     * by the payload format indicator.\n     *\n     * May be sent by the client or the server.\n     */\n    DisconnectReasonCode[DisconnectReasonCode[\"PayloadFormatInvalid\"] = 153] = \"PayloadFormatInvalid\";\n    /**\n     * Returned when the server does not support retained messages.\n     *\n     * May only be sent by the server.\n     */\n    DisconnectReasonCode[DisconnectReasonCode[\"RetainNotSupported\"] = 154] = \"RetainNotSupported\";\n    /**\n     * Returned when the client sends a QOS that is greater than the maximum QOS established when the connection was\n     * opened.\n     *\n     * May only be sent by the server.\n     */\n    DisconnectReasonCode[DisconnectReasonCode[\"QosNotSupported\"] = 155] = \"QosNotSupported\";\n    /**\n     * Returned by the server to tell the client to temporarily use a different server.\n     *\n     * May only be sent by the server.\n     */\n    DisconnectReasonCode[DisconnectReasonCode[\"UseAnotherServer\"] = 156] = \"UseAnotherServer\";\n    /**\n     * Returned by the server to tell the client to permanently use a different server.\n     *\n     * May only be sent by the server.\n     */\n    DisconnectReasonCode[DisconnectReasonCode[\"ServerMoved\"] = 157] = \"ServerMoved\";\n    /**\n     * Returned by the server to tell the client that shared subscriptions are not supported on the server.\n     *\n     * May only be sent by the server.\n     */\n    DisconnectReasonCode[DisconnectReasonCode[\"SharedSubscriptionsNotSupported\"] = 158] = \"SharedSubscriptionsNotSupported\";\n    /**\n     * Returned when the server disconnects the client due to the connection rate being too high.\n     *\n     * May only be sent by the server.\n     */\n    DisconnectReasonCode[DisconnectReasonCode[\"ConnectionRateExceeded\"] = 159] = \"ConnectionRateExceeded\";\n    /**\n     * Returned by the server when the maximum connection time authorized for the connection was exceeded.\n     *\n     * May only be sent by the server.\n     */\n    DisconnectReasonCode[DisconnectReasonCode[\"MaximumConnectTime\"] = 160] = \"MaximumConnectTime\";\n    /**\n     * Returned by the server when it received a SUBSCRIBE packet with a subscription identifier, but the server does\n     * not support subscription identifiers.\n     *\n     * May only be sent by the server.\n     */\n    DisconnectReasonCode[DisconnectReasonCode[\"SubscriptionIdentifiersNotSupported\"] = 161] = \"SubscriptionIdentifiersNotSupported\";\n    /**\n     * Returned by the server when it received a SUBSCRIBE packet with a wildcard topic filter, but the server does\n     * not support wildcard topic filters.\n     *\n     * May only be sent by the server.\n     */\n    DisconnectReasonCode[DisconnectReasonCode[\"WildcardSubscriptionsNotSupported\"] = 162] = \"WildcardSubscriptionsNotSupported\";\n})(DisconnectReasonCode = exports.DisconnectReasonCode || (exports.DisconnectReasonCode = {}));\n/**\n * Determines if a reason code represents a successful disconnect operation\n *\n * @param reasonCode reason code to check success for\n */\nfunction isSuccessfulDisconnectReasonCode(reasonCode) {\n    return reasonCode < 128;\n}\nexports.isSuccessfulDisconnectReasonCode = isSuccessfulDisconnectReasonCode;\n/**\n * Reason codes inside SUBACK packet payloads that specify the results for each subscription in the associated\n * SUBSCRIBE packet.\n *\n * Enum values match [MQTT5 spec](https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901178) encoding values.\n */\nvar SubackReasonCode;\n(function (SubackReasonCode) {\n    /**\n     * Returned when the subscription was accepted and the maximum QOS sent will be QOS 0.\n     */\n    SubackReasonCode[SubackReasonCode[\"GrantedQoS0\"] = 0] = \"GrantedQoS0\";\n    /**\n     * Returned when the subscription was accepted and the maximum QOS sent will be QOS 1.\n     */\n    SubackReasonCode[SubackReasonCode[\"GrantedQoS1\"] = 1] = \"GrantedQoS1\";\n    /**\n     * Returned when the subscription was accepted and the maximum QOS sent will be QOS 2.\n     */\n    SubackReasonCode[SubackReasonCode[\"GrantedQoS2\"] = 2] = \"GrantedQoS2\";\n    /**\n     * Returned when the connection was closed but the sender does not want to specify a reason or none\n     * of the other reason codes apply.\n     */\n    SubackReasonCode[SubackReasonCode[\"UnspecifiedError\"] = 128] = \"UnspecifiedError\";\n    /**\n     * Returned when the subscription was valid but the server did not accept it.\n     */\n    SubackReasonCode[SubackReasonCode[\"ImplementationSpecificError\"] = 131] = \"ImplementationSpecificError\";\n    /**\n     * Returned when the client was not authorized to make the subscription on the server.\n     */\n    SubackReasonCode[SubackReasonCode[\"NotAuthorized\"] = 135] = \"NotAuthorized\";\n    /**\n     * Returned when the subscription topic filter was correctly formed but not allowed for the client.\n     */\n    SubackReasonCode[SubackReasonCode[\"TopicFilterInvalid\"] = 143] = \"TopicFilterInvalid\";\n    /**\n     * Returned when the packet identifier was already in use on the server.\n     */\n    SubackReasonCode[SubackReasonCode[\"PacketIdentifierInUse\"] = 145] = \"PacketIdentifierInUse\";\n    /**\n     * Returned when a subscribe-related quota set on the server was exceeded.\n     */\n    SubackReasonCode[SubackReasonCode[\"QuotaExceeded\"] = 151] = \"QuotaExceeded\";\n    /**\n     * Returned when the subscription's topic filter was a shared subscription and the server does not support\n     * shared subscriptions.\n     */\n    SubackReasonCode[SubackReasonCode[\"SharedSubscriptionsNotSupported\"] = 158] = \"SharedSubscriptionsNotSupported\";\n    /**\n     * Returned when the SUBSCRIBE packet contained a subscription identifier and the server does not support\n     * subscription identifiers.\n     */\n    SubackReasonCode[SubackReasonCode[\"SubscriptionIdentifiersNotSupported\"] = 161] = \"SubscriptionIdentifiersNotSupported\";\n    /**\n     * Returned when the subscription's topic filter contains a wildcard but the server does not support\n     * wildcard subscriptions.\n     */\n    SubackReasonCode[SubackReasonCode[\"WildcardSubscriptionsNotSupported\"] = 162] = \"WildcardSubscriptionsNotSupported\";\n})(SubackReasonCode = exports.SubackReasonCode || (exports.SubackReasonCode = {}));\n/**\n * Determines if a reason code represents a successful subscribe operation\n *\n * @param reasonCode reason code to check success for\n */\nfunction isSuccessfulSubackReasonCode(reasonCode) {\n    return reasonCode < 128;\n}\nexports.isSuccessfulSubackReasonCode = isSuccessfulSubackReasonCode;\n/**\n * Reason codes inside UNSUBACK packet payloads that specify the results for each topic filter in the associated\n * UNSUBSCRIBE packet.\n *\n * Enum values match [MQTT5 spec](https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901194) encoding values.\n */\nvar UnsubackReasonCode;\n(function (UnsubackReasonCode) {\n    /**\n     * Returned when the unsubscribe was successful and the client is no longer subscribed to the topic filter on the server.\n     */\n    UnsubackReasonCode[UnsubackReasonCode[\"Success\"] = 0] = \"Success\";\n    /**\n     * Returned when the topic filter did not match one of the client's existing subscriptions on the server.\n     */\n    UnsubackReasonCode[UnsubackReasonCode[\"NoSubscriptionExisted\"] = 17] = \"NoSubscriptionExisted\";\n    /**\n     * Returned when the unsubscribe of the topic filter was not accepted and the server does not want to specify a\n     * reason or none of the other reason codes apply.\n     */\n    UnsubackReasonCode[UnsubackReasonCode[\"UnspecifiedError\"] = 128] = \"UnspecifiedError\";\n    /**\n     * Returned when the topic filter was valid but the server does not accept an unsubscribe for it.\n     */\n    UnsubackReasonCode[UnsubackReasonCode[\"ImplementationSpecificError\"] = 131] = \"ImplementationSpecificError\";\n    /**\n     * Returned when the client was not authorized to unsubscribe from that topic filter on the server.\n     */\n    UnsubackReasonCode[UnsubackReasonCode[\"NotAuthorized\"] = 135] = \"NotAuthorized\";\n    /**\n     * Returned when the topic filter was correctly formed but is not allowed for the client on the server.\n     */\n    UnsubackReasonCode[UnsubackReasonCode[\"TopicFilterInvalid\"] = 143] = \"TopicFilterInvalid\";\n    /**\n     * Returned when the packet identifier was already in use on the server.\n     */\n    UnsubackReasonCode[UnsubackReasonCode[\"PacketIdentifierInUse\"] = 145] = \"PacketIdentifierInUse\";\n})(UnsubackReasonCode = exports.UnsubackReasonCode || (exports.UnsubackReasonCode = {}));\n/**\n * Determines if a reason code represents a successful unsubscribe operation\n *\n * @param reasonCode reason code to check success for\n */\nfunction isSuccessfulUnsubackReasonCode(reasonCode) {\n    return reasonCode < 128;\n}\nexports.isSuccessfulUnsubackReasonCode = isSuccessfulUnsubackReasonCode;\n/**\n * Reason code inside PUBACK packets that indicates the result of the associated PUBLISH request.\n *\n * Enum values match [MQTT5 spec](https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901124) encoding values.\n */\nvar PubackReasonCode;\n(function (PubackReasonCode) {\n    /**\n     * Returned when the (QoS 1) publish was accepted by the recipient.\n     *\n     * May be sent by the client or the server.\n     */\n    PubackReasonCode[PubackReasonCode[\"Success\"] = 0] = \"Success\";\n    /**\n     * Returned when the (QoS 1) publish was accepted but there were no matching subscribers.\n     *\n     * May only be sent by the server.\n     */\n    PubackReasonCode[PubackReasonCode[\"NoMatchingSubscribers\"] = 16] = \"NoMatchingSubscribers\";\n    /**\n     * Returned when the (QoS 1) publish was not accepted and the receiver does not want to specify a reason or none\n     * of the other reason codes apply.\n     *\n     * May be sent by the client or the server.\n     */\n    PubackReasonCode[PubackReasonCode[\"UnspecifiedError\"] = 128] = \"UnspecifiedError\";\n    /**\n     * Returned when the (QoS 1) publish was valid but the receiver was not willing to accept it.\n     *\n     * May be sent by the client or the server.\n     */\n    PubackReasonCode[PubackReasonCode[\"ImplementationSpecificError\"] = 131] = \"ImplementationSpecificError\";\n    /**\n     * Returned when the (QoS 1) publish was not authorized by the receiver.\n     *\n     * May be sent by the client or the server.\n     */\n    PubackReasonCode[PubackReasonCode[\"NotAuthorized\"] = 135] = \"NotAuthorized\";\n    /**\n     * Returned when the topic name was valid but the receiver was not willing to accept it.\n     *\n     * May be sent by the client or the server.\n     */\n    PubackReasonCode[PubackReasonCode[\"TopicNameInvalid\"] = 144] = \"TopicNameInvalid\";\n    /**\n     * Returned when the packet identifier used in the associated PUBLISH was already in use.\n     * This can indicate a mismatch in the session state between client and server.\n     *\n     * May be sent by the client or the server.\n     */\n    PubackReasonCode[PubackReasonCode[\"PacketIdentifierInUse\"] = 145] = \"PacketIdentifierInUse\";\n    /**\n     * Returned when the associated PUBLISH failed because an internal quota on the recipient was exceeded.\n     *\n     * May be sent by the client or the server.\n     */\n    PubackReasonCode[PubackReasonCode[\"QuotaExceeded\"] = 151] = \"QuotaExceeded\";\n    /**\n     * Returned when the PUBLISH packet's payload format did not match its payload format indicator property.\n     *\n     * May be sent by the client or the server.\n     */\n    PubackReasonCode[PubackReasonCode[\"PayloadFormatInvalid\"] = 153] = \"PayloadFormatInvalid\";\n})(PubackReasonCode = exports.PubackReasonCode || (exports.PubackReasonCode = {}));\n/**\n * Determines if a reason code represents a successful QoS 1 publish operation\n *\n * @param reasonCode reason code to check success for\n */\nfunction isSuccessfulPubackReasonCode(reasonCode) {\n    return reasonCode < 128;\n}\nexports.isSuccessfulPubackReasonCode = isSuccessfulPubackReasonCode;\n/**\n * Optional property describing a PUBLISH payload's format.\n *\n * Enum values match [MQTT5 spec](https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901111) encoding values.\n */\nvar PayloadFormatIndicator;\n(function (PayloadFormatIndicator) {\n    /**\n     * The payload is arbitrary binary data\n     */\n    PayloadFormatIndicator[PayloadFormatIndicator[\"Bytes\"] = 0] = \"Bytes\";\n    /**\n     * The payload is a well-formed utf-8 string value.\n     */\n    PayloadFormatIndicator[PayloadFormatIndicator[\"Utf8\"] = 1] = \"Utf8\";\n})(PayloadFormatIndicator = exports.PayloadFormatIndicator || (exports.PayloadFormatIndicator = {}));\n/**\n * MQTT message delivery quality of service.\n *\n * Enum values match [MQTT5 spec](https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901234) encoding values.\n */\nvar QoS;\n(function (QoS) {\n    /**\n     * The message is delivered according to the capabilities of the underlying network. No response is sent by the\n     * receiver and no retry is performed by the sender. The message arrives at the receiver either once or not at all.\n     */\n    QoS[QoS[\"AtMostOnce\"] = 0] = \"AtMostOnce\";\n    /**\n     * A level of service that ensures that the message arrives at the receiver at least once.\n     */\n    QoS[QoS[\"AtLeastOnce\"] = 1] = \"AtLeastOnce\";\n    /**\n     * A level of service that ensures that the message arrives at the receiver exactly once.\n     */\n    QoS[QoS[\"ExactlyOnce\"] = 2] = \"ExactlyOnce\";\n})(QoS = exports.QoS || (exports.QoS = {}));\n/**\n * Configures how retained messages should be handled when subscribing with a topic filter that matches topics with\n * associated retained messages.\n *\n * Enum values match [MQTT5 spec](https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901169) encoding values.\n */\nvar RetainHandlingType;\n(function (RetainHandlingType) {\n    /**\n     * The server should always send all retained messages on topics that match a subscription's filter.\n     */\n    RetainHandlingType[RetainHandlingType[\"SendOnSubscribe\"] = 0] = \"SendOnSubscribe\";\n    /**\n     * The server should send retained messages on topics that match the subscription's filter, but only for the\n     * first matching subscription, per session.\n     */\n    RetainHandlingType[RetainHandlingType[\"SendOnSubscribeIfNew\"] = 1] = \"SendOnSubscribeIfNew\";\n    /**\n     * Subscriptions must not trigger any retained message publishes from the server.\n     */\n    RetainHandlingType[RetainHandlingType[\"DontSend\"] = 2] = \"DontSend\";\n})(RetainHandlingType = exports.RetainHandlingType || (exports.RetainHandlingType = {}));\n/**\n * Packet type indicator that allows for basic polymorphism with user-received packets.  Enum values\n * match the mqtt spec's [packet type encoding](https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901022) values.\n */\nvar PacketType;\n(function (PacketType) {\n    PacketType[PacketType[\"Connect\"] = 1] = \"Connect\";\n    PacketType[PacketType[\"Connack\"] = 2] = \"Connack\";\n    PacketType[PacketType[\"Publish\"] = 3] = \"Publish\";\n    PacketType[PacketType[\"Puback\"] = 4] = \"Puback\";\n    PacketType[PacketType[\"Pubrec\"] = 5] = \"Pubrec\";\n    PacketType[PacketType[\"Pubrel\"] = 6] = \"Pubrel\";\n    PacketType[PacketType[\"Pubcomp\"] = 7] = \"Pubcomp\";\n    PacketType[PacketType[\"Subscribe\"] = 8] = \"Subscribe\";\n    PacketType[PacketType[\"Suback\"] = 9] = \"Suback\";\n    PacketType[PacketType[\"Unsubscribe\"] = 10] = \"Unsubscribe\";\n    PacketType[PacketType[\"Unsuback\"] = 11] = \"Unsuback\";\n    PacketType[PacketType[\"Pingreq\"] = 12] = \"Pingreq\";\n    PacketType[PacketType[\"Pingresp\"] = 13] = \"Pingresp\";\n    PacketType[PacketType[\"Disconnect\"] = 14] = \"Disconnect\";\n    PacketType[PacketType[\"Auth\"] = 15] = \"Auth\";\n})(PacketType = exports.PacketType || (exports.PacketType = {}));\n//# sourceMappingURL=mqtt5_packet.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/aws-crt/dist/common/mqtt5_packet.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/aws-crt/dist/common/mqtt_shared.js":
/*!*********************************************************!*\
  !*** ./node_modules/aws-crt/dist/common/mqtt_shared.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DEFAULT_KEEP_ALIVE = exports.normalize_payload = void 0;\n/**\n * @packageDocumentation\n */\n/**\n * Converts payload to Buffer or string regardless of the supplied type\n * @param payload The payload to convert\n * @internal\n */\nfunction normalize_payload(payload) {\n    if (payload instanceof Buffer) {\n        // pass Buffer through\n        return payload;\n    }\n    if (typeof payload === 'string') {\n        // pass string through\n        return payload;\n    }\n    if (ArrayBuffer.isView(payload)) {\n        // return Buffer with view upon the same bytes (no copy)\n        const view = payload;\n        return Buffer.from(view.buffer, view.byteOffset, view.byteLength);\n    }\n    if (payload instanceof ArrayBuffer) {\n        // return Buffer with view upon the same bytes (no copy)\n        return Buffer.from(payload);\n    }\n    if (typeof payload === 'object') {\n        // Convert Object to JSON string\n        return JSON.stringify(payload);\n    }\n    if (!payload) {\n        return \"\";\n    }\n    throw new TypeError(\"payload parameter must be a string, object, or DataView.\");\n}\nexports.normalize_payload = normalize_payload;\n/** @internal */\nexports.DEFAULT_KEEP_ALIVE = 1200;\n//# sourceMappingURL=mqtt_shared.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXdzLWNydC9kaXN0L2NvbW1vbi9tcXR0X3NoYXJlZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQixHQUFHLHlCQUF5QjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0EsMEJBQTBCO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGF5d2luZC8uL25vZGVfbW9kdWxlcy9hd3MtY3J0L2Rpc3QvY29tbW9uL21xdHRfc2hhcmVkLmpzPzZhMTciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMC5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5ERUZBVUxUX0tFRVBfQUxJVkUgPSBleHBvcnRzLm5vcm1hbGl6ZV9wYXlsb2FkID0gdm9pZCAwO1xuLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqL1xuLyoqXG4gKiBDb252ZXJ0cyBwYXlsb2FkIHRvIEJ1ZmZlciBvciBzdHJpbmcgcmVnYXJkbGVzcyBvZiB0aGUgc3VwcGxpZWQgdHlwZVxuICogQHBhcmFtIHBheWxvYWQgVGhlIHBheWxvYWQgdG8gY29udmVydFxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZV9wYXlsb2FkKHBheWxvYWQpIHtcbiAgICBpZiAocGF5bG9hZCBpbnN0YW5jZW9mIEJ1ZmZlcikge1xuICAgICAgICAvLyBwYXNzIEJ1ZmZlciB0aHJvdWdoXG4gICAgICAgIHJldHVybiBwYXlsb2FkO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHBheWxvYWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIHBhc3Mgc3RyaW5nIHRocm91Z2hcbiAgICAgICAgcmV0dXJuIHBheWxvYWQ7XG4gICAgfVxuICAgIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcocGF5bG9hZCkpIHtcbiAgICAgICAgLy8gcmV0dXJuIEJ1ZmZlciB3aXRoIHZpZXcgdXBvbiB0aGUgc2FtZSBieXRlcyAobm8gY29weSlcbiAgICAgICAgY29uc3QgdmlldyA9IHBheWxvYWQ7XG4gICAgICAgIHJldHVybiBCdWZmZXIuZnJvbSh2aWV3LmJ1ZmZlciwgdmlldy5ieXRlT2Zmc2V0LCB2aWV3LmJ5dGVMZW5ndGgpO1xuICAgIH1cbiAgICBpZiAocGF5bG9hZCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICAgIC8vIHJldHVybiBCdWZmZXIgd2l0aCB2aWV3IHVwb24gdGhlIHNhbWUgYnl0ZXMgKG5vIGNvcHkpXG4gICAgICAgIHJldHVybiBCdWZmZXIuZnJvbShwYXlsb2FkKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwYXlsb2FkID09PSAnb2JqZWN0Jykge1xuICAgICAgICAvLyBDb252ZXJ0IE9iamVjdCB0byBKU09OIHN0cmluZ1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocGF5bG9hZCk7XG4gICAgfVxuICAgIGlmICghcGF5bG9hZCkge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcInBheWxvYWQgcGFyYW1ldGVyIG11c3QgYmUgYSBzdHJpbmcsIG9iamVjdCwgb3IgRGF0YVZpZXcuXCIpO1xufVxuZXhwb3J0cy5ub3JtYWxpemVfcGF5bG9hZCA9IG5vcm1hbGl6ZV9wYXlsb2FkO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0cy5ERUZBVUxUX0tFRVBfQUxJVkUgPSAxMjAwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bXF0dF9zaGFyZWQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/aws-crt/dist/common/mqtt_shared.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/aws-crt/dist/common/platform.js":
/*!******************************************************!*\
  !*** ./node_modules/aws-crt/dist/common/platform.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.crt_version = exports.package_info = exports.is_browser = exports.is_nodejs = void 0;\n/**\n *\n * A module containing miscellaneous platform-related queries\n *\n * @packageDocumentation\n * @module platform\n * @mergeTarget\n */\n/**\n * Returns true if this script is running under nodejs\n *\n * @category System\n */\nfunction is_nodejs() {\n    return (typeof process === 'object' &&\n        typeof process.versions === 'object' &&\n        typeof process.versions.node !== 'undefined');\n}\nexports.is_nodejs = is_nodejs;\n/**\n * Returns true if this script is running in a browser\n *\n * @category System\n */\nfunction is_browser() {\n    return !is_nodejs();\n}\nexports.is_browser = is_browser;\n/**\n * Returns the package information for aws-crt-nodejs\n *\n * @category System\n */\nfunction package_info() {\n    try {\n        const pkg = __webpack_require__(/*! ../../package.json */ \"(ssr)/./node_modules/aws-crt/package.json\");\n        return pkg;\n    }\n    catch (err) {\n        return {\n            name: 'aws-crt-nodejs',\n            version: 'UNKNOWN'\n        };\n    }\n}\nexports.package_info = package_info;\n/**\n * Returns the AWS CRT version\n *\n * @category System\n */\nfunction crt_version() {\n    const pkg = package_info();\n    return pkg.version;\n}\nexports.crt_version = crt_version;\n//# sourceMappingURL=platform.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXdzLWNydC9kaXN0L2NvbW1vbi9wbGF0Zm9ybS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQixHQUFHLG9CQUFvQixHQUFHLGtCQUFrQixHQUFHLGlCQUFpQjtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixtQkFBTyxDQUFDLHFFQUFvQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGF5d2luZC8uL25vZGVfbW9kdWxlcy9hd3MtY3J0L2Rpc3QvY29tbW9uL3BsYXRmb3JtLmpzP2FlMzgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMC5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcnRfdmVyc2lvbiA9IGV4cG9ydHMucGFja2FnZV9pbmZvID0gZXhwb3J0cy5pc19icm93c2VyID0gZXhwb3J0cy5pc19ub2RlanMgPSB2b2lkIDA7XG4vKipcbiAqXG4gKiBBIG1vZHVsZSBjb250YWluaW5nIG1pc2NlbGxhbmVvdXMgcGxhdGZvcm0tcmVsYXRlZCBxdWVyaWVzXG4gKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIHBsYXRmb3JtXG4gKiBAbWVyZ2VUYXJnZXRcbiAqL1xuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBzY3JpcHQgaXMgcnVubmluZyB1bmRlciBub2RlanNcbiAqXG4gKiBAY2F0ZWdvcnkgU3lzdGVtXG4gKi9cbmZ1bmN0aW9uIGlzX25vZGVqcygpIHtcbiAgICByZXR1cm4gKHR5cGVvZiBwcm9jZXNzID09PSAnb2JqZWN0JyAmJlxuICAgICAgICB0eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucyA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMubm9kZSAhPT0gJ3VuZGVmaW5lZCcpO1xufVxuZXhwb3J0cy5pc19ub2RlanMgPSBpc19ub2RlanM7XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIHNjcmlwdCBpcyBydW5uaW5nIGluIGEgYnJvd3NlclxuICpcbiAqIEBjYXRlZ29yeSBTeXN0ZW1cbiAqL1xuZnVuY3Rpb24gaXNfYnJvd3NlcigpIHtcbiAgICByZXR1cm4gIWlzX25vZGVqcygpO1xufVxuZXhwb3J0cy5pc19icm93c2VyID0gaXNfYnJvd3Nlcjtcbi8qKlxuICogUmV0dXJucyB0aGUgcGFja2FnZSBpbmZvcm1hdGlvbiBmb3IgYXdzLWNydC1ub2RlanNcbiAqXG4gKiBAY2F0ZWdvcnkgU3lzdGVtXG4gKi9cbmZ1bmN0aW9uIHBhY2thZ2VfaW5mbygpIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBwa2cgPSByZXF1aXJlKCcuLi8uLi9wYWNrYWdlLmpzb24nKTtcbiAgICAgICAgcmV0dXJuIHBrZztcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZTogJ2F3cy1jcnQtbm9kZWpzJyxcbiAgICAgICAgICAgIHZlcnNpb246ICdVTktOT1dOJ1xuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMucGFja2FnZV9pbmZvID0gcGFja2FnZV9pbmZvO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBBV1MgQ1JUIHZlcnNpb25cbiAqXG4gKiBAY2F0ZWdvcnkgU3lzdGVtXG4gKi9cbmZ1bmN0aW9uIGNydF92ZXJzaW9uKCkge1xuICAgIGNvbnN0IHBrZyA9IHBhY2thZ2VfaW5mbygpO1xuICAgIHJldHVybiBwa2cudmVyc2lvbjtcbn1cbmV4cG9ydHMuY3J0X3ZlcnNpb24gPSBjcnRfdmVyc2lvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBsYXRmb3JtLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/aws-crt/dist/common/platform.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/aws-crt/dist/common/promise.js":
/*!*****************************************************!*\
  !*** ./node_modules/aws-crt/dist/common/promise.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.newLiftedPromise = exports.makeSelfCleaningPromise = void 0;\n/**\n * A helper function that takes a promise and creates a wrapper promise that invokes a cleanup function when the inner\n * promise is completed for any reason.  The primary use is to remove event listeners related to promise completion\n * when the promise actually completes.  This allows us to keep the number of listeners on a CancelController bounded by\n * the number of incomplete promises associated with it.  If we didn't clean up, the listener set would grow\n * without limit.\n *\n * For cancellation, this leads to an internal usage pattern that is strongly recommended:\n *\n * ```\n * async doSomethingCancellable(...) : Promise<...> {\n *    removeListenerFunctor = undefined;\n *\n *    innerPromise = new Promise(async (resolve, reject) => {\n *       ...\n *\n *       cancelListenerFunction = () => { clean up and reject innerPromise };\n *       removeListenerFunctor = cancelController.addListener(cancelListenerFunction);\n *\n *       ...\n *    }\n *\n *    return makeSelfCleaningPromise(innerPromise, removeListenerFunctor);\n * }\n * ```\n *\n * @param promise promise to wrap with automatic cleanup\n * @param cleaner cleaner function to invoke when the promise is completed\n *\n * @return a promise with matching result/err, that invokes the cleaner function on inner promise completion\n */\nfunction makeSelfCleaningPromise(promise, cleaner) {\n    if (!cleaner) {\n        return promise;\n    }\n    return promise.finally(() => { cleaner(); });\n}\nexports.makeSelfCleaningPromise = makeSelfCleaningPromise;\n/**\n * Factory function to create a new LiftedPromise\n *\n * @param promiseBody optional body function to invoke as part of promise creation\n *\n * @return a promise whose resolve and reject methods have been lifted out of the internal body function and made\n * available to external actors\n */\nfunction newLiftedPromise(promiseBody) {\n    let localResolve = undefined;\n    let localReject = undefined;\n    let promise = new Promise((resolve, reject) => {\n        localResolve = resolve;\n        localReject = reject;\n    });\n    if (!localResolve || !localReject) {\n        // should never happen\n        throw new Error(\"Failed to bind resolve and reject when making lifted promise\");\n    }\n    if (promiseBody) {\n        promiseBody(localResolve, localReject);\n    }\n    return {\n        promise: promise,\n        resolve: localResolve,\n        reject: localReject\n    };\n}\nexports.newLiftedPromise = newLiftedPromise;\n//# sourceMappingURL=promise.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXdzLWNydC9kaXN0L2NvbW1vbi9wcm9taXNlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsd0JBQXdCLEdBQUcsK0JBQStCO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxZQUFZO0FBQy9DO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXl3aW5kLy4vbm9kZV9tb2R1bGVzL2F3cy1jcnQvZGlzdC9jb21tb24vcHJvbWlzZS5qcz8yZmU1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjAuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubmV3TGlmdGVkUHJvbWlzZSA9IGV4cG9ydHMubWFrZVNlbGZDbGVhbmluZ1Byb21pc2UgPSB2b2lkIDA7XG4vKipcbiAqIEEgaGVscGVyIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYSBwcm9taXNlIGFuZCBjcmVhdGVzIGEgd3JhcHBlciBwcm9taXNlIHRoYXQgaW52b2tlcyBhIGNsZWFudXAgZnVuY3Rpb24gd2hlbiB0aGUgaW5uZXJcbiAqIHByb21pc2UgaXMgY29tcGxldGVkIGZvciBhbnkgcmVhc29uLiAgVGhlIHByaW1hcnkgdXNlIGlzIHRvIHJlbW92ZSBldmVudCBsaXN0ZW5lcnMgcmVsYXRlZCB0byBwcm9taXNlIGNvbXBsZXRpb25cbiAqIHdoZW4gdGhlIHByb21pc2UgYWN0dWFsbHkgY29tcGxldGVzLiAgVGhpcyBhbGxvd3MgdXMgdG8ga2VlcCB0aGUgbnVtYmVyIG9mIGxpc3RlbmVycyBvbiBhIENhbmNlbENvbnRyb2xsZXIgYm91bmRlZCBieVxuICogdGhlIG51bWJlciBvZiBpbmNvbXBsZXRlIHByb21pc2VzIGFzc29jaWF0ZWQgd2l0aCBpdC4gIElmIHdlIGRpZG4ndCBjbGVhbiB1cCwgdGhlIGxpc3RlbmVyIHNldCB3b3VsZCBncm93XG4gKiB3aXRob3V0IGxpbWl0LlxuICpcbiAqIEZvciBjYW5jZWxsYXRpb24sIHRoaXMgbGVhZHMgdG8gYW4gaW50ZXJuYWwgdXNhZ2UgcGF0dGVybiB0aGF0IGlzIHN0cm9uZ2x5IHJlY29tbWVuZGVkOlxuICpcbiAqIGBgYFxuICogYXN5bmMgZG9Tb21ldGhpbmdDYW5jZWxsYWJsZSguLi4pIDogUHJvbWlzZTwuLi4+IHtcbiAqICAgIHJlbW92ZUxpc3RlbmVyRnVuY3RvciA9IHVuZGVmaW5lZDtcbiAqXG4gKiAgICBpbm5lclByb21pc2UgPSBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gKiAgICAgICAuLi5cbiAqXG4gKiAgICAgICBjYW5jZWxMaXN0ZW5lckZ1bmN0aW9uID0gKCkgPT4geyBjbGVhbiB1cCBhbmQgcmVqZWN0IGlubmVyUHJvbWlzZSB9O1xuICogICAgICAgcmVtb3ZlTGlzdGVuZXJGdW5jdG9yID0gY2FuY2VsQ29udHJvbGxlci5hZGRMaXN0ZW5lcihjYW5jZWxMaXN0ZW5lckZ1bmN0aW9uKTtcbiAqXG4gKiAgICAgICAuLi5cbiAqICAgIH1cbiAqXG4gKiAgICByZXR1cm4gbWFrZVNlbGZDbGVhbmluZ1Byb21pc2UoaW5uZXJQcm9taXNlLCByZW1vdmVMaXN0ZW5lckZ1bmN0b3IpO1xuICogfVxuICogYGBgXG4gKlxuICogQHBhcmFtIHByb21pc2UgcHJvbWlzZSB0byB3cmFwIHdpdGggYXV0b21hdGljIGNsZWFudXBcbiAqIEBwYXJhbSBjbGVhbmVyIGNsZWFuZXIgZnVuY3Rpb24gdG8gaW52b2tlIHdoZW4gdGhlIHByb21pc2UgaXMgY29tcGxldGVkXG4gKlxuICogQHJldHVybiBhIHByb21pc2Ugd2l0aCBtYXRjaGluZyByZXN1bHQvZXJyLCB0aGF0IGludm9rZXMgdGhlIGNsZWFuZXIgZnVuY3Rpb24gb24gaW5uZXIgcHJvbWlzZSBjb21wbGV0aW9uXG4gKi9cbmZ1bmN0aW9uIG1ha2VTZWxmQ2xlYW5pbmdQcm9taXNlKHByb21pc2UsIGNsZWFuZXIpIHtcbiAgICBpZiAoIWNsZWFuZXIpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuICAgIHJldHVybiBwcm9taXNlLmZpbmFsbHkoKCkgPT4geyBjbGVhbmVyKCk7IH0pO1xufVxuZXhwb3J0cy5tYWtlU2VsZkNsZWFuaW5nUHJvbWlzZSA9IG1ha2VTZWxmQ2xlYW5pbmdQcm9taXNlO1xuLyoqXG4gKiBGYWN0b3J5IGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIG5ldyBMaWZ0ZWRQcm9taXNlXG4gKlxuICogQHBhcmFtIHByb21pc2VCb2R5IG9wdGlvbmFsIGJvZHkgZnVuY3Rpb24gdG8gaW52b2tlIGFzIHBhcnQgb2YgcHJvbWlzZSBjcmVhdGlvblxuICpcbiAqIEByZXR1cm4gYSBwcm9taXNlIHdob3NlIHJlc29sdmUgYW5kIHJlamVjdCBtZXRob2RzIGhhdmUgYmVlbiBsaWZ0ZWQgb3V0IG9mIHRoZSBpbnRlcm5hbCBib2R5IGZ1bmN0aW9uIGFuZCBtYWRlXG4gKiBhdmFpbGFibGUgdG8gZXh0ZXJuYWwgYWN0b3JzXG4gKi9cbmZ1bmN0aW9uIG5ld0xpZnRlZFByb21pc2UocHJvbWlzZUJvZHkpIHtcbiAgICBsZXQgbG9jYWxSZXNvbHZlID0gdW5kZWZpbmVkO1xuICAgIGxldCBsb2NhbFJlamVjdCA9IHVuZGVmaW5lZDtcbiAgICBsZXQgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgbG9jYWxSZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgICAgbG9jYWxSZWplY3QgPSByZWplY3Q7XG4gICAgfSk7XG4gICAgaWYgKCFsb2NhbFJlc29sdmUgfHwgIWxvY2FsUmVqZWN0KSB7XG4gICAgICAgIC8vIHNob3VsZCBuZXZlciBoYXBwZW5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGJpbmQgcmVzb2x2ZSBhbmQgcmVqZWN0IHdoZW4gbWFraW5nIGxpZnRlZCBwcm9taXNlXCIpO1xuICAgIH1cbiAgICBpZiAocHJvbWlzZUJvZHkpIHtcbiAgICAgICAgcHJvbWlzZUJvZHkobG9jYWxSZXNvbHZlLCBsb2NhbFJlamVjdCk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHByb21pc2U6IHByb21pc2UsXG4gICAgICAgIHJlc29sdmU6IGxvY2FsUmVzb2x2ZSxcbiAgICAgICAgcmVqZWN0OiBsb2NhbFJlamVjdFxuICAgIH07XG59XG5leHBvcnRzLm5ld0xpZnRlZFByb21pc2UgPSBuZXdMaWZ0ZWRQcm9taXNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvbWlzZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/aws-crt/dist/common/promise.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/aws-crt/dist/common/resource_safety.js":
/*!*************************************************************!*\
  !*** ./node_modules/aws-crt/dist/common/resource_safety.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.using = void 0;\n/**\n * Use this function to create a resource in an async context. This will make sure the\n * resources are cleaned up before returning.\n *\n * Example:\n * ```\n * await using(res = new SomeResource(), async (res) =>  {\n *     res.do_the_thing();\n * });\n * ```\n *\n * @category System\n */\nfunction using(resource, func) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            yield func(resource);\n        }\n        finally {\n            resource.close();\n        }\n    });\n}\nexports.using = using;\n//# sourceMappingURL=resource_safety.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXdzLWNydC9kaXN0L2NvbW1vbi9yZXNvdXJjZV9zYWZldHkuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLCtEQUErRCxpQkFBaUI7QUFDNUc7QUFDQSxvQ0FBb0MsTUFBTSwrQkFBK0IsWUFBWTtBQUNyRixtQ0FBbUMsTUFBTSxtQ0FBbUMsWUFBWTtBQUN4RixnQ0FBZ0M7QUFDaEM7QUFDQSxLQUFLO0FBQ0w7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsYUFBYTtBQUNiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGF5d2luZC8uL25vZGVfbW9kdWxlcy9hd3MtY3J0L2Rpc3QvY29tbW9uL3Jlc291cmNlX3NhZmV0eS5qcz8yNDU1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjAuXG4gKi9cbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51c2luZyA9IHZvaWQgMDtcbi8qKlxuICogVXNlIHRoaXMgZnVuY3Rpb24gdG8gY3JlYXRlIGEgcmVzb3VyY2UgaW4gYW4gYXN5bmMgY29udGV4dC4gVGhpcyB3aWxsIG1ha2Ugc3VyZSB0aGVcbiAqIHJlc291cmNlcyBhcmUgY2xlYW5lZCB1cCBiZWZvcmUgcmV0dXJuaW5nLlxuICpcbiAqIEV4YW1wbGU6XG4gKiBgYGBcbiAqIGF3YWl0IHVzaW5nKHJlcyA9IG5ldyBTb21lUmVzb3VyY2UoKSwgYXN5bmMgKHJlcykgPT4gIHtcbiAqICAgICByZXMuZG9fdGhlX3RoaW5nKCk7XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBjYXRlZ29yeSBTeXN0ZW1cbiAqL1xuZnVuY3Rpb24gdXNpbmcocmVzb3VyY2UsIGZ1bmMpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgeWllbGQgZnVuYyhyZXNvdXJjZSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICByZXNvdXJjZS5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5leHBvcnRzLnVzaW5nID0gdXNpbmc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXNvdXJjZV9zYWZldHkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/aws-crt/dist/common/resource_safety.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/aws-crt/dist/index.js":
/*!********************************************!*\
  !*** ./node_modules/aws-crt/dist/index.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CrtError = exports.resource_safety = exports.promise = exports.platform = exports.mqtt5 = exports.mqtt = exports.iot = exports.io = exports.http = exports.eventstream = exports.crt = exports.crypto = exports.checksums = exports.cancel = exports.auth = void 0;\n// This is the entry point for the AWS CRT nodejs native libraries\n/* common libs */\nconst cancel = __importStar(__webpack_require__(/*! ./common/cancel */ \"(ssr)/./node_modules/aws-crt/dist/common/cancel.js\"));\nexports.cancel = cancel;\nconst platform = __importStar(__webpack_require__(/*! ./common/platform */ \"(ssr)/./node_modules/aws-crt/dist/common/platform.js\"));\nexports.platform = platform;\nconst promise = __importStar(__webpack_require__(/*! ./common/promise */ \"(ssr)/./node_modules/aws-crt/dist/common/promise.js\"));\nexports.promise = promise;\nconst resource_safety = __importStar(__webpack_require__(/*! ./common/resource_safety */ \"(ssr)/./node_modules/aws-crt/dist/common/resource_safety.js\"));\nexports.resource_safety = resource_safety;\n/* node specific libs */\nconst auth = __importStar(__webpack_require__(/*! ./native/auth */ \"(ssr)/./node_modules/aws-crt/dist/native/auth.js\"));\nexports.auth = auth;\nconst checksums = __importStar(__webpack_require__(/*! ./native/checksums */ \"(ssr)/./node_modules/aws-crt/dist/native/checksums.js\"));\nexports.checksums = checksums;\nconst crt = __importStar(__webpack_require__(/*! ./native/crt */ \"(ssr)/./node_modules/aws-crt/dist/native/crt.js\"));\nexports.crt = crt;\nconst crypto = __importStar(__webpack_require__(/*! ./native/crypto */ \"(ssr)/./node_modules/aws-crt/dist/native/crypto.js\"));\nexports.crypto = crypto;\nconst eventstream = __importStar(__webpack_require__(/*! ./native/eventstream */ \"(ssr)/./node_modules/aws-crt/dist/native/eventstream.js\"));\nexports.eventstream = eventstream;\nconst http = __importStar(__webpack_require__(/*! ./native/http */ \"(ssr)/./node_modules/aws-crt/dist/native/http.js\"));\nexports.http = http;\nconst io = __importStar(__webpack_require__(/*! ./native/io */ \"(ssr)/./node_modules/aws-crt/dist/native/io.js\"));\nexports.io = io;\nconst iot = __importStar(__webpack_require__(/*! ./native/iot */ \"(ssr)/./node_modules/aws-crt/dist/native/iot.js\"));\nexports.iot = iot;\nconst mqtt = __importStar(__webpack_require__(/*! ./native/mqtt */ \"(ssr)/./node_modules/aws-crt/dist/native/mqtt.js\"));\nexports.mqtt = mqtt;\nconst mqtt5 = __importStar(__webpack_require__(/*! ./native/mqtt5 */ \"(ssr)/./node_modules/aws-crt/dist/native/mqtt5.js\"));\nexports.mqtt5 = mqtt5;\nconst error_1 = __webpack_require__(/*! ./native/error */ \"(ssr)/./node_modules/aws-crt/dist/native/error.js\");\nObject.defineProperty(exports, \"CrtError\", ({ enumerable: true, get: function () { return error_1.CrtError; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXdzLWNydC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLDBDQUEwQyw0QkFBNEI7QUFDdEUsQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdCQUFnQixHQUFHLHVCQUF1QixHQUFHLGVBQWUsR0FBRyxnQkFBZ0IsR0FBRyxhQUFhLEdBQUcsWUFBWSxHQUFHLFdBQVcsR0FBRyxVQUFVLEdBQUcsWUFBWSxHQUFHLG1CQUFtQixHQUFHLFdBQVcsR0FBRyxjQUFjLEdBQUcsaUJBQWlCLEdBQUcsY0FBYyxHQUFHLFlBQVk7QUFDalE7QUFDQTtBQUNBLDRCQUE0QixtQkFBTyxDQUFDLDJFQUFpQjtBQUNyRCxjQUFjO0FBQ2QsOEJBQThCLG1CQUFPLENBQUMsK0VBQW1CO0FBQ3pELGdCQUFnQjtBQUNoQiw2QkFBNkIsbUJBQU8sQ0FBQyw2RUFBa0I7QUFDdkQsZUFBZTtBQUNmLHFDQUFxQyxtQkFBTyxDQUFDLDZGQUEwQjtBQUN2RSx1QkFBdUI7QUFDdkI7QUFDQSwwQkFBMEIsbUJBQU8sQ0FBQyx1RUFBZTtBQUNqRCxZQUFZO0FBQ1osK0JBQStCLG1CQUFPLENBQUMsaUZBQW9CO0FBQzNELGlCQUFpQjtBQUNqQix5QkFBeUIsbUJBQU8sQ0FBQyxxRUFBYztBQUMvQyxXQUFXO0FBQ1gsNEJBQTRCLG1CQUFPLENBQUMsMkVBQWlCO0FBQ3JELGNBQWM7QUFDZCxpQ0FBaUMsbUJBQU8sQ0FBQyxxRkFBc0I7QUFDL0QsbUJBQW1CO0FBQ25CLDBCQUEwQixtQkFBTyxDQUFDLHVFQUFlO0FBQ2pELFlBQVk7QUFDWix3QkFBd0IsbUJBQU8sQ0FBQyxtRUFBYTtBQUM3QyxVQUFVO0FBQ1YseUJBQXlCLG1CQUFPLENBQUMscUVBQWM7QUFDL0MsV0FBVztBQUNYLDBCQUEwQixtQkFBTyxDQUFDLHVFQUFlO0FBQ2pELFlBQVk7QUFDWiwyQkFBMkIsbUJBQU8sQ0FBQyx5RUFBZ0I7QUFDbkQsYUFBYTtBQUNiLGdCQUFnQixtQkFBTyxDQUFDLHlFQUFnQjtBQUN4Qyw0Q0FBMkMsRUFBRSxxQ0FBcUMsNEJBQTRCLEVBQUM7QUFDL0ciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXl3aW5kLy4vbm9kZV9tb2R1bGVzL2F3cy1jcnQvZGlzdC9pbmRleC5qcz9hMzNhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjAuXG4gKi9cbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DcnRFcnJvciA9IGV4cG9ydHMucmVzb3VyY2Vfc2FmZXR5ID0gZXhwb3J0cy5wcm9taXNlID0gZXhwb3J0cy5wbGF0Zm9ybSA9IGV4cG9ydHMubXF0dDUgPSBleHBvcnRzLm1xdHQgPSBleHBvcnRzLmlvdCA9IGV4cG9ydHMuaW8gPSBleHBvcnRzLmh0dHAgPSBleHBvcnRzLmV2ZW50c3RyZWFtID0gZXhwb3J0cy5jcnQgPSBleHBvcnRzLmNyeXB0byA9IGV4cG9ydHMuY2hlY2tzdW1zID0gZXhwb3J0cy5jYW5jZWwgPSBleHBvcnRzLmF1dGggPSB2b2lkIDA7XG4vLyBUaGlzIGlzIHRoZSBlbnRyeSBwb2ludCBmb3IgdGhlIEFXUyBDUlQgbm9kZWpzIG5hdGl2ZSBsaWJyYXJpZXNcbi8qIGNvbW1vbiBsaWJzICovXG5jb25zdCBjYW5jZWwgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vY29tbW9uL2NhbmNlbFwiKSk7XG5leHBvcnRzLmNhbmNlbCA9IGNhbmNlbDtcbmNvbnN0IHBsYXRmb3JtID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbW1vbi9wbGF0Zm9ybVwiKSk7XG5leHBvcnRzLnBsYXRmb3JtID0gcGxhdGZvcm07XG5jb25zdCBwcm9taXNlID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbW1vbi9wcm9taXNlXCIpKTtcbmV4cG9ydHMucHJvbWlzZSA9IHByb21pc2U7XG5jb25zdCByZXNvdXJjZV9zYWZldHkgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vY29tbW9uL3Jlc291cmNlX3NhZmV0eVwiKSk7XG5leHBvcnRzLnJlc291cmNlX3NhZmV0eSA9IHJlc291cmNlX3NhZmV0eTtcbi8qIG5vZGUgc3BlY2lmaWMgbGlicyAqL1xuY29uc3QgYXV0aCA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9uYXRpdmUvYXV0aFwiKSk7XG5leHBvcnRzLmF1dGggPSBhdXRoO1xuY29uc3QgY2hlY2tzdW1zID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL25hdGl2ZS9jaGVja3N1bXNcIikpO1xuZXhwb3J0cy5jaGVja3N1bXMgPSBjaGVja3N1bXM7XG5jb25zdCBjcnQgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vbmF0aXZlL2NydFwiKSk7XG5leHBvcnRzLmNydCA9IGNydDtcbmNvbnN0IGNyeXB0byA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9uYXRpdmUvY3J5cHRvXCIpKTtcbmV4cG9ydHMuY3J5cHRvID0gY3J5cHRvO1xuY29uc3QgZXZlbnRzdHJlYW0gPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vbmF0aXZlL2V2ZW50c3RyZWFtXCIpKTtcbmV4cG9ydHMuZXZlbnRzdHJlYW0gPSBldmVudHN0cmVhbTtcbmNvbnN0IGh0dHAgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vbmF0aXZlL2h0dHBcIikpO1xuZXhwb3J0cy5odHRwID0gaHR0cDtcbmNvbnN0IGlvID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL25hdGl2ZS9pb1wiKSk7XG5leHBvcnRzLmlvID0gaW87XG5jb25zdCBpb3QgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vbmF0aXZlL2lvdFwiKSk7XG5leHBvcnRzLmlvdCA9IGlvdDtcbmNvbnN0IG1xdHQgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vbmF0aXZlL21xdHRcIikpO1xuZXhwb3J0cy5tcXR0ID0gbXF0dDtcbmNvbnN0IG1xdHQ1ID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL25hdGl2ZS9tcXR0NVwiKSk7XG5leHBvcnRzLm1xdHQ1ID0gbXF0dDU7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4vbmF0aXZlL2Vycm9yXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ3J0RXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVycm9yXzEuQ3J0RXJyb3I7IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/aws-crt/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/aws-crt/dist/native/auth.js":
/*!**************************************************!*\
  !*** ./node_modules/aws-crt/dist/native/auth.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.aws_verify_sigv4a_signing = exports.aws_sign_request = exports.AwsSignedBodyHeaderType = exports.AwsSignedBodyValue = exports.AwsSignatureType = exports.AwsSigningAlgorithm = exports.AwsCredentialsProvider = void 0;\nconst binding_1 = __importDefault(__webpack_require__(/*! ./binding */ \"(ssr)/./node_modules/aws-crt/dist/native/binding.js\"));\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/aws-crt/dist/native/error.js\");\nconst io_1 = __webpack_require__(/*! ./io */ \"(ssr)/./node_modules/aws-crt/dist/native/io.js\");\n/**\n * Credentials providers source the AwsCredentials needed to sign an authenticated AWS request.\n *\n * We don't currently expose an interface for fetching credentials from Javascript.\n *\n * @category Auth\n */\n/* Subclass for the purpose of exposing a non-NativeHandle based API */\nclass AwsCredentialsProvider extends binding_1.default.AwsCredentialsProvider {\n    /**\n     * Creates a new default credentials provider to be used internally for AWS credentials resolution:\n     *\n     *   The CRT's default provider chain currently sources in this order:\n     *\n     *     1. Environment\n     *     2. Profile\n     *     3. (conditional, off by default) ECS\n     *     4. (conditional, on by default) EC2 Instance Metadata\n     *\n     * @param bootstrap (optional) client bootstrap to be used to establish any required network connections\n     *\n     * @returns a new credentials provider using default credentials resolution rules\n     */\n    static newDefault(bootstrap = undefined) {\n        return super.newDefault(bootstrap != null ? bootstrap.native_handle() : null);\n    }\n    /**\n     * Creates a new credentials provider that returns a fixed set of credentials.\n     *\n     * @param access_key access key to use in the static credentials\n     * @param secret_key secret key to use in the static credentials\n     * @param session_token (optional) session token to use in the static credentials\n     *\n     * @returns a new credentials provider that will return a fixed set of AWS credentials\n     */\n    static newStatic(access_key, secret_key, session_token) {\n        return super.newStatic(access_key, secret_key, session_token);\n    }\n    /**\n     * Creates a new credentials provider that sources credentials from the AWS Cognito Identity service via the\n     * GetCredentialsForIdentity http API.\n     *\n     * @param config provider configuration necessary to make GetCredentialsForIdentity web requests\n     *\n     * @returns a new credentials provider that returns credentials sourced from the AWS Cognito Identity service\n     */\n    static newCognito(config) {\n        if (config == null || config == undefined) {\n            throw new error_1.CrtError(\"AwsCredentialsProvider newCognito: Cognito config not defined\");\n        }\n        return super.newCognito(config, config.tlsContext != null ? config.tlsContext.native_handle() : new io_1.ClientTlsContext().native_handle(), config.bootstrap != null ? config.bootstrap.native_handle() : null, config.httpProxyOptions ? config.httpProxyOptions.create_native_handle() : null);\n    }\n    /**\n     * Creates a new credentials provider that sources credentials from the the X509 service on AWS IoT Core.\n     *\n     * @param config provider configuration necessary to source credentials via X509\n     *\n     * @returns a new credentials provider that returns credentials sourced from the AWS X509 service\n     */\n    static newX509(config) {\n        if (config == null || config == undefined) {\n            throw new error_1.CrtError(\"AwsCredentialsProvider newX509: X509 config not defined\");\n        }\n        return super.newX509(config, config.tlsContext.native_handle(), config.httpProxyOptions ? config.httpProxyOptions.create_native_handle() : null);\n    }\n}\nexports.AwsCredentialsProvider = AwsCredentialsProvider;\n/**\n * AWS signing algorithm enumeration.\n *\n * @category Auth\n */\nvar AwsSigningAlgorithm;\n(function (AwsSigningAlgorithm) {\n    /** Use the Aws signature version 4 signing process to sign the request */\n    AwsSigningAlgorithm[AwsSigningAlgorithm[\"SigV4\"] = 0] = \"SigV4\";\n    /** Use the Aws signature version 4 Asymmetric signing process to sign the request */\n    AwsSigningAlgorithm[AwsSigningAlgorithm[\"SigV4Asymmetric\"] = 1] = \"SigV4Asymmetric\";\n})(AwsSigningAlgorithm = exports.AwsSigningAlgorithm || (exports.AwsSigningAlgorithm = {}));\n/**\n * AWS signature type enumeration.\n *\n * @category Auth\n */\nvar AwsSignatureType;\n(function (AwsSignatureType) {\n    /** Sign an http request and apply the signing results as headers */\n    AwsSignatureType[AwsSignatureType[\"HttpRequestViaHeaders\"] = 0] = \"HttpRequestViaHeaders\";\n    /** Sign an http request and apply the signing results as query params */\n    AwsSignatureType[AwsSignatureType[\"HttpRequestViaQueryParams\"] = 1] = \"HttpRequestViaQueryParams\";\n    /** Sign an http request payload chunk */\n    AwsSignatureType[AwsSignatureType[\"HttpRequestChunk\"] = 2] = \"HttpRequestChunk\";\n    /** Sign an event stream event */\n    AwsSignatureType[AwsSignatureType[\"HttpRequestEvent\"] = 3] = \"HttpRequestEvent\";\n})(AwsSignatureType = exports.AwsSignatureType || (exports.AwsSignatureType = {}));\n/**\n * Values for use with {@link AwsSigningConfig.signed_body_value}.\n *\n * Some services use special values (e.g. 'UNSIGNED-PAYLOAD') when the body\n * is not being signed in the usual way.\n *\n * @category Auth\n */\nvar AwsSignedBodyValue;\n(function (AwsSignedBodyValue) {\n    /** Use the SHA-256 of the empty string as the canonical request payload value */\n    AwsSignedBodyValue[\"EmptySha256\"] = \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\";\n    /** Use the literal string 'UNSIGNED-PAYLOAD' as the canonical request payload value  */\n    AwsSignedBodyValue[\"UnsignedPayload\"] = \"UNSIGNED-PAYLOAD\";\n    /** Use the literal string 'STREAMING-AWS4-HMAC-SHA256-PAYLOAD' as the canonical request payload value  */\n    AwsSignedBodyValue[\"StreamingAws4HmacSha256Payload\"] = \"STREAMING-AWS4-HMAC-SHA256-PAYLOAD\";\n    /** Use the literal string 'STREAMING-AWS4-HMAC-SHA256-EVENTS' as the canonical request payload value  */\n    AwsSignedBodyValue[\"StreamingAws4HmacSha256Events\"] = \"STREAMING-AWS4-HMAC-SHA256-EVENTS\";\n})(AwsSignedBodyValue = exports.AwsSignedBodyValue || (exports.AwsSignedBodyValue = {}));\n/**\n * AWS signed body header enumeration.\n *\n * @category Auth\n */\nvar AwsSignedBodyHeaderType;\n(function (AwsSignedBodyHeaderType) {\n    /** Do not add a header containing the canonical request payload value */\n    AwsSignedBodyHeaderType[AwsSignedBodyHeaderType[\"None\"] = 0] = \"None\";\n    /** Add the X-Amz-Content-Sha256 header with the canonical request payload value */\n    AwsSignedBodyHeaderType[AwsSignedBodyHeaderType[\"XAmzContentSha256\"] = 1] = \"XAmzContentSha256\";\n})(AwsSignedBodyHeaderType = exports.AwsSignedBodyHeaderType || (exports.AwsSignedBodyHeaderType = {}));\n/**\n * Perform AWS HTTP request signing.\n *\n * The {@link HttpRequest} is transformed asynchronously,\n * according to the {@link AwsSigningConfig}.\n *\n * When signing:\n *  1.  It is good practice to use a new config for each signature,\n *      or the date might get too old.\n *\n *  2.  Do not add the following headers to requests before signing, they may be added by the signer:\n *      x-amz-content-sha256,\n *      X-Amz-Date,\n *      Authorization\n *\n *  3.  Do not add the following query params to requests before signing, they may be added by the signer:\n *      X-Amz-Signature,\n *      X-Amz-Date,\n *      X-Amz-Credential,\n *      X-Amz-Algorithm,\n *      X-Amz-SignedHeaders\n * @param request The HTTP request to sign.\n * @param config Configuration for signing.\n * @returns A promise whose result will be the signed\n *       {@link HttpRequest}. The future will contain an exception\n *       if the signing process fails.\n *\n * @category Auth\n */\nfunction aws_sign_request(request, config) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise((resolve, reject) => {\n            try {\n                /* Note: if the body of request has not fully loaded, it will lead to an endless loop.\n                 * User should set the signed_body_value of config to prevent this endless loop in this case */\n                binding_1.default.aws_sign_request(request, config, (error_code) => {\n                    if (error_code == 0) {\n                        resolve(request);\n                    }\n                    else {\n                        reject(new error_1.CrtError(error_code));\n                    }\n                });\n            }\n            catch (error) {\n                reject(error);\n            }\n        });\n    });\n}\nexports.aws_sign_request = aws_sign_request;\n/**\n *\n * @internal\n *\n * Test only.\n * Verifies:\n *  (1) The canonical request generated during sigv4a signing of the request matches what is passed in\n *  (2) The signature passed in is a valid ECDSA signature of the hashed string-to-sign derived from the\n *  canonical request\n *\n * @param request The HTTP request to sign.\n * @param config Configuration for signing.\n * @param expected_canonical_request String type of expected canonical request. Refer to XXX(link to doc?)\n * @param signature The generated signature string from {@link aws_sign_request}, which is verified here.\n * @param ecc_key_pub_x the x coordinate of the public part of the ecc key to verify the signature.\n * @param ecc_key_pub_y the y coordinate of the public part of the ecc key to verify the signature\n * @returns True, if the verification succeed. Otherwise, false.\n */\nfunction aws_verify_sigv4a_signing(request, config, expected_canonical_request, signature, ecc_key_pub_x, ecc_key_pub_y) {\n    return binding_1.default.aws_verify_sigv4a_signing(request, config, expected_canonical_request, signature, ecc_key_pub_x, ecc_key_pub_y);\n}\nexports.aws_verify_sigv4a_signing = aws_verify_sigv4a_signing;\n//# sourceMappingURL=auth.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/aws-crt/dist/native/auth.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/aws-crt/dist/native/aws_iot.js":
/*!*****************************************************!*\
  !*** ./node_modules/aws-crt/dist/native/aws_iot.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AwsIotMqttConnectionConfigBuilder = void 0;\nconst mqtt_1 = __webpack_require__(/*! ../common/mqtt */ \"(ssr)/./node_modules/aws-crt/dist/common/mqtt.js\");\nconst io = __importStar(__webpack_require__(/*! ./io */ \"(ssr)/./node_modules/aws-crt/dist/native/io.js\"));\nconst io_1 = __webpack_require__(/*! ./io */ \"(ssr)/./node_modules/aws-crt/dist/native/io.js\");\nconst platform = __importStar(__webpack_require__(/*! ../common/platform */ \"(ssr)/./node_modules/aws-crt/dist/common/platform.js\"));\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/aws-crt/dist/native/error.js\");\nconst auth_1 = __webpack_require__(/*! ./auth */ \"(ssr)/./node_modules/aws-crt/dist/native/auth.js\");\nconst iot_shared = __importStar(__webpack_require__(/*! ../common/aws_iot_shared */ \"(ssr)/./node_modules/aws-crt/dist/common/aws_iot_shared.js\"));\n/**\n * Builder functions to create a {@link MqttConnectionConfig} which can then be used to create\n * a {@link MqttClientConnection}, configured for use with AWS IoT.\n *\n * @category IoT\n */\nclass AwsIotMqttConnectionConfigBuilder {\n    constructor(tls_ctx_options) {\n        this.tls_ctx_options = tls_ctx_options;\n        this.params = {\n            client_id: '',\n            host_name: '',\n            socket_options: new io.SocketOptions(),\n            port: 8883,\n            use_websocket: false,\n            clean_session: false,\n            keep_alive: undefined,\n            will: undefined,\n            username: \"\",\n            password: undefined,\n            tls_ctx: undefined,\n            reconnect_min_sec: mqtt_1.DEFAULT_RECONNECT_MIN_SEC,\n            reconnect_max_sec: mqtt_1.DEFAULT_RECONNECT_MAX_SEC\n        };\n        this.is_using_custom_authorizer = false;\n    }\n    /**\n     * Create a new builder with mTLS file paths\n     * @param cert_path - Path to certificate, in PEM format\n     * @param key_path - Path to private key, in PEM format\n     */\n    static new_mtls_builder_from_path(cert_path, key_path) {\n        let builder = new AwsIotMqttConnectionConfigBuilder(io_1.TlsContextOptions.create_client_with_mtls_from_path(cert_path, key_path));\n        builder.params.port = 8883;\n        if (io.is_alpn_available()) {\n            builder.tls_ctx_options.alpn_list.unshift('x-amzn-mqtt-ca');\n        }\n        return builder;\n    }\n    /**\n     * Create a new builder with mTLS cert pair in memory\n     * @param cert - Certificate, in PEM format\n     * @param private_key - Private key, in PEM format\n     */\n    static new_mtls_builder(cert, private_key) {\n        let builder = new AwsIotMqttConnectionConfigBuilder(io_1.TlsContextOptions.create_client_with_mtls(cert, private_key));\n        builder.params.port = 8883;\n        if (io.is_alpn_available()) {\n            builder.tls_ctx_options.alpn_list.unshift('x-amzn-mqtt-ca');\n        }\n        return builder;\n    }\n    /**\n     * Create a new builder with mTLS using a PKCS#11 library for private key operations.\n     *\n     * NOTE: This configuration only works on Unix devices.\n     * @param pkcs11_options - PKCS#11 options.\n     */\n    static new_mtls_pkcs11_builder(pkcs11_options) {\n        let builder = new AwsIotMqttConnectionConfigBuilder(io_1.TlsContextOptions.create_client_with_mtls_pkcs11(pkcs11_options));\n        builder.params.port = 8883;\n        if (io.is_alpn_available()) {\n            builder.tls_ctx_options.alpn_list.unshift('x-amzn-mqtt-ca');\n        }\n        return builder;\n    }\n    /**\n     * Create a new builder with mTLS using a PKCS#12 file for private key operations.\n     *\n     * Note: This configuration only works on MacOS devices.\n     *\n     * @param pkcs12_options - The PKCS#12 options to use in the builder.\n     */\n    static new_mtls_pkcs12_builder(pkcs12_options) {\n        let builder = new AwsIotMqttConnectionConfigBuilder(io_1.TlsContextOptions.create_client_with_mtls_pkcs12_from_path(pkcs12_options.pkcs12_file, pkcs12_options.pkcs12_password));\n        builder.params.port = 8883;\n        if (io.is_alpn_available()) {\n            builder.tls_ctx_options.alpn_list.unshift('x-amzn-mqtt-ca');\n        }\n        return builder;\n    }\n    /**\n     * Create a new builder with mTLS using a certificate in a Windows certificate store.\n     *\n     * NOTE: This configuration only works on Windows devices.\n     * @param certificate_path - Path to certificate in a Windows certificate store.\n     *      The path must use backslashes and end with the certificate's thumbprint.\n     *      Example: `CurrentUser\\MY\\A11F8A9B5DF5B98BA3508FBCA575D09570E0D2C6`\n     */\n    static new_mtls_windows_cert_store_path_builder(certificate_path) {\n        let builder = new AwsIotMqttConnectionConfigBuilder(io_1.TlsContextOptions.create_client_with_mtls_windows_cert_store_path(certificate_path));\n        builder.params.port = 8883;\n        if (io.is_alpn_available()) {\n            builder.tls_ctx_options.alpn_list.unshift('x-amzn-mqtt-ca');\n        }\n        return builder;\n    }\n    /**\n     * Creates a new builder with default Tls options. This requires setting the connection details manually.\n     */\n    static new_default_builder() {\n        let ctx_options = new io.TlsContextOptions();\n        let builder = new AwsIotMqttConnectionConfigBuilder(ctx_options);\n        return builder;\n    }\n    static new_websocket_builder(...args) {\n        return this.new_with_websockets(...args);\n    }\n    static configure_websocket_handshake(builder, options) {\n        if (options) {\n            if (builder == null || builder == undefined) {\n                throw new error_1.CrtError(\"AwsIotMqttConnectionConfigBuilder configure_websocket_handshake: builder not defined\");\n            }\n            builder.params.websocket_handshake_transform = (request, done) => __awaiter(this, void 0, void 0, function* () {\n                var _a, _b, _c;\n                const signing_config = (_b = (_a = options.create_signing_config) === null || _a === void 0 ? void 0 : _a.call(options)) !== null && _b !== void 0 ? _b : {\n                    algorithm: auth_1.AwsSigningAlgorithm.SigV4,\n                    signature_type: auth_1.AwsSignatureType.HttpRequestViaQueryParams,\n                    provider: options.credentials_provider,\n                    region: options.region,\n                    service: (_c = options.service) !== null && _c !== void 0 ? _c : \"iotdevicegateway\",\n                    signed_body_value: auth_1.AwsSignedBodyValue.EmptySha256,\n                    omit_session_token: true,\n                };\n                try {\n                    yield (0, auth_1.aws_sign_request)(request, signing_config);\n                    done();\n                }\n                catch (error) {\n                    if (error instanceof error_1.CrtError) {\n                        done(error.error_code);\n                    }\n                    else {\n                        done(3); /* TODO: AWS_ERROR_UNKNOWN */\n                    }\n                }\n            });\n        }\n        return builder;\n    }\n    /**\n     * Configures the connection to use MQTT over websockets. Forces the port to 443.\n     */\n    static new_with_websockets(options) {\n        let tls_ctx_options = options === null || options === void 0 ? void 0 : options.tls_ctx_options;\n        if (!tls_ctx_options) {\n            tls_ctx_options = new io_1.TlsContextOptions();\n            tls_ctx_options.alpn_list = [];\n        }\n        let builder = new AwsIotMqttConnectionConfigBuilder(tls_ctx_options);\n        builder.params.use_websocket = true;\n        builder.params.proxy_options = options === null || options === void 0 ? void 0 : options.proxy_options;\n        if (builder.tls_ctx_options) {\n            builder.params.port = 443;\n        }\n        this.configure_websocket_handshake(builder, options);\n        return builder;\n    }\n    /**\n     * For API compatibility with the browser version. Alias for {@link new_with_websockets}.\n     *\n     * @returns a new websocket connection builder object with default TLS configuration\n     */\n    static new_builder_for_websocket() {\n        return this.new_with_websockets();\n    }\n    /**\n     * Overrides the default system trust store.\n     * @param ca_dirpath - Only used on Unix-style systems where all trust anchors are\n     * stored in a directory (e.g. /etc/ssl/certs).\n     * @param ca_filepath - Single file containing all trust CAs, in PEM format\n     */\n    with_certificate_authority_from_path(ca_dirpath, ca_filepath) {\n        this.tls_ctx_options.override_default_trust_store_from_path(ca_dirpath, ca_filepath);\n        return this;\n    }\n    /**\n     * Overrides the default system trust store.\n     * @param ca - Buffer containing all trust CAs, in PEM format\n     */\n    with_certificate_authority(ca) {\n        this.tls_ctx_options.override_default_trust_store(ca);\n        return this;\n    }\n    /**\n     * Configures the IoT endpoint for this connection\n     * @param endpoint The IoT endpoint to connect to\n     */\n    with_endpoint(endpoint) {\n        this.params.host_name = endpoint;\n        return this;\n    }\n    /**\n     * The port to connect to on the IoT endpoint\n     * @param port The port to connect to on the IoT endpoint. Usually 8883 for MQTT, or 443 for websockets\n     */\n    with_port(port) {\n        this.params.port = port;\n        return this;\n    }\n    /**\n     * Configures the client_id to use to connect to the IoT Core service\n     * @param client_id The client id for this connection. Needs to be unique across all devices/clients.\n     */\n    with_client_id(client_id) {\n        this.params.client_id = client_id;\n        return this;\n    }\n    /**\n     * Determines whether or not the service should try to resume prior subscriptions, if it has any\n     * @param clean_session true if the session should drop prior subscriptions when this client connects, false to resume the session\n     */\n    with_clean_session(clean_session) {\n        this.params.clean_session = clean_session;\n        return this;\n    }\n    /**\n     * Configures MQTT keep-alive via PING messages. Note that this is not TCP keepalive.\n     * @param keep_alive How often in seconds to send an MQTT PING message to the service to keep the connection alive\n     */\n    with_keep_alive_seconds(keep_alive) {\n        this.params.keep_alive = keep_alive;\n        return this;\n    }\n    /**\n     * Configures the TCP socket timeout (in milliseconds)\n     * @param timeout_ms TCP socket timeout\n     * @deprecated\n     */\n    with_timeout_ms(timeout_ms) {\n        this.with_ping_timeout_ms(timeout_ms);\n        return this;\n    }\n    /**\n     * Configures the PINGREQ response timeout (in milliseconds)\n     * @param ping_timeout PINGREQ response timeout\n     */\n    with_ping_timeout_ms(ping_timeout) {\n        this.params.ping_timeout = ping_timeout;\n        return this;\n    }\n    /**\n     * Configures the protocol operation timeout (in milliseconds)\n     * @param protocol_operation_timeout protocol operation timeout\n     */\n    with_protocol_operation_timeout_ms(protocol_operation_timeout) {\n        this.params.protocol_operation_timeout = protocol_operation_timeout;\n        return this;\n    }\n    /**\n     * Configures the will message to be sent when this client disconnects\n     * @param will The will topic, qos, and message\n     */\n    with_will(will) {\n        this.params.will = will;\n        return this;\n    }\n    /**\n     * Configures the common settings for the socket to use when opening a connection to the server\n     * @param socket_options The socket settings\n     */\n    with_socket_options(socket_options) {\n        this.params.socket_options = socket_options;\n        return this;\n    }\n    /**\n     * Configures AWS credentials (usually from Cognito) for this connection\n     * @param aws_region The service region to connect to\n     * @param aws_access_id IAM Access ID\n     * @param aws_secret_key IAM Secret Key\n     * @param aws_sts_token STS token from Cognito (optional)\n     */\n    with_credentials(aws_region, aws_access_id, aws_secret_key, aws_sts_token) {\n        return AwsIotMqttConnectionConfigBuilder.configure_websocket_handshake(this, {\n            credentials_provider: auth_1.AwsCredentialsProvider.newStatic(aws_access_id, aws_secret_key, aws_sts_token),\n            region: aws_region,\n            service: \"iotdevicegateway\",\n        });\n    }\n    /**\n     * Configure the http proxy options to use to establish the connection\n     * @param proxy_options proxy options to use to establish the mqtt connection\n     */\n    with_http_proxy_options(proxy_options) {\n        this.params.proxy_options = proxy_options;\n        return this;\n    }\n    /**\n     * Sets the custom authorizer settings. This function will modify the username, port, and TLS options.\n     *\n     * @param username The username to use with the custom authorizer. If an empty string is passed, it will\n     *                 check to see if a username has already been set (via WithUsername function). If no\n     *                 username is set then no username will be passed with the MQTT connection.\n     * @param authorizer_name The name of the custom authorizer. If an empty string is passed, then\n     *                       'x-amz-customauthorizer-name' will not be added with the MQTT connection.\n     * @param authorizer_signature The signature of the custom authorizer. If an empty string is passed, then\n     *                            'x-amz-customauthorizer-signature' will not be added with the MQTT connection.\n     *                            The signature must be based on the private key associated with the custom authorizer.\n     *                            The signature must be base64 encoded.\n     *                            Required if the custom authorizer has signing enabled.  It is strongly suggested to URL-encode\n     *                            this value; the SDK will not do so for you.\n     * @param password The password to use with the custom authorizer. If null is passed, then no password will\n     *                 be set.\n     * @param token_key_name Key used to extract the custom authorizer token from MQTT username query-string properties.\n     *                       Required if the custom authorizer has signing enabled.  It is strongly suggested to URL-encode\n     *                       this value; the SDK will not do so for you.\n     * @param token_value An opaque token value.\n     *                    Required if the custom authorizer has signing enabled. This value must be signed by the private\n     *                    key associated with the custom authorizer and the result placed in the token_signature argument.\n     */\n    with_custom_authorizer(username, authorizer_name, authorizer_signature, password, token_key_name, token_value) {\n        this.is_using_custom_authorizer = true;\n        let username_string = iot_shared.populate_username_string_with_custom_authorizer(\"\", username, authorizer_name, authorizer_signature, this.params.username, token_key_name, token_value);\n        this.params.username = username_string;\n        this.params.password = password;\n        if (!this.params.use_websocket) {\n            this.tls_ctx_options.alpn_list = [\"mqtt\"];\n        }\n        this.params.port = 443;\n        return this;\n    }\n    /**\n     * Sets username for the connection\n     *\n     * @param username the username that will be passed with the MQTT connection\n     */\n    with_username(username) {\n        this.params.username = username;\n        return this;\n    }\n    /**\n     * Sets password for the connection\n     *\n     * @param password the password that will be passed with the MQTT connection\n     */\n    with_password(password) {\n        this.params.password = password;\n        return this;\n    }\n    /**\n     * Configure the max reconnection period (in second). The reonnection period will\n     * be set in range of [reconnect_min_sec,reconnect_max_sec].\n     * @param reconnect_max_sec max reconnection period\n     */\n    with_reconnect_max_sec(max_sec) {\n        this.params.reconnect_max_sec = max_sec;\n        return this;\n    }\n    /**\n     * Configure the min reconnection period (in second). The reonnection period will\n     * be set in range of [reconnect_min_sec,reconnect_max_sec].\n     * @param reconnect_min_sec min reconnection period\n     */\n    with_reconnect_min_sec(min_sec) {\n        this.params.reconnect_min_sec = min_sec;\n        return this;\n    }\n    /**\n     * Returns the configured MqttConnectionConfig.  On the first invocation of this function, the TLS context is cached\n     * and re-used on all subsequent calls to build().\n     * @returns The configured MqttConnectionConfig\n     */\n    build() {\n        var _a, _b, _c;\n        if (this.params.client_id === undefined || this.params.host_name === undefined) {\n            throw 'client_id and endpoint are required';\n        }\n        // Check to see if a custom authorizer is being used but not through the builder\n        if (this.is_using_custom_authorizer == false) {\n            if (iot_shared.is_string_and_not_empty(this.params.username)) {\n                if (((_a = this.params.username) === null || _a === void 0 ? void 0 : _a.indexOf(\"x-amz-customauthorizer-name=\")) != -1 || ((_b = this.params.username) === null || _b === void 0 ? void 0 : _b.indexOf(\"x-amz-customauthorizer-signature=\")) != -1) {\n                    this.is_using_custom_authorizer = true;\n                }\n            }\n        }\n        // Is the user trying to connect using a custom authorizer?\n        if (this.is_using_custom_authorizer == true) {\n            if (this.params.port != 443) {\n                console.log(\"Warning: Attempting to connect to authorizer with unsupported port. Port is not 443...\");\n            }\n        }\n        /*\n         * By caching and reusing the TLS context we get an enormous memory savings on a per-connection basis.\n         * The tradeoff is that you can't modify TLS options in between calls to build.\n         * Previously we were making a new one with every single connection which had a huge negative impact on large\n         * scale tests.\n         */\n        if (this.params.tls_ctx === undefined) {\n            this.params.tls_ctx = new io.ClientTlsContext(this.tls_ctx_options);\n        }\n        // Add the metrics string\n        if (iot_shared.is_string_and_not_empty(this.params.username) == false) {\n            this.params.username = \"?SDK=NodeJSv2&Version=\";\n        }\n        else {\n            if (((_c = this.params.username) === null || _c === void 0 ? void 0 : _c.indexOf(\"?\")) != -1) {\n                this.params.username += \"&SDK=NodeJSv2&Version=\";\n            }\n            else {\n                this.params.username += \"?SDK=NodeJSv2&Version=\";\n            }\n        }\n        this.params.username += platform.crt_version();\n        return this.params;\n    }\n}\nexports.AwsIotMqttConnectionConfigBuilder = AwsIotMqttConnectionConfigBuilder;\n//# sourceMappingURL=aws_iot.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/aws-crt/dist/native/aws_iot.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/aws-crt/dist/native/aws_iot_mqtt5.js":
/*!***********************************************************!*\
  !*** ./node_modules/aws-crt/dist/native/aws_iot_mqtt5.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AwsIotMqtt5ClientConfigBuilder = void 0;\n/**\n * Module for the configuration of MQTT5 clients to connect to AWS IoT\n *\n * @packageDocumentation\n */\nconst mqtt5 = __importStar(__webpack_require__(/*! ./mqtt5 */ \"(ssr)/./node_modules/aws-crt/dist/native/mqtt5.js\"));\nconst io = __importStar(__webpack_require__(/*! ./io */ \"(ssr)/./node_modules/aws-crt/dist/native/io.js\"));\nconst auth = __importStar(__webpack_require__(/*! ./auth */ \"(ssr)/./node_modules/aws-crt/dist/native/auth.js\"));\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/aws-crt/dist/native/error.js\");\nconst iot_shared = __importStar(__webpack_require__(/*! ../common/aws_iot_shared */ \"(ssr)/./node_modules/aws-crt/dist/common/aws_iot_shared.js\"));\nconst mqtt_shared = __importStar(__webpack_require__(/*! ../common/mqtt_shared */ \"(ssr)/./node_modules/aws-crt/dist/common/mqtt_shared.js\"));\n/**\n * Builder pattern class to create an {@link Mqtt5ClientConfig} which can then be used to create\n * an {@link Mqtt5Client}, configured for use with AWS IoT.\n *\n * DEVELOPER PREVIEW DISCLAIMER\n *\n * MQTT5 support is currently in **developer preview**.  We encourage feedback at all times, but feedback during the\n * preview window is especially valuable in shaping the final product.  During the preview period we may make\n * backwards-incompatible changes to the public API, but in general, this is something we will try our best to avoid.\n *\n * [MQTT5 Client User Guide](https://www.github.com/awslabs/aws-crt-nodejs/blob/main/MQTT5-UserGuide.md)\n *\n * @category IoT\n */\nclass AwsIotMqtt5ClientConfigBuilder {\n    constructor(hostName, port, tlsContextOptions) {\n        this.tlsContextOptions = tlsContextOptions;\n        this.config = {\n            hostName: hostName,\n            port: port,\n            connectProperties: {\n                keepAliveIntervalSeconds: mqtt_shared.DEFAULT_KEEP_ALIVE\n            },\n            extendedValidationAndFlowControlOptions: mqtt5.ClientExtendedValidationAndFlowControl.AwsIotCoreDefaults\n        };\n    }\n    /* Builders for different connection methods to AWS IoT Core */\n    /**\n     * Create a new MQTT5 client builder that will create MQTT5 clients that connect to AWS IoT Core via mutual TLS\n     * using X509 certificate and key at the supplied file paths.\n     *\n     * @param hostName - AWS IoT endpoint to connect to\n     * @param certPath - Path to certificate, in PEM format\n     * @param keyPath - Path to private key, in PEM format\n     */\n    static newDirectMqttBuilderWithMtlsFromPath(hostName, certPath, keyPath) {\n        let builder = new AwsIotMqtt5ClientConfigBuilder(hostName, AwsIotMqtt5ClientConfigBuilder.DEFAULT_DIRECT_MQTT_PORT, io.TlsContextOptions.create_client_with_mtls_from_path(certPath, keyPath));\n        if (io.is_alpn_available()) {\n            builder.tlsContextOptions.alpn_list.unshift('x-amzn-mqtt-ca');\n        }\n        return builder;\n    }\n    /**\n     * Create a new MQTT5 client builder that will create MQTT5 clients that connect to AWS IoT Core via mutual TLS\n     * using in-memory X509 certificate and key.\n     *\n     * @param hostName - AWS IoT endpoint to connect to\n     * @param cert - Certificate, in PEM format\n     * @param privateKey - Private key, in PEM format\n     */\n    static newDirectMqttBuilderWithMtlsFromMemory(hostName, cert, privateKey) {\n        let builder = new AwsIotMqtt5ClientConfigBuilder(hostName, AwsIotMqtt5ClientConfigBuilder.DEFAULT_DIRECT_MQTT_PORT, io.TlsContextOptions.create_client_with_mtls(cert, privateKey));\n        if (io.is_alpn_available()) {\n            builder.tlsContextOptions.alpn_list.unshift('x-amzn-mqtt-ca');\n        }\n        return builder;\n    }\n    /**\n     * Create a new MQTT5 client builder that will create MQTT5 clients that connect to AWS IoT Core via mutual TLS\n     * using a PKCS11 library for certificate and private key operations.\n     *\n     * NOTE: This configuration only works on Unix devices.\n     *\n     * @param hostName - AWS IoT endpoint to connect to\n     * @param pkcs11Options - PKCS#11 options.\n     */\n    static newDirectMqttBuilderWithMtlsFromPkcs11(hostName, pkcs11Options) {\n        let builder = new AwsIotMqtt5ClientConfigBuilder(hostName, AwsIotMqtt5ClientConfigBuilder.DEFAULT_DIRECT_MQTT_PORT, io.TlsContextOptions.create_client_with_mtls_pkcs11(pkcs11Options));\n        if (io.is_alpn_available()) {\n            builder.tlsContextOptions.alpn_list.unshift('x-amzn-mqtt-ca');\n        }\n        return builder;\n    }\n    /**\n     * Create a new MQTT5 client builder that will create MQTT5 clients that connect to AWS IoT Core via mutual TLS\n     * using a PKCS12 file.\n     *\n     * Note: This configuration only works on MacOS devices.\n     *\n     * @param hostName - AWS IoT endpoint to connect to\n     * @param pkcs12_options - The PKCS#12 options to use in the builder.\n     */\n    static newDirectMqttBuilderWithMtlsFromPkcs12(hostName, pkcs12_options) {\n        let builder = new AwsIotMqtt5ClientConfigBuilder(hostName, AwsIotMqtt5ClientConfigBuilder.DEFAULT_DIRECT_MQTT_PORT, io.TlsContextOptions.create_client_with_mtls_pkcs12_from_path(pkcs12_options.pkcs12_file, pkcs12_options.pkcs12_password));\n        if (io.is_alpn_available()) {\n            builder.tlsContextOptions.alpn_list.unshift('x-amzn-mqtt-ca');\n        }\n        return builder;\n    }\n    /**\n     * Create a new MQTT5 client builder that will create MQTT5 clients that connect to AWS IoT Core via mutual TLS\n     * using a certificate entry in a Windows certificate store.\n     *\n     * NOTE: This configuration only works on Windows devices.\n     *\n     * @param hostName - AWS IoT endpoint to connect to\n     * @param certificatePath - Path to certificate in a Windows certificate store.\n     *      The path must use backslashes and end with the certificate's thumbprint.\n     *      Example: `CurrentUser\\MY\\A11F8A9B5DF5B98BA3508FBCA575D09570E0D2C6`\n     */\n    static newDirectMqttBuilderWithMtlsFromWindowsCertStorePath(hostName, certificatePath) {\n        let builder = new AwsIotMqtt5ClientConfigBuilder(hostName, AwsIotMqtt5ClientConfigBuilder.DEFAULT_DIRECT_MQTT_PORT, io.TlsContextOptions.create_client_with_mtls_windows_cert_store_path(certificatePath));\n        if (io.is_alpn_available()) {\n            builder.tlsContextOptions.alpn_list.unshift('x-amzn-mqtt-ca');\n        }\n        return builder;\n    }\n    /**\n     * Create a new MQTT5 client builder that will create MQTT5 clients that connect to AWS IoT Core via TLS,\n     * authenticating via a custom authenticator.\n     *\n     * @param hostName - AWS IoT endpoint to connect to\n     * @param customAuthConfig - AWS IoT custom auth configuration\n     */\n    static newDirectMqttBuilderWithCustomAuth(hostName, customAuthConfig) {\n        let builder = new AwsIotMqtt5ClientConfigBuilder(hostName, AwsIotMqtt5ClientConfigBuilder.DEFAULT_WEBSOCKET_MQTT_PORT, new io.TlsContextOptions());\n        builder.customAuthConfig = customAuthConfig;\n        builder.tlsContextOptions.alpn_list = [\"mqtt\"];\n        return builder;\n    }\n    /**\n     * Create a new MQTT5 client builder that will create MQTT5 clients that connect to AWS IoT Core via websockets,\n     * using AWS Sigv4 signing to establish authenticate.\n     *\n     * @param hostName - AWS IoT endpoint to connect to\n     * @param options - additional sigv4-oriented options to use\n     */\n    static newWebsocketMqttBuilderWithSigv4Auth(hostName, options) {\n        let tlsContextOptions = new io.TlsContextOptions();\n        tlsContextOptions.alpn_list = [];\n        let builder = new AwsIotMqtt5ClientConfigBuilder(hostName, AwsIotMqtt5ClientConfigBuilder.DEFAULT_WEBSOCKET_MQTT_PORT, tlsContextOptions);\n        let credentialsProvider = options === null || options === void 0 ? void 0 : options.credentialsProvider;\n        if (!credentialsProvider) {\n            credentialsProvider = auth.AwsCredentialsProvider.newDefault();\n        }\n        builder.config.websocketHandshakeTransform = (request, done) => __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            try {\n                const signingConfig = {\n                    algorithm: auth.AwsSigningAlgorithm.SigV4,\n                    signature_type: auth.AwsSignatureType.HttpRequestViaQueryParams,\n                    provider: credentialsProvider,\n                    region: (_a = options === null || options === void 0 ? void 0 : options.region) !== null && _a !== void 0 ? _a : iot_shared.extractRegionFromEndpoint(hostName),\n                    service: \"iotdevicegateway\",\n                    signed_body_value: auth.AwsSignedBodyValue.EmptySha256,\n                    omit_session_token: true,\n                };\n                yield auth.aws_sign_request(request, signingConfig);\n                done();\n            }\n            catch (error) {\n                if (error instanceof error_1.CrtError) {\n                    done(error.error_code);\n                }\n                else {\n                    done(3); /* TODO: AWS_ERROR_UNKNOWN */\n                }\n            }\n        });\n        return builder;\n    }\n    /**\n     * Create a new MQTT5 client builder that will create MQTT5 clients that connect to AWS IoT Core via websockets,\n     * authenticating via a custom authenticator.\n     *\n     * @param hostName - AWS IoT endpoint to connect to\n     * @param customAuthConfig - AWS IoT custom auth configuration\n     */\n    static newWebsocketMqttBuilderWithCustomAuth(hostName, customAuthConfig) {\n        let builder = new AwsIotMqtt5ClientConfigBuilder(hostName, AwsIotMqtt5ClientConfigBuilder.DEFAULT_WEBSOCKET_MQTT_PORT, new io.TlsContextOptions());\n        builder.customAuthConfig = customAuthConfig;\n        builder.config.websocketHandshakeTransform = (request, done) => __awaiter(this, void 0, void 0, function* () {\n            done(0);\n        });\n        return builder;\n    }\n    /* Instance Methods for various config overrides */\n    /**\n     * Overrides the default system trust store.\n     *\n     * @param caDirpath - Only used on Unix-style systems where all trust anchors are\n     * stored in a directory (e.g. /etc/ssl/certs).\n     * @param caFilepath - Single file containing all trust CAs, in PEM format\n     */\n    withCertificateAuthorityFromPath(caDirpath, caFilepath) {\n        this.tlsContextOptions.override_default_trust_store_from_path(caDirpath, caFilepath);\n        return this;\n    }\n    /**\n     * Overrides the default system trust store.\n     *\n     * @param ca - Buffer containing all trust CAs, in PEM format\n     */\n    withCertificateAuthority(ca) {\n        this.tlsContextOptions.override_default_trust_store(ca);\n        return this;\n    }\n    /**\n     * Overrides the IoT endpoint port to connect to.\n     *\n     * @param port The IoT endpoint port to connect to. Usually 8883 for MQTT, or 443 for websockets\n     */\n    withPort(port) {\n        this.config.port = port;\n        return this;\n    }\n    /**\n     * Overrides all configurable options with respect to the CONNECT packet sent by the client, including the will.\n     * These connect properties will be used for every connection attempt made by the client.  Custom authentication\n     * configuration will override the username and password values in this configuration.\n     *\n     * @param connectPacket all configurable options with respect to the CONNECT packet sent by the client\n     */\n    withConnectProperties(connectPacket) {\n        this.config.connectProperties = connectPacket;\n        return this;\n    }\n    /**\n     * Overrides how the MQTT5 client should behave with respect to MQTT sessions.\n     *\n     * @param sessionBehavior how the MQTT5 client should behave with respect to MQTT sessions.\n     */\n    withSessionBehavior(sessionBehavior) {\n        this.config.sessionBehavior = sessionBehavior;\n        return this;\n    }\n    /**\n     * Overrides how the reconnect delay is modified in order to smooth out the distribution of reconnection attempt\n     * timepoints for a large set of reconnecting clients.\n     *\n     * @param retryJitterMode controls how the reconnect delay is modified in order to smooth out the distribution of\n     * econnection attempt timepoints for a large set of reconnecting clients.\n     */\n    withRetryJitterMode(retryJitterMode) {\n        this.config.retryJitterMode = retryJitterMode;\n        return this;\n    }\n    /**\n     * Overrides the minimum amount of time to wait to reconnect after a disconnect.  Exponential backoff is performed\n     * with controllable jitter after each connection failure.\n     *\n     * @param minReconnectDelayMs minimum amount of time to wait to reconnect after a disconnect.\n     */\n    withMinReconnectDelayMs(minReconnectDelayMs) {\n        this.config.minReconnectDelayMs = minReconnectDelayMs;\n        return this;\n    }\n    /**\n     * Overrides the maximum amount of time to wait to reconnect after a disconnect.  Exponential backoff is performed\n     * with controllable jitter after each connection failure.\n     *\n     * @param maxReconnectDelayMs maximum amount of time to wait to reconnect after a disconnect.\n     */\n    withMaxReconnectDelayMs(maxReconnectDelayMs) {\n        this.config.maxReconnectDelayMs = maxReconnectDelayMs;\n        return this;\n    }\n    /**\n     * Overrides the amount of time that must elapse with an established connection before the reconnect delay is\n     * reset to the minimum.  This helps alleviate bandwidth-waste in fast reconnect cycles due to permission\n     * failures on operations.\n     *\n     * @param minConnectedTimeToResetReconnectDelayMs the amount of time that must elapse with an established\n     * connection before the reconnect delay is reset to the minimum\n     */\n    withMinConnectedTimeToResetReconnectDelayMs(minConnectedTimeToResetReconnectDelayMs) {\n        this.config.minConnectedTimeToResetReconnectDelayMs = minConnectedTimeToResetReconnectDelayMs;\n        return this;\n    }\n    /**\n     * Overrides the time interval to wait after sending a CONNECT request for a CONNACK to arrive.  If one does not\n     * arrive, the connection will be shut down.\n     *\n     * @param connackTimeoutMs time interval to wait after sending a CONNECT request for a CONNACK to arrive\n     */\n    withConnackTimeoutMs(connackTimeoutMs) {\n        this.config.connackTimeoutMs = connackTimeoutMs;\n        return this;\n    }\n    /**\n     * Overrides how disconnects affect the queued and in-progress operations tracked by the client.  Also controls\n     * how new operations are handled while the client is not connected.  In particular, if the client is not connected,\n     * then any operation that would be failed on disconnect (according to these rules) will also be rejected.\n     *\n     * @param offlineQueueBehavior how disconnects affect the queued and in-progress operations tracked by the client\n     *\n     * @group Node-only\n     */\n    withOfflineQueueBehavior(offlineQueueBehavior) {\n        this.config.offlineQueueBehavior = offlineQueueBehavior;\n        return this;\n    }\n    /**\n     * Overrides the time interval to wait after sending a PINGREQ for a PINGRESP to arrive.  If one does not arrive,\n     * the client will close the current connection.\n     *\n     * @param pingTimeoutMs time interval to wait after sending a PINGREQ for a PINGRESP to arrive\n     *\n     * @group Node-only\n     */\n    withPingTimeoutMs(pingTimeoutMs) {\n        this.config.pingTimeoutMs = pingTimeoutMs;\n        return this;\n    }\n    /**\n     * Overrides the time interval to wait for an ack after sending a QoS 1+ PUBLISH, SUBSCRIBE, or UNSUBSCRIBE before\n     * failing the operation.  Defaults to no timeout.\n     *\n     * @param ackTimeoutSeconds the time interval to wait for an ack after sending a QoS 1+ PUBLISH, SUBSCRIBE,\n     * or UNSUBSCRIBE before failing the operation\n     *\n     * @group Node-only\n     */\n    withAckTimeoutSeconds(ackTimeoutSeconds) {\n        this.config.ackTimeoutSeconds = ackTimeoutSeconds;\n        return this;\n    }\n    /**\n     * Overrides the socket properties of the underlying MQTT connections made by the client.  Leave undefined to use\n     * defaults (no TCP keep alive, 10 second socket timeout).\n     *\n     * @param socketOptions socket properties of the underlying MQTT connections made by the client\n     *\n     * @group Node-only\n     */\n    withSocketOptions(socketOptions) {\n        this.config.socketOptions = socketOptions;\n        return this;\n    }\n    /**\n     * Overrides (tunneling) HTTP proxy usage when establishing MQTT connections.\n     *\n     * @param httpProxyOptions HTTP proxy options to use when establishing MQTT connections\n     *\n     * @group Node-only\n     */\n    withHttpProxyOptions(httpProxyOptions) {\n        this.config.httpProxyOptions = httpProxyOptions;\n        return this;\n    }\n    /**\n     * Overrides additional controls for client behavior with respect to operation validation and flow control; these\n     * checks go beyond the base MQTT5 spec to respect limits of specific MQTT brokers.\n     *\n     * @param extendedValidationAndFlowControlOptions additional controls for client behavior with respect to operation\n     * validation and flow control\n     *\n     * @group Node-only\n     */\n    withExtendedValidationAndFlowControlOptions(extendedValidationAndFlowControlOptions) {\n        this.config.extendedValidationAndFlowControlOptions = extendedValidationAndFlowControlOptions;\n        return this;\n    }\n    /**\n     * Constructs an MQTT5 Client configuration object for creating mqtt5 clients.\n     */\n    build() {\n        var _a, _b;\n        if (this.config.tlsCtx === undefined) {\n            this.config.tlsCtx = new io.ClientTlsContext(this.tlsContextOptions);\n        }\n        // this is always set by the constructor, but check it to make typescript happy\n        if (this.config.connectProperties) {\n            this.config.connectProperties.username = iot_shared.buildMqtt5FinalUsername(this.customAuthConfig);\n            if ((_a = this.customAuthConfig) === null || _a === void 0 ? void 0 : _a.password) {\n                this.config.connectProperties.password = (_b = this.customAuthConfig) === null || _b === void 0 ? void 0 : _b.password;\n            }\n        }\n        return this.config;\n    }\n}\nexports.AwsIotMqtt5ClientConfigBuilder = AwsIotMqtt5ClientConfigBuilder;\nAwsIotMqtt5ClientConfigBuilder.DEFAULT_WEBSOCKET_MQTT_PORT = 443;\nAwsIotMqtt5ClientConfigBuilder.DEFAULT_DIRECT_MQTT_PORT = 8883;\n//# sourceMappingURL=aws_iot_mqtt5.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/aws-crt/dist/native/aws_iot_mqtt5.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/aws-crt/dist/native/binding.js":
/*!*****************************************************!*\
  !*** ./node_modules/aws-crt/dist/native/binding.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.cRuntime = exports.CRuntimeType = void 0;\nconst path = __importStar(__webpack_require__(/*! path */ \"path\"));\nconst os_1 = __webpack_require__(/*! os */ \"os\");\nconst fs_1 = __webpack_require__(/*! fs */ \"fs\");\nconst process_1 = __webpack_require__(/*! process */ \"process\");\nconst child_process_1 = __importDefault(__webpack_require__(/*! child_process */ \"child_process\"));\nconst CRuntimeType = Object.freeze({\n    NON_LINUX: \"cruntime\",\n    MUSL: \"musl\",\n    GLIBC: \"glibc\"\n});\nexports.CRuntimeType = CRuntimeType;\nfunction getCRuntime() {\n    if ((0, os_1.platform)() !== \"linux\") {\n        return CRuntimeType.NON_LINUX;\n    }\n    try {\n        // sometimes, ldd's output goes to stderr, so capture that too\n        // Using spawnSync because execSync treats any output to stderr as an exception.\n        const spawnedProcess = child_process_1.default.spawnSync('ldd', ['--version'], { encoding: 'utf8' });\n        const output = spawnedProcess.stdout + spawnedProcess.stderr;\n        if (output.includes(CRuntimeType.MUSL)) {\n            return CRuntimeType.MUSL;\n        }\n        else {\n            return CRuntimeType.GLIBC;\n        }\n    }\n    catch (error) {\n        return CRuntimeType.GLIBC;\n    }\n}\nconst upgrade_string = \"Please upgrade to node >=10.16.0, or use the provided browser implementation.\";\nif ('napi' in process_1.versions) {\n    // @ts-ignore\n    const napi_version = parseInt(process_1.versions['napi']);\n    if (napi_version < 4) {\n        throw new Error(\"The AWS CRT native implementation requires that NAPI version 4 be present. \" + upgrade_string);\n    }\n}\nelse {\n    throw new Error(\"The current runtime is not reporting an NAPI version. \" + upgrade_string);\n}\nconst cRuntime = getCRuntime();\nexports.cRuntime = cRuntime;\nconst binary_name = 'aws-crt-nodejs';\nconst platformDir = `${os_1.platform}-${os_1.arch}-${cRuntime}`;\nlet source_root = path.resolve(__dirname, '..', '..');\nconst dist = path.join(source_root, 'dist');\nif ((0, fs_1.existsSync)(dist)) {\n    source_root = dist;\n}\nconst bin_path = path.resolve(source_root, 'bin');\nconst search_paths = [\n    path.join(bin_path, platformDir, binary_name),\n];\nlet binding;\nfor (const path of search_paths) {\n    if ((0, fs_1.existsSync)(path + '.node')) {\n        binding = __webpack_require__(\"(ssr)/./node_modules/aws-crt/dist/native sync recursive\")(path);\n        break;\n    }\n}\nif (binding == undefined) {\n    throw new Error(\"AWS CRT binary not present in any of the following locations:\\n\\t\" + search_paths.join('\\n\\t'));\n}\nexports[\"default\"] = binding;\n//# sourceMappingURL=binding.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXdzLWNydC9kaXN0L25hdGl2ZS9iaW5kaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLDBDQUEwQyw0QkFBNEI7QUFDdEUsQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCLEdBQUcsb0JBQW9CO0FBQ3ZDLDBCQUEwQixtQkFBTyxDQUFDLGtCQUFNO0FBQ3hDLGFBQWEsbUJBQU8sQ0FBQyxjQUFJO0FBQ3pCLGFBQWEsbUJBQU8sQ0FBQyxjQUFJO0FBQ3pCLGtCQUFrQixtQkFBTyxDQUFDLHdCQUFTO0FBQ25DLHdDQUF3QyxtQkFBTyxDQUFDLG9DQUFlO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlGQUF5RixrQkFBa0I7QUFDM0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsdUJBQXVCLGNBQWMsR0FBRyxVQUFVLEdBQUcsU0FBUztBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsK0VBQVEsSUFBSSxDQUFDO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXl3aW5kLy4vbm9kZV9tb2R1bGVzL2F3cy1jcnQvZGlzdC9uYXRpdmUvYmluZGluZy5qcz9kYTc3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjAuXG4gKi9cbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jUnVudGltZSA9IGV4cG9ydHMuQ1J1bnRpbWVUeXBlID0gdm9pZCAwO1xuY29uc3QgcGF0aCA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwicGF0aFwiKSk7XG5jb25zdCBvc18xID0gcmVxdWlyZShcIm9zXCIpO1xuY29uc3QgZnNfMSA9IHJlcXVpcmUoXCJmc1wiKTtcbmNvbnN0IHByb2Nlc3NfMSA9IHJlcXVpcmUoXCJwcm9jZXNzXCIpO1xuY29uc3QgY2hpbGRfcHJvY2Vzc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJjaGlsZF9wcm9jZXNzXCIpKTtcbmNvbnN0IENSdW50aW1lVHlwZSA9IE9iamVjdC5mcmVlemUoe1xuICAgIE5PTl9MSU5VWDogXCJjcnVudGltZVwiLFxuICAgIE1VU0w6IFwibXVzbFwiLFxuICAgIEdMSUJDOiBcImdsaWJjXCJcbn0pO1xuZXhwb3J0cy5DUnVudGltZVR5cGUgPSBDUnVudGltZVR5cGU7XG5mdW5jdGlvbiBnZXRDUnVudGltZSgpIHtcbiAgICBpZiAoKDAsIG9zXzEucGxhdGZvcm0pKCkgIT09IFwibGludXhcIikge1xuICAgICAgICByZXR1cm4gQ1J1bnRpbWVUeXBlLk5PTl9MSU5VWDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gc29tZXRpbWVzLCBsZGQncyBvdXRwdXQgZ29lcyB0byBzdGRlcnIsIHNvIGNhcHR1cmUgdGhhdCB0b29cbiAgICAgICAgLy8gVXNpbmcgc3Bhd25TeW5jIGJlY2F1c2UgZXhlY1N5bmMgdHJlYXRzIGFueSBvdXRwdXQgdG8gc3RkZXJyIGFzIGFuIGV4Y2VwdGlvbi5cbiAgICAgICAgY29uc3Qgc3Bhd25lZFByb2Nlc3MgPSBjaGlsZF9wcm9jZXNzXzEuZGVmYXVsdC5zcGF3blN5bmMoJ2xkZCcsIFsnLS12ZXJzaW9uJ10sIHsgZW5jb2Rpbmc6ICd1dGY4JyB9KTtcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0gc3Bhd25lZFByb2Nlc3Muc3Rkb3V0ICsgc3Bhd25lZFByb2Nlc3Muc3RkZXJyO1xuICAgICAgICBpZiAob3V0cHV0LmluY2x1ZGVzKENSdW50aW1lVHlwZS5NVVNMKSkge1xuICAgICAgICAgICAgcmV0dXJuIENSdW50aW1lVHlwZS5NVVNMO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIENSdW50aW1lVHlwZS5HTElCQztcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIENSdW50aW1lVHlwZS5HTElCQztcbiAgICB9XG59XG5jb25zdCB1cGdyYWRlX3N0cmluZyA9IFwiUGxlYXNlIHVwZ3JhZGUgdG8gbm9kZSA+PTEwLjE2LjAsIG9yIHVzZSB0aGUgcHJvdmlkZWQgYnJvd3NlciBpbXBsZW1lbnRhdGlvbi5cIjtcbmlmICgnbmFwaScgaW4gcHJvY2Vzc18xLnZlcnNpb25zKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNvbnN0IG5hcGlfdmVyc2lvbiA9IHBhcnNlSW50KHByb2Nlc3NfMS52ZXJzaW9uc1snbmFwaSddKTtcbiAgICBpZiAobmFwaV92ZXJzaW9uIDwgNCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgQVdTIENSVCBuYXRpdmUgaW1wbGVtZW50YXRpb24gcmVxdWlyZXMgdGhhdCBOQVBJIHZlcnNpb24gNCBiZSBwcmVzZW50LiBcIiArIHVwZ3JhZGVfc3RyaW5nKTtcbiAgICB9XG59XG5lbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgY3VycmVudCBydW50aW1lIGlzIG5vdCByZXBvcnRpbmcgYW4gTkFQSSB2ZXJzaW9uLiBcIiArIHVwZ3JhZGVfc3RyaW5nKTtcbn1cbmNvbnN0IGNSdW50aW1lID0gZ2V0Q1J1bnRpbWUoKTtcbmV4cG9ydHMuY1J1bnRpbWUgPSBjUnVudGltZTtcbmNvbnN0IGJpbmFyeV9uYW1lID0gJ2F3cy1jcnQtbm9kZWpzJztcbmNvbnN0IHBsYXRmb3JtRGlyID0gYCR7b3NfMS5wbGF0Zm9ybX0tJHtvc18xLmFyY2h9LSR7Y1J1bnRpbWV9YDtcbmxldCBzb3VyY2Vfcm9vdCA9IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLicsICcuLicpO1xuY29uc3QgZGlzdCA9IHBhdGguam9pbihzb3VyY2Vfcm9vdCwgJ2Rpc3QnKTtcbmlmICgoMCwgZnNfMS5leGlzdHNTeW5jKShkaXN0KSkge1xuICAgIHNvdXJjZV9yb290ID0gZGlzdDtcbn1cbmNvbnN0IGJpbl9wYXRoID0gcGF0aC5yZXNvbHZlKHNvdXJjZV9yb290LCAnYmluJyk7XG5jb25zdCBzZWFyY2hfcGF0aHMgPSBbXG4gICAgcGF0aC5qb2luKGJpbl9wYXRoLCBwbGF0Zm9ybURpciwgYmluYXJ5X25hbWUpLFxuXTtcbmxldCBiaW5kaW5nO1xuZm9yIChjb25zdCBwYXRoIG9mIHNlYXJjaF9wYXRocykge1xuICAgIGlmICgoMCwgZnNfMS5leGlzdHNTeW5jKShwYXRoICsgJy5ub2RlJykpIHtcbiAgICAgICAgYmluZGluZyA9IHJlcXVpcmUocGF0aCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbn1cbmlmIChiaW5kaW5nID09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkFXUyBDUlQgYmluYXJ5IG5vdCBwcmVzZW50IGluIGFueSBvZiB0aGUgZm9sbG93aW5nIGxvY2F0aW9uczpcXG5cXHRcIiArIHNlYXJjaF9wYXRocy5qb2luKCdcXG5cXHQnKSk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBiaW5kaW5nO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmluZGluZy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/aws-crt/dist/native/binding.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/aws-crt/dist/native/checksums.js":
/*!*******************************************************!*\
  !*** ./node_modules/aws-crt/dist/native/checksums.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.crc32c = exports.crc32 = void 0;\n/**\n *\n * A module containing various checksum implementations intended for streaming payloads\n *\n * @packageDocumentation\n * @module checksums\n * @mergeTarget\n */\nconst binding_1 = __importDefault(__webpack_require__(/*! ./binding */ \"(ssr)/./node_modules/aws-crt/dist/native/binding.js\"));\n/**\n * Computes an crc32 checksum.\n *\n * @param data The data to checksum\n * @param previous previous crc32 checksum result. Used if you are buffering large input.\n *\n * @category Crypto\n */\nfunction crc32(data, previous) {\n    return binding_1.default.checksums_crc32(data, previous);\n}\nexports.crc32 = crc32;\n/**\n * Computes a crc32c checksum.\n *\n * @param data The data to checksum\n * @param previous previous crc32c checksum result. Used if you are buffering large input.\n *\n * @category Crypto\n */\nfunction crc32c(data, previous) {\n    return binding_1.default.checksums_crc32c(data, previous);\n}\nexports.crc32c = crc32c;\n//# sourceMappingURL=checksums.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXdzLWNydC9kaXN0L25hdGl2ZS9jaGVja3N1bXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGNBQWMsR0FBRyxhQUFhO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsbUJBQU8sQ0FBQyxzRUFBVztBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXl3aW5kLy4vbm9kZV9tb2R1bGVzL2F3cy1jcnQvZGlzdC9uYXRpdmUvY2hlY2tzdW1zLmpzPzJjYmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMC5cbiAqL1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmMzMmMgPSBleHBvcnRzLmNyYzMyID0gdm9pZCAwO1xuLyoqXG4gKlxuICogQSBtb2R1bGUgY29udGFpbmluZyB2YXJpb3VzIGNoZWNrc3VtIGltcGxlbWVudGF0aW9ucyBpbnRlbmRlZCBmb3Igc3RyZWFtaW5nIHBheWxvYWRzXG4gKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIGNoZWNrc3Vtc1xuICogQG1lcmdlVGFyZ2V0XG4gKi9cbmNvbnN0IGJpbmRpbmdfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9iaW5kaW5nXCIpKTtcbi8qKlxuICogQ29tcHV0ZXMgYW4gY3JjMzIgY2hlY2tzdW0uXG4gKlxuICogQHBhcmFtIGRhdGEgVGhlIGRhdGEgdG8gY2hlY2tzdW1cbiAqIEBwYXJhbSBwcmV2aW91cyBwcmV2aW91cyBjcmMzMiBjaGVja3N1bSByZXN1bHQuIFVzZWQgaWYgeW91IGFyZSBidWZmZXJpbmcgbGFyZ2UgaW5wdXQuXG4gKlxuICogQGNhdGVnb3J5IENyeXB0b1xuICovXG5mdW5jdGlvbiBjcmMzMihkYXRhLCBwcmV2aW91cykge1xuICAgIHJldHVybiBiaW5kaW5nXzEuZGVmYXVsdC5jaGVja3N1bXNfY3JjMzIoZGF0YSwgcHJldmlvdXMpO1xufVxuZXhwb3J0cy5jcmMzMiA9IGNyYzMyO1xuLyoqXG4gKiBDb21wdXRlcyBhIGNyYzMyYyBjaGVja3N1bS5cbiAqXG4gKiBAcGFyYW0gZGF0YSBUaGUgZGF0YSB0byBjaGVja3N1bVxuICogQHBhcmFtIHByZXZpb3VzIHByZXZpb3VzIGNyYzMyYyBjaGVja3N1bSByZXN1bHQuIFVzZWQgaWYgeW91IGFyZSBidWZmZXJpbmcgbGFyZ2UgaW5wdXQuXG4gKlxuICogQGNhdGVnb3J5IENyeXB0b1xuICovXG5mdW5jdGlvbiBjcmMzMmMoZGF0YSwgcHJldmlvdXMpIHtcbiAgICByZXR1cm4gYmluZGluZ18xLmRlZmF1bHQuY2hlY2tzdW1zX2NyYzMyYyhkYXRhLCBwcmV2aW91cyk7XG59XG5leHBvcnRzLmNyYzMyYyA9IGNyYzMyYztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNoZWNrc3Vtcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/aws-crt/dist/native/checksums.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/aws-crt/dist/native/crt.js":
/*!*************************************************!*\
  !*** ./node_modules/aws-crt/dist/native/crt.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.native_memory_dump = exports.native_memory = void 0;\n/**\n *\n * A module containing some miscellaneous crt native memory queries\n *\n * @packageDocumentation\n * @module crt\n * @mergeTarget\n */\n/**\n * Memory reporting is controlled by the AWS_CRT_MEMORY_TRACING environment\n * variable. Possible values are:\n * * 0 - No tracing\n * * 1 - Track active memory usage. Incurs a small performance penalty.\n * * 2 - Track active memory usage, and also track callstacks for every allocation.\n *   This incurs a performance penalty, depending on the cost of the platform's\n *   stack unwinding/backtrace API.\n * @category System\n */\nconst binding_1 = __importDefault(__webpack_require__(/*! ./binding */ \"(ssr)/./node_modules/aws-crt/dist/native/binding.js\"));\n/**\n * If the ```AWS_CRT_MEMORY_TRACING``` is environment variable is set to 1 or 2,\n * will return the native memory usage in bytes. Otherwise, returns 0.\n * @returns The total allocated native memory, in bytes.\n *\n * @category System\n */\nfunction native_memory() {\n    return binding_1.default.native_memory();\n}\nexports.native_memory = native_memory;\n/**\n * Dumps outstanding native memory allocations. If the ```AWS_CRT_MEMORY_TRACING```\n * environment variable is set to 1 or 2, will dump all active native memory to\n * the console log.\n *\n * @category System\n */\nfunction native_memory_dump() {\n    return binding_1.default.native_memory_dump();\n}\nexports.native_memory_dump = native_memory_dump;\n//# sourceMappingURL=crt.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXdzLWNydC9kaXN0L25hdGl2ZS9jcnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQixHQUFHLHFCQUFxQjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsbUJBQU8sQ0FBQyxzRUFBVztBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQiIsInNvdXJjZXMiOlsid2VicGFjazovL3BheXdpbmQvLi9ub2RlX21vZHVsZXMvYXdzLWNydC9kaXN0L25hdGl2ZS9jcnQuanM/M2JlNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wLlxuICovXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm5hdGl2ZV9tZW1vcnlfZHVtcCA9IGV4cG9ydHMubmF0aXZlX21lbW9yeSA9IHZvaWQgMDtcbi8qKlxuICpcbiAqIEEgbW9kdWxlIGNvbnRhaW5pbmcgc29tZSBtaXNjZWxsYW5lb3VzIGNydCBuYXRpdmUgbWVtb3J5IHF1ZXJpZXNcbiAqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgY3J0XG4gKiBAbWVyZ2VUYXJnZXRcbiAqL1xuLyoqXG4gKiBNZW1vcnkgcmVwb3J0aW5nIGlzIGNvbnRyb2xsZWQgYnkgdGhlIEFXU19DUlRfTUVNT1JZX1RSQUNJTkcgZW52aXJvbm1lbnRcbiAqIHZhcmlhYmxlLiBQb3NzaWJsZSB2YWx1ZXMgYXJlOlxuICogKiAwIC0gTm8gdHJhY2luZ1xuICogKiAxIC0gVHJhY2sgYWN0aXZlIG1lbW9yeSB1c2FnZS4gSW5jdXJzIGEgc21hbGwgcGVyZm9ybWFuY2UgcGVuYWx0eS5cbiAqICogMiAtIFRyYWNrIGFjdGl2ZSBtZW1vcnkgdXNhZ2UsIGFuZCBhbHNvIHRyYWNrIGNhbGxzdGFja3MgZm9yIGV2ZXJ5IGFsbG9jYXRpb24uXG4gKiAgIFRoaXMgaW5jdXJzIGEgcGVyZm9ybWFuY2UgcGVuYWx0eSwgZGVwZW5kaW5nIG9uIHRoZSBjb3N0IG9mIHRoZSBwbGF0Zm9ybSdzXG4gKiAgIHN0YWNrIHVud2luZGluZy9iYWNrdHJhY2UgQVBJLlxuICogQGNhdGVnb3J5IFN5c3RlbVxuICovXG5jb25zdCBiaW5kaW5nXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vYmluZGluZ1wiKSk7XG4vKipcbiAqIElmIHRoZSBgYGBBV1NfQ1JUX01FTU9SWV9UUkFDSU5HYGBgIGlzIGVudmlyb25tZW50IHZhcmlhYmxlIGlzIHNldCB0byAxIG9yIDIsXG4gKiB3aWxsIHJldHVybiB0aGUgbmF0aXZlIG1lbW9yeSB1c2FnZSBpbiBieXRlcy4gT3RoZXJ3aXNlLCByZXR1cm5zIDAuXG4gKiBAcmV0dXJucyBUaGUgdG90YWwgYWxsb2NhdGVkIG5hdGl2ZSBtZW1vcnksIGluIGJ5dGVzLlxuICpcbiAqIEBjYXRlZ29yeSBTeXN0ZW1cbiAqL1xuZnVuY3Rpb24gbmF0aXZlX21lbW9yeSgpIHtcbiAgICByZXR1cm4gYmluZGluZ18xLmRlZmF1bHQubmF0aXZlX21lbW9yeSgpO1xufVxuZXhwb3J0cy5uYXRpdmVfbWVtb3J5ID0gbmF0aXZlX21lbW9yeTtcbi8qKlxuICogRHVtcHMgb3V0c3RhbmRpbmcgbmF0aXZlIG1lbW9yeSBhbGxvY2F0aW9ucy4gSWYgdGhlIGBgYEFXU19DUlRfTUVNT1JZX1RSQUNJTkdgYGBcbiAqIGVudmlyb25tZW50IHZhcmlhYmxlIGlzIHNldCB0byAxIG9yIDIsIHdpbGwgZHVtcCBhbGwgYWN0aXZlIG5hdGl2ZSBtZW1vcnkgdG9cbiAqIHRoZSBjb25zb2xlIGxvZy5cbiAqXG4gKiBAY2F0ZWdvcnkgU3lzdGVtXG4gKi9cbmZ1bmN0aW9uIG5hdGl2ZV9tZW1vcnlfZHVtcCgpIHtcbiAgICByZXR1cm4gYmluZGluZ18xLmRlZmF1bHQubmF0aXZlX21lbW9yeV9kdW1wKCk7XG59XG5leHBvcnRzLm5hdGl2ZV9tZW1vcnlfZHVtcCA9IG5hdGl2ZV9tZW1vcnlfZHVtcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNydC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/aws-crt/dist/native/crt.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/aws-crt/dist/native/crypto.js":
/*!****************************************************!*\
  !*** ./node_modules/aws-crt/dist/native/crypto.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.hmac_sha256 = exports.Sha256Hmac = exports.hash_sha1 = exports.Sha1Hash = exports.hash_sha256 = exports.Sha256Hash = exports.hash_md5 = exports.Md5Hash = void 0;\n/**\n * A module containing support for a variety of cryptographic operations.\n *\n * @packageDocumentation\n * @module crypto\n * @mergeTarget\n */\nconst binding_1 = __importDefault(__webpack_require__(/*! ./binding */ \"(ssr)/./node_modules/aws-crt/dist/native/binding.js\"));\nconst native_resource_1 = __webpack_require__(/*! ./native_resource */ \"(ssr)/./node_modules/aws-crt/dist/native/native_resource.js\");\n/**\n * Object that allows for continuous hashing of data.\n *\n * @internal\n */\nclass Hash extends native_resource_1.NativeResource {\n    /**\n     * Hash additional data.\n     * @param data Additional data to hash\n     */\n    update(data) {\n        binding_1.default.hash_update(this.native_handle(), data);\n    }\n    /**\n     * Completes the hash computation and returns the final hash digest.\n     *\n     * @param truncate_to The maximum number of bytes to receive. Leave as undefined or 0 to receive the entire digest.\n     */\n    finalize(truncate_to) {\n        return binding_1.default.hash_digest(this.native_handle(), truncate_to);\n    }\n    constructor(hash_handle) {\n        super(hash_handle);\n    }\n}\n/**\n * Object that allows for continuous MD5 hashing of data.\n *\n * @category Crypto\n */\nclass Md5Hash extends Hash {\n    constructor() {\n        super(binding_1.default.hash_md5_new());\n    }\n}\nexports.Md5Hash = Md5Hash;\n/**\n * Computes an MD5 hash. Use this if you don't need to stream the data you're hashing and can load the entire input\n * into memory.\n *\n * @param data The data to hash\n * @param truncate_to The maximum number of bytes to receive. Leave as undefined or 0 to receive the entire digest.\n *\n * @category Crypto\n */\nfunction hash_md5(data, truncate_to) {\n    return binding_1.default.hash_md5_compute(data, truncate_to);\n}\nexports.hash_md5 = hash_md5;\n/**\n * Object that allows for continuous SHA256 hashing of data.\n *\n * @category Crypto\n */\nclass Sha256Hash extends Hash {\n    constructor() {\n        super(binding_1.default.hash_sha256_new());\n    }\n}\nexports.Sha256Hash = Sha256Hash;\n/**\n * Computes an SHA256 hash. Use this if you don't need to stream the data you're hashing and can load the entire input\n * into memory.\n *\n * @param data The data to hash\n * @param truncate_to The maximum number of bytes to receive. Leave as undefined or 0 to receive the entire digest.\n *\n * @category Crypto\n */\nfunction hash_sha256(data, truncate_to) {\n    return binding_1.default.hash_sha256_compute(data, truncate_to);\n}\nexports.hash_sha256 = hash_sha256;\n/**\n * Object that allows for continuous SHA1 hashing of data.\n *\n * @category Crypto\n */\nclass Sha1Hash extends Hash {\n    constructor() {\n        super(binding_1.default.hash_sha1_new());\n    }\n}\nexports.Sha1Hash = Sha1Hash;\n/**\n * Computes an SHA1 hash. Use this if you don't need to stream the data you're hashing and can load the entire input\n * into memory.\n *\n * @param data The data to hash\n * @param truncate_to The maximum number of bytes to receive. Leave as undefined or 0 to receive the entire digest.\n *\n * @category Crypto\n */\nfunction hash_sha1(data, truncate_to) {\n    return binding_1.default.hash_sha1_compute(data, truncate_to);\n}\nexports.hash_sha1 = hash_sha1;\n/**\n * Object that allows for continuous hashing of data with an hmac secret.\n *\n * @category Crypto\n */\nclass Hmac extends native_resource_1.NativeResource {\n    /**\n     * Hash additional data.\n     *\n     * @param data additional data to hash\n     */\n    update(data) {\n        binding_1.default.hmac_update(this.native_handle(), data);\n    }\n    /**\n     * Completes the hash computation and returns the final hmac digest.\n     *\n     * @param truncate_to The maximum number of bytes to receive. Leave as undefined or 0 to receive the entire digest.\n     */\n    finalize(truncate_to) {\n        return binding_1.default.hmac_digest(this.native_handle(), truncate_to);\n    }\n    constructor(hash_handle) {\n        super(hash_handle);\n    }\n}\n/**\n * Object that allows for continuous SHA256 HMAC hashing of data.\n *\n * @category Crypto\n */\nclass Sha256Hmac extends Hmac {\n    constructor(secret) {\n        super(binding_1.default.hmac_sha256_new(secret));\n    }\n}\nexports.Sha256Hmac = Sha256Hmac;\n/**\n * Computes an SHA256 HMAC. Use this if you don't need to stream the data you're hashing and can load the entire input\n * into memory.\n *\n * @param secret The key to use for the HMAC process\n * @param data The data to hash\n * @param truncate_to The maximum number of bytes to receive. Leave as undefined or 0 to receive the entire digest.\n *\n * @category Crypto\n */\nfunction hmac_sha256(secret, data, truncate_to) {\n    return binding_1.default.hmac_sha256_compute(secret, data, truncate_to);\n}\nexports.hmac_sha256 = hmac_sha256;\n//# sourceMappingURL=crypto.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXdzLWNydC9kaXN0L25hdGl2ZS9jcnlwdG8uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQixHQUFHLGtCQUFrQixHQUFHLGlCQUFpQixHQUFHLGdCQUFnQixHQUFHLG1CQUFtQixHQUFHLGtCQUFrQixHQUFHLGdCQUFnQixHQUFHLGVBQWU7QUFDL0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsbUJBQU8sQ0FBQyxzRUFBVztBQUNyRCwwQkFBMEIsbUJBQU8sQ0FBQyxzRkFBbUI7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wYXl3aW5kLy4vbm9kZV9tb2R1bGVzL2F3cy1jcnQvZGlzdC9uYXRpdmUvY3J5cHRvLmpzPzgxZGEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMC5cbiAqL1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5obWFjX3NoYTI1NiA9IGV4cG9ydHMuU2hhMjU2SG1hYyA9IGV4cG9ydHMuaGFzaF9zaGExID0gZXhwb3J0cy5TaGExSGFzaCA9IGV4cG9ydHMuaGFzaF9zaGEyNTYgPSBleHBvcnRzLlNoYTI1Nkhhc2ggPSBleHBvcnRzLmhhc2hfbWQ1ID0gZXhwb3J0cy5NZDVIYXNoID0gdm9pZCAwO1xuLyoqXG4gKiBBIG1vZHVsZSBjb250YWluaW5nIHN1cHBvcnQgZm9yIGEgdmFyaWV0eSBvZiBjcnlwdG9ncmFwaGljIG9wZXJhdGlvbnMuXG4gKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIGNyeXB0b1xuICogQG1lcmdlVGFyZ2V0XG4gKi9cbmNvbnN0IGJpbmRpbmdfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9iaW5kaW5nXCIpKTtcbmNvbnN0IG5hdGl2ZV9yZXNvdXJjZV8xID0gcmVxdWlyZShcIi4vbmF0aXZlX3Jlc291cmNlXCIpO1xuLyoqXG4gKiBPYmplY3QgdGhhdCBhbGxvd3MgZm9yIGNvbnRpbnVvdXMgaGFzaGluZyBvZiBkYXRhLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5jbGFzcyBIYXNoIGV4dGVuZHMgbmF0aXZlX3Jlc291cmNlXzEuTmF0aXZlUmVzb3VyY2Uge1xuICAgIC8qKlxuICAgICAqIEhhc2ggYWRkaXRpb25hbCBkYXRhLlxuICAgICAqIEBwYXJhbSBkYXRhIEFkZGl0aW9uYWwgZGF0YSB0byBoYXNoXG4gICAgICovXG4gICAgdXBkYXRlKGRhdGEpIHtcbiAgICAgICAgYmluZGluZ18xLmRlZmF1bHQuaGFzaF91cGRhdGUodGhpcy5uYXRpdmVfaGFuZGxlKCksIGRhdGEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wbGV0ZXMgdGhlIGhhc2ggY29tcHV0YXRpb24gYW5kIHJldHVybnMgdGhlIGZpbmFsIGhhc2ggZGlnZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHRydW5jYXRlX3RvIFRoZSBtYXhpbXVtIG51bWJlciBvZiBieXRlcyB0byByZWNlaXZlLiBMZWF2ZSBhcyB1bmRlZmluZWQgb3IgMCB0byByZWNlaXZlIHRoZSBlbnRpcmUgZGlnZXN0LlxuICAgICAqL1xuICAgIGZpbmFsaXplKHRydW5jYXRlX3RvKSB7XG4gICAgICAgIHJldHVybiBiaW5kaW5nXzEuZGVmYXVsdC5oYXNoX2RpZ2VzdCh0aGlzLm5hdGl2ZV9oYW5kbGUoKSwgdHJ1bmNhdGVfdG8pO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihoYXNoX2hhbmRsZSkge1xuICAgICAgICBzdXBlcihoYXNoX2hhbmRsZSk7XG4gICAgfVxufVxuLyoqXG4gKiBPYmplY3QgdGhhdCBhbGxvd3MgZm9yIGNvbnRpbnVvdXMgTUQ1IGhhc2hpbmcgb2YgZGF0YS5cbiAqXG4gKiBAY2F0ZWdvcnkgQ3J5cHRvXG4gKi9cbmNsYXNzIE1kNUhhc2ggZXh0ZW5kcyBIYXNoIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoYmluZGluZ18xLmRlZmF1bHQuaGFzaF9tZDVfbmV3KCkpO1xuICAgIH1cbn1cbmV4cG9ydHMuTWQ1SGFzaCA9IE1kNUhhc2g7XG4vKipcbiAqIENvbXB1dGVzIGFuIE1ENSBoYXNoLiBVc2UgdGhpcyBpZiB5b3UgZG9uJ3QgbmVlZCB0byBzdHJlYW0gdGhlIGRhdGEgeW91J3JlIGhhc2hpbmcgYW5kIGNhbiBsb2FkIHRoZSBlbnRpcmUgaW5wdXRcbiAqIGludG8gbWVtb3J5LlxuICpcbiAqIEBwYXJhbSBkYXRhIFRoZSBkYXRhIHRvIGhhc2hcbiAqIEBwYXJhbSB0cnVuY2F0ZV90byBUaGUgbWF4aW11bSBudW1iZXIgb2YgYnl0ZXMgdG8gcmVjZWl2ZS4gTGVhdmUgYXMgdW5kZWZpbmVkIG9yIDAgdG8gcmVjZWl2ZSB0aGUgZW50aXJlIGRpZ2VzdC5cbiAqXG4gKiBAY2F0ZWdvcnkgQ3J5cHRvXG4gKi9cbmZ1bmN0aW9uIGhhc2hfbWQ1KGRhdGEsIHRydW5jYXRlX3RvKSB7XG4gICAgcmV0dXJuIGJpbmRpbmdfMS5kZWZhdWx0Lmhhc2hfbWQ1X2NvbXB1dGUoZGF0YSwgdHJ1bmNhdGVfdG8pO1xufVxuZXhwb3J0cy5oYXNoX21kNSA9IGhhc2hfbWQ1O1xuLyoqXG4gKiBPYmplY3QgdGhhdCBhbGxvd3MgZm9yIGNvbnRpbnVvdXMgU0hBMjU2IGhhc2hpbmcgb2YgZGF0YS5cbiAqXG4gKiBAY2F0ZWdvcnkgQ3J5cHRvXG4gKi9cbmNsYXNzIFNoYTI1Nkhhc2ggZXh0ZW5kcyBIYXNoIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoYmluZGluZ18xLmRlZmF1bHQuaGFzaF9zaGEyNTZfbmV3KCkpO1xuICAgIH1cbn1cbmV4cG9ydHMuU2hhMjU2SGFzaCA9IFNoYTI1Nkhhc2g7XG4vKipcbiAqIENvbXB1dGVzIGFuIFNIQTI1NiBoYXNoLiBVc2UgdGhpcyBpZiB5b3UgZG9uJ3QgbmVlZCB0byBzdHJlYW0gdGhlIGRhdGEgeW91J3JlIGhhc2hpbmcgYW5kIGNhbiBsb2FkIHRoZSBlbnRpcmUgaW5wdXRcbiAqIGludG8gbWVtb3J5LlxuICpcbiAqIEBwYXJhbSBkYXRhIFRoZSBkYXRhIHRvIGhhc2hcbiAqIEBwYXJhbSB0cnVuY2F0ZV90byBUaGUgbWF4aW11bSBudW1iZXIgb2YgYnl0ZXMgdG8gcmVjZWl2ZS4gTGVhdmUgYXMgdW5kZWZpbmVkIG9yIDAgdG8gcmVjZWl2ZSB0aGUgZW50aXJlIGRpZ2VzdC5cbiAqXG4gKiBAY2F0ZWdvcnkgQ3J5cHRvXG4gKi9cbmZ1bmN0aW9uIGhhc2hfc2hhMjU2KGRhdGEsIHRydW5jYXRlX3RvKSB7XG4gICAgcmV0dXJuIGJpbmRpbmdfMS5kZWZhdWx0Lmhhc2hfc2hhMjU2X2NvbXB1dGUoZGF0YSwgdHJ1bmNhdGVfdG8pO1xufVxuZXhwb3J0cy5oYXNoX3NoYTI1NiA9IGhhc2hfc2hhMjU2O1xuLyoqXG4gKiBPYmplY3QgdGhhdCBhbGxvd3MgZm9yIGNvbnRpbnVvdXMgU0hBMSBoYXNoaW5nIG9mIGRhdGEuXG4gKlxuICogQGNhdGVnb3J5IENyeXB0b1xuICovXG5jbGFzcyBTaGExSGFzaCBleHRlbmRzIEhhc2gge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihiaW5kaW5nXzEuZGVmYXVsdC5oYXNoX3NoYTFfbmV3KCkpO1xuICAgIH1cbn1cbmV4cG9ydHMuU2hhMUhhc2ggPSBTaGExSGFzaDtcbi8qKlxuICogQ29tcHV0ZXMgYW4gU0hBMSBoYXNoLiBVc2UgdGhpcyBpZiB5b3UgZG9uJ3QgbmVlZCB0byBzdHJlYW0gdGhlIGRhdGEgeW91J3JlIGhhc2hpbmcgYW5kIGNhbiBsb2FkIHRoZSBlbnRpcmUgaW5wdXRcbiAqIGludG8gbWVtb3J5LlxuICpcbiAqIEBwYXJhbSBkYXRhIFRoZSBkYXRhIHRvIGhhc2hcbiAqIEBwYXJhbSB0cnVuY2F0ZV90byBUaGUgbWF4aW11bSBudW1iZXIgb2YgYnl0ZXMgdG8gcmVjZWl2ZS4gTGVhdmUgYXMgdW5kZWZpbmVkIG9yIDAgdG8gcmVjZWl2ZSB0aGUgZW50aXJlIGRpZ2VzdC5cbiAqXG4gKiBAY2F0ZWdvcnkgQ3J5cHRvXG4gKi9cbmZ1bmN0aW9uIGhhc2hfc2hhMShkYXRhLCB0cnVuY2F0ZV90bykge1xuICAgIHJldHVybiBiaW5kaW5nXzEuZGVmYXVsdC5oYXNoX3NoYTFfY29tcHV0ZShkYXRhLCB0cnVuY2F0ZV90byk7XG59XG5leHBvcnRzLmhhc2hfc2hhMSA9IGhhc2hfc2hhMTtcbi8qKlxuICogT2JqZWN0IHRoYXQgYWxsb3dzIGZvciBjb250aW51b3VzIGhhc2hpbmcgb2YgZGF0YSB3aXRoIGFuIGhtYWMgc2VjcmV0LlxuICpcbiAqIEBjYXRlZ29yeSBDcnlwdG9cbiAqL1xuY2xhc3MgSG1hYyBleHRlbmRzIG5hdGl2ZV9yZXNvdXJjZV8xLk5hdGl2ZVJlc291cmNlIHtcbiAgICAvKipcbiAgICAgKiBIYXNoIGFkZGl0aW9uYWwgZGF0YS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkYXRhIGFkZGl0aW9uYWwgZGF0YSB0byBoYXNoXG4gICAgICovXG4gICAgdXBkYXRlKGRhdGEpIHtcbiAgICAgICAgYmluZGluZ18xLmRlZmF1bHQuaG1hY191cGRhdGUodGhpcy5uYXRpdmVfaGFuZGxlKCksIGRhdGEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wbGV0ZXMgdGhlIGhhc2ggY29tcHV0YXRpb24gYW5kIHJldHVybnMgdGhlIGZpbmFsIGhtYWMgZGlnZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHRydW5jYXRlX3RvIFRoZSBtYXhpbXVtIG51bWJlciBvZiBieXRlcyB0byByZWNlaXZlLiBMZWF2ZSBhcyB1bmRlZmluZWQgb3IgMCB0byByZWNlaXZlIHRoZSBlbnRpcmUgZGlnZXN0LlxuICAgICAqL1xuICAgIGZpbmFsaXplKHRydW5jYXRlX3RvKSB7XG4gICAgICAgIHJldHVybiBiaW5kaW5nXzEuZGVmYXVsdC5obWFjX2RpZ2VzdCh0aGlzLm5hdGl2ZV9oYW5kbGUoKSwgdHJ1bmNhdGVfdG8pO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihoYXNoX2hhbmRsZSkge1xuICAgICAgICBzdXBlcihoYXNoX2hhbmRsZSk7XG4gICAgfVxufVxuLyoqXG4gKiBPYmplY3QgdGhhdCBhbGxvd3MgZm9yIGNvbnRpbnVvdXMgU0hBMjU2IEhNQUMgaGFzaGluZyBvZiBkYXRhLlxuICpcbiAqIEBjYXRlZ29yeSBDcnlwdG9cbiAqL1xuY2xhc3MgU2hhMjU2SG1hYyBleHRlbmRzIEhtYWMge1xuICAgIGNvbnN0cnVjdG9yKHNlY3JldCkge1xuICAgICAgICBzdXBlcihiaW5kaW5nXzEuZGVmYXVsdC5obWFjX3NoYTI1Nl9uZXcoc2VjcmV0KSk7XG4gICAgfVxufVxuZXhwb3J0cy5TaGEyNTZIbWFjID0gU2hhMjU2SG1hYztcbi8qKlxuICogQ29tcHV0ZXMgYW4gU0hBMjU2IEhNQUMuIFVzZSB0aGlzIGlmIHlvdSBkb24ndCBuZWVkIHRvIHN0cmVhbSB0aGUgZGF0YSB5b3UncmUgaGFzaGluZyBhbmQgY2FuIGxvYWQgdGhlIGVudGlyZSBpbnB1dFxuICogaW50byBtZW1vcnkuXG4gKlxuICogQHBhcmFtIHNlY3JldCBUaGUga2V5IHRvIHVzZSBmb3IgdGhlIEhNQUMgcHJvY2Vzc1xuICogQHBhcmFtIGRhdGEgVGhlIGRhdGEgdG8gaGFzaFxuICogQHBhcmFtIHRydW5jYXRlX3RvIFRoZSBtYXhpbXVtIG51bWJlciBvZiBieXRlcyB0byByZWNlaXZlLiBMZWF2ZSBhcyB1bmRlZmluZWQgb3IgMCB0byByZWNlaXZlIHRoZSBlbnRpcmUgZGlnZXN0LlxuICpcbiAqIEBjYXRlZ29yeSBDcnlwdG9cbiAqL1xuZnVuY3Rpb24gaG1hY19zaGEyNTYoc2VjcmV0LCBkYXRhLCB0cnVuY2F0ZV90bykge1xuICAgIHJldHVybiBiaW5kaW5nXzEuZGVmYXVsdC5obWFjX3NoYTI1Nl9jb21wdXRlKHNlY3JldCwgZGF0YSwgdHJ1bmNhdGVfdG8pO1xufVxuZXhwb3J0cy5obWFjX3NoYTI1NiA9IGhtYWNfc2hhMjU2O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3J5cHRvLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/aws-crt/dist/native/crypto.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/aws-crt/dist/native/error.js":
/*!***************************************************!*\
  !*** ./node_modules/aws-crt/dist/native/error.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CrtError = void 0;\n/**\n * Library-specific error extension type\n *\n * @packageDocumentation\n * @module error\n * @mergeTarget\n */\nconst binding_1 = __importDefault(__webpack_require__(/*! ./binding */ \"(ssr)/./node_modules/aws-crt/dist/native/binding.js\"));\n/**\n * Represents an error encountered in native code. Can also be used to convert a numeric error code into\n * a human-readable string.\n *\n * @category System\n */\nclass CrtError extends Error {\n    /** @var error - The original error. Most often an error_code, but possibly some other context */\n    constructor(error) {\n        super(extract_message(error));\n        this.error = error;\n        this.error_code = extract_code(error);\n        this.error_name = extract_name(error);\n    }\n}\nexports.CrtError = CrtError;\nfunction extract_message(error) {\n    if (typeof error === 'number') {\n        return binding_1.default.error_code_to_string(error);\n    }\n    else if (error instanceof CrtError) {\n        return error.message;\n    }\n    return error.toString();\n}\nfunction extract_code(error) {\n    if (typeof error === 'number') {\n        return error;\n    }\n    else if (error instanceof CrtError) {\n        return error.error_code;\n    }\n    return undefined;\n}\nfunction extract_name(error) {\n    if (typeof error === 'number') {\n        return binding_1.default.error_code_to_name(error);\n    }\n    else if (error instanceof CrtError) {\n        return error.error_name;\n    }\n    return undefined;\n}\n//# sourceMappingURL=error.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXdzLWNydC9kaXN0L25hdGl2ZS9lcnJvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLG1CQUFPLENBQUMsc0VBQVc7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGF5d2luZC8uL25vZGVfbW9kdWxlcy9hd3MtY3J0L2Rpc3QvbmF0aXZlL2Vycm9yLmpzPzA4ZDYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMC5cbiAqL1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DcnRFcnJvciA9IHZvaWQgMDtcbi8qKlxuICogTGlicmFyeS1zcGVjaWZpYyBlcnJvciBleHRlbnNpb24gdHlwZVxuICpcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBlcnJvclxuICogQG1lcmdlVGFyZ2V0XG4gKi9cbmNvbnN0IGJpbmRpbmdfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9iaW5kaW5nXCIpKTtcbi8qKlxuICogUmVwcmVzZW50cyBhbiBlcnJvciBlbmNvdW50ZXJlZCBpbiBuYXRpdmUgY29kZS4gQ2FuIGFsc28gYmUgdXNlZCB0byBjb252ZXJ0IGEgbnVtZXJpYyBlcnJvciBjb2RlIGludG9cbiAqIGEgaHVtYW4tcmVhZGFibGUgc3RyaW5nLlxuICpcbiAqIEBjYXRlZ29yeSBTeXN0ZW1cbiAqL1xuY2xhc3MgQ3J0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgLyoqIEB2YXIgZXJyb3IgLSBUaGUgb3JpZ2luYWwgZXJyb3IuIE1vc3Qgb2Z0ZW4gYW4gZXJyb3JfY29kZSwgYnV0IHBvc3NpYmx5IHNvbWUgb3RoZXIgY29udGV4dCAqL1xuICAgIGNvbnN0cnVjdG9yKGVycm9yKSB7XG4gICAgICAgIHN1cGVyKGV4dHJhY3RfbWVzc2FnZShlcnJvcikpO1xuICAgICAgICB0aGlzLmVycm9yID0gZXJyb3I7XG4gICAgICAgIHRoaXMuZXJyb3JfY29kZSA9IGV4dHJhY3RfY29kZShlcnJvcik7XG4gICAgICAgIHRoaXMuZXJyb3JfbmFtZSA9IGV4dHJhY3RfbmFtZShlcnJvcik7XG4gICAgfVxufVxuZXhwb3J0cy5DcnRFcnJvciA9IENydEVycm9yO1xuZnVuY3Rpb24gZXh0cmFjdF9tZXNzYWdlKGVycm9yKSB7XG4gICAgaWYgKHR5cGVvZiBlcnJvciA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIGJpbmRpbmdfMS5kZWZhdWx0LmVycm9yX2NvZGVfdG9fc3RyaW5nKGVycm9yKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZXJyb3IgaW5zdGFuY2VvZiBDcnRFcnJvcikge1xuICAgICAgICByZXR1cm4gZXJyb3IubWVzc2FnZTtcbiAgICB9XG4gICAgcmV0dXJuIGVycm9yLnRvU3RyaW5nKCk7XG59XG5mdW5jdGlvbiBleHRyYWN0X2NvZGUoZXJyb3IpIHtcbiAgICBpZiAodHlwZW9mIGVycm9yID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgfVxuICAgIGVsc2UgaWYgKGVycm9yIGluc3RhbmNlb2YgQ3J0RXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yLmVycm9yX2NvZGU7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBleHRyYWN0X25hbWUoZXJyb3IpIHtcbiAgICBpZiAodHlwZW9mIGVycm9yID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gYmluZGluZ18xLmRlZmF1bHQuZXJyb3JfY29kZV90b19uYW1lKGVycm9yKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZXJyb3IgaW5zdGFuY2VvZiBDcnRFcnJvcikge1xuICAgICAgICByZXR1cm4gZXJyb3IuZXJyb3JfbmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/aws-crt/dist/native/error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/aws-crt/dist/native/eventstream.js":
/*!*********************************************************!*\
  !*** ./node_modules/aws-crt/dist/native/eventstream.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ClientStream = exports.ClientConnection = exports.MessageType = exports.MessageFlags = exports.Header = exports.HeaderType = void 0;\nconst native_resource_1 = __webpack_require__(/*! ./native_resource */ \"(ssr)/./node_modules/aws-crt/dist/native/native_resource.js\");\nconst event_1 = __webpack_require__(/*! ../common/event */ \"(ssr)/./node_modules/aws-crt/dist/common/event.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/aws-crt/dist/native/error.js\");\nconst io = __importStar(__webpack_require__(/*! ./io */ \"(ssr)/./node_modules/aws-crt/dist/native/io.js\"));\nconst eventstream_utils = __importStar(__webpack_require__(/*! ./eventstream_utils */ \"(ssr)/./node_modules/aws-crt/dist/native/eventstream_utils.js\"));\nconst promise = __importStar(__webpack_require__(/*! ../common/promise */ \"(ssr)/./node_modules/aws-crt/dist/common/promise.js\"));\nconst binding_1 = __importDefault(__webpack_require__(/*! ./binding */ \"(ssr)/./node_modules/aws-crt/dist/native/binding.js\"));\n/**\n * Node.js specific eventstream rpc native bindings\n *\n * @packageDocumentation\n * @module eventstream\n * @mergeTarget\n *\n */\n/**\n * Supported types for the value within an eventstream message header\n */\nvar HeaderType;\n(function (HeaderType) {\n    /** Value is True. No actual value is transmitted on the wire. */\n    HeaderType[HeaderType[\"BooleanTrue\"] = 0] = \"BooleanTrue\";\n    /** Value is True. No actual value is transmitted on the wire. */\n    HeaderType[HeaderType[\"BooleanFalse\"] = 1] = \"BooleanFalse\";\n    /** Value is signed 8-bit int. */\n    HeaderType[HeaderType[\"Byte\"] = 2] = \"Byte\";\n    /** Value is signed 16-bit int. */\n    HeaderType[HeaderType[\"Int16\"] = 3] = \"Int16\";\n    /** Value is signed 32-bit int. */\n    HeaderType[HeaderType[\"Int32\"] = 4] = \"Int32\";\n    /** Value is signed 64-bit int. */\n    HeaderType[HeaderType[\"Int64\"] = 5] = \"Int64\";\n    /** Value is raw bytes. */\n    HeaderType[HeaderType[\"ByteBuffer\"] = 6] = \"ByteBuffer\";\n    /** Value is a str.  Transmitted on the wire as utf-8. */\n    HeaderType[HeaderType[\"String\"] = 7] = \"String\";\n    /** Value is a posix timestamp (seconds since Unix epoch).  Transmitted on the wire as a 64-bit int. */\n    HeaderType[HeaderType[\"Timestamp\"] = 8] = \"Timestamp\";\n    /** Value is a UUID. Transmitted on the wire as 16 bytes. */\n    HeaderType[HeaderType[\"UUID\"] = 9] = \"UUID\";\n})(HeaderType = exports.HeaderType || (exports.HeaderType = {}));\nconst AWS_MAXIMUM_EVENT_STREAM_HEADER_NAME_LENGTH = 127;\n/**\n * Wrapper class for event stream message headers.  Similar to HTTP, a header is a name-value pair.  Unlike HTTP, the\n * value's wire format varies depending on a type annotation.  We provide static builder functions to help\n * ensure correct type agreement (type annotation matches actual value) at construction time.  Getting the header\n * value requires the use of a safe conversion function.\n */\nclass Header {\n    /** @internal */\n    constructor(name, type, value) {\n        this.name = name;\n        this.type = type;\n        this.value = value;\n    }\n    static validateHeaderName(name) {\n        if (name.length == 0 || name.length > AWS_MAXIMUM_EVENT_STREAM_HEADER_NAME_LENGTH) {\n            throw new error_1.CrtError(`Event stream header name (${name}) is not valid`);\n        }\n    }\n    /**\n     * Create a new boolean-valued message header\n     *\n     * @param name name of the header\n     * @param value value of the header\n     */\n    static newBoolean(name, value) {\n        Header.validateHeaderName(name);\n        if (value) {\n            return new Header(name, HeaderType.BooleanTrue);\n        }\n        else {\n            return new Header(name, HeaderType.BooleanFalse);\n        }\n    }\n    /**\n     * Create a new byte-valued message header\n     *\n     * @param name name of the header\n     * @param value value of the header\n     */\n    static newByte(name, value) {\n        Header.validateHeaderName(name);\n        if (value >= eventstream_utils.MIN_INT8 && value <= eventstream_utils.MAX_INT8 && Number.isSafeInteger(value)) {\n            return new Header(name, HeaderType.Byte, value);\n        }\n        throw new error_1.CrtError(`Illegal value for eventstream byte-valued header: ${value}`);\n    }\n    /**\n     * Create a new 16-bit-integer-valued message header\n     *\n     * @param name name of the header\n     * @param value value of the header\n     */\n    static newInt16(name, value) {\n        Header.validateHeaderName(name);\n        if (value >= eventstream_utils.MIN_INT16 && value <= eventstream_utils.MAX_INT16 && Number.isSafeInteger(value)) {\n            return new Header(name, HeaderType.Int16, value);\n        }\n        throw new error_1.CrtError(`Illegal value for eventstream int16-valued header: ${value}`);\n    }\n    /**\n     * Create a new 32-bit-integer-valued message header\n     *\n     * @param name name of the header\n     * @param value value of the header\n     */\n    static newInt32(name, value) {\n        Header.validateHeaderName(name);\n        if (value >= eventstream_utils.MIN_INT32 && value <= eventstream_utils.MAX_INT32 && Number.isSafeInteger(value)) {\n            return new Header(name, HeaderType.Int32, value);\n        }\n        throw new error_1.CrtError(`Illegal value for eventstream int32-valued header: ${value}`);\n    }\n    /**\n     * Create a new 64-bit-integer-valued message header.  number cannot represent a full 64-bit integer range but\n     * its usage is so common that this exists for convenience.  Internally, we always track 64 bit integers as\n     * bigints.\n     *\n     * @param name name of the header\n     * @param value value of the header\n     */\n    static newInt64FromNumber(name, value) {\n        Header.validateHeaderName(name);\n        if (Number.isSafeInteger(value)) {\n            return new Header(name, HeaderType.Int64, eventstream_utils.marshalInt64BigintAsBuffer(BigInt(value)));\n        }\n        throw new error_1.CrtError(`Illegal value for eventstream int64-valued header: ${value}`);\n    }\n    /**\n     * Create a new 64-bit-integer-valued message header from a big integer.\n     *\n     * @param name name of the header\n     * @param value value of the header\n     */\n    static newInt64FromBigint(name, value) {\n        Header.validateHeaderName(name);\n        if (value >= eventstream_utils.MIN_INT64 && value <= eventstream_utils.MAX_INT64) {\n            return new Header(name, HeaderType.Int64, eventstream_utils.marshalInt64BigintAsBuffer(value));\n        }\n        throw new error_1.CrtError(`Illegal value for eventstream int64-valued header: ${value}`);\n    }\n    /**\n     * Create a new byte-buffer-valued message header\n     *\n     * @param name name of the header\n     * @param value value of the header\n     */\n    static newByteBuffer(name, value) {\n        Header.validateHeaderName(name);\n        return new Header(name, HeaderType.ByteBuffer, value);\n    }\n    /**\n     * Create a new string-valued message header\n     *\n     * @param name name of the header\n     * @param value value of the header\n     */\n    static newString(name, value) {\n        Header.validateHeaderName(name);\n        return new Header(name, HeaderType.String, value);\n    }\n    /**\n     * Create a new timestamp-valued message header from an integral value in seconds since epoch.\n     *\n     * @param name name of the header\n     * @param value value of the header\n     */\n    static newTimeStampFromSecondsSinceEpoch(name, secondsSinceEpoch) {\n        Header.validateHeaderName(name);\n        if (Number.isSafeInteger(secondsSinceEpoch) && secondsSinceEpoch >= 0) {\n            return new Header(name, HeaderType.Timestamp, secondsSinceEpoch);\n        }\n        throw new error_1.CrtError(`Illegal value for eventstream timestamp-valued header: ${secondsSinceEpoch}`);\n    }\n    /**\n     * Create a new timestamp-valued message header from a date.\n     *\n     * @param name name of the header\n     * @param value value of the header\n     */\n    static newTimeStampFromDate(name, date) {\n        Header.validateHeaderName(name);\n        const secondsSinceEpoch = date.getTime();\n        if (Number.isSafeInteger(secondsSinceEpoch)) {\n            return new Header(name, HeaderType.Timestamp, secondsSinceEpoch);\n        }\n        throw new error_1.CrtError(`Illegal value for eventstream timestamp-valued header: ${date}`);\n    }\n    /**\n     * Create a new UUID-valued message header.\n     * WIP\n     *\n     * @param name name of the header\n     * @param value value of the header\n     */\n    static newUUID(name, value) {\n        Header.validateHeaderName(name);\n        if (value.byteLength == 16) {\n            return new Header(name, HeaderType.UUID, value);\n        }\n        throw new error_1.CrtError(`Illegal value for eventstream uuid-valued header: ${value}`);\n    }\n    toValue(type) {\n        if (type != this.type) {\n            throw new error_1.CrtError(`Header of type (${this.type}) cannot be converted to type (${type})`);\n        }\n        return this.value;\n    }\n    /**\n     * All conversion functions require the header's type to be appropriately matching.  There are no error-prone\n     * flexible conversion helpers.\n     */\n    /**\n     * Returns a boolean header's value.\n     */\n    asBoolean() {\n        switch (this.type) {\n            case HeaderType.BooleanFalse:\n                return false;\n            case HeaderType.BooleanTrue:\n                return true;\n            default:\n                throw new error_1.CrtError(`Header of type (${this.type}) cannot be converted to type (boolean)`);\n        }\n    }\n    /**\n     * Returns a byte header's value.\n     */\n    asByte() {\n        return this.toValue(HeaderType.Byte);\n    }\n    /**\n     * Returns a 16-bit integer header's value.\n     */\n    asInt16() {\n        return this.toValue(HeaderType.Int16);\n    }\n    /**\n     * Returns a 32-bit integer header's value.\n     */\n    asInt32() {\n        return this.toValue(HeaderType.Int32);\n    }\n    /**\n     * Returns a 64-bit integer header's value.\n     */\n    asInt64() {\n        return eventstream_utils.unmarshalInt64BigintFromBuffer(this.toValue(HeaderType.Int64));\n    }\n    /**\n     * Returns a byte buffer header's value.\n     */\n    asByteBuffer() {\n        return this.toValue(HeaderType.ByteBuffer);\n    }\n    /**\n     * Returns a string header's value.\n     */\n    asString() {\n        return this.toValue(HeaderType.String);\n    }\n    /**\n     * Returns a timestamp header's value (as seconds since epoch).\n     */\n    asTimestamp() {\n        return this.toValue(HeaderType.Timestamp);\n    }\n    /**\n     * Returns a UUID header's value.\n     */\n    asUUID() {\n        return this.toValue(HeaderType.UUID);\n    }\n}\nexports.Header = Header;\n/**\n * Flags for messages in the event-stream RPC protocol.\n *\n * Flags may be XORed together.\n * Not all flags can be used with all message types, consult documentation.\n */\nvar MessageFlags;\n(function (MessageFlags) {\n    /** Nothing */\n    MessageFlags[MessageFlags[\"None\"] = 0] = \"None\";\n    /**\n     * Connection accepted\n     *\n     * If this flag is absent from a {@link MessageType.ConnectAck ConnectAck} message, the connection has been\n     * rejected.\n     */\n    MessageFlags[MessageFlags[\"ConnectionAccepted\"] = 1] = \"ConnectionAccepted\";\n    /**\n     * Terminate stream\n     *\n     * This message may be used with any message type.\n     * The sender will close their connection after the message is written to the wire.\n     * The receiver will close their connection after delivering the message to the user.\n     */\n    MessageFlags[MessageFlags[\"TerminateStream\"] = 2] = \"TerminateStream\";\n})(MessageFlags = exports.MessageFlags || (exports.MessageFlags = {}));\n/**\n *\n * Types of messages in the event-stream RPC protocol.\n * The {@link MessageType.ApplicationMessage Application} and {@link MessageType.ApplicationError Error} message types\n * may only be sent on streams, and will never arrive as a protocol message (stream-id 0).\n *\n * For all other message types, they may only be sent as protocol messages\n * (stream-id 0), and will never arrive as a stream message.\n *\n * Different message types expect specific headers and flags, consult documentation.\n */\nvar MessageType;\n(function (MessageType) {\n    /** Application message */\n    MessageType[MessageType[\"ApplicationMessage\"] = 0] = \"ApplicationMessage\";\n    /** Application error */\n    MessageType[MessageType[\"ApplicationError\"] = 1] = \"ApplicationError\";\n    /** Ping */\n    MessageType[MessageType[\"Ping\"] = 2] = \"Ping\";\n    /** Ping response */\n    MessageType[MessageType[\"PingResponse\"] = 3] = \"PingResponse\";\n    /** Connect */\n    MessageType[MessageType[\"Connect\"] = 4] = \"Connect\";\n    /**\n     * Connect acknowledgement\n     *\n     * If the {@link MessageFlags.ConnectionAccepted ConnectionAccepted} flag is not present, the connection has been rejected.\n     */\n    MessageType[MessageType[\"ConnectAck\"] = 5] = \"ConnectAck\";\n    /**\n     * Protocol error\n     */\n    MessageType[MessageType[\"ProtocolError\"] = 6] = \"ProtocolError\";\n    /**\n     * Internal error\n     */\n    MessageType[MessageType[\"InternalError\"] = 7] = \"InternalError\";\n})(MessageType = exports.MessageType || (exports.MessageType = {}));\n/** @internal */\nfunction mapPodHeadersToJSHeaders(headers) {\n    return Array.from(headers, (header) => {\n        return new Header(header.name, header.type, header.value);\n    });\n}\n/** @internal */\nfunction mapPodMessageToJSMessage(message) {\n    let jsMessage = {\n        type: message.type,\n        flags: message.flags,\n        payload: message.payload\n    };\n    if (message.headers) {\n        jsMessage.headers = mapPodHeadersToJSHeaders(message.headers);\n    }\n    return jsMessage;\n}\n/**\n * @internal\n *\n * While not strictly necessary, the single-threaded nature of JS execution allows us to easily apply some\n * rigid constraints to the public API calls of our event stream objects.  This in turn reduces the complexity of the\n * binding cases we need to consider.\n *\n * This state value is the primary means by which we add and enforce these constraints to connection objects.\n *\n * Constraints enforced in the managed binding:\n *\n *  (1) close() may only be called once.  Once it has been called, nothing else may be called.\n *  (2) newStream() and sendMessage() may only be called after successful connection establishment and before the\n *      connection has been closed.\n *  (3) connect() may only be called once.  Combined with (1) and (2), this means that if connect() is called, it must\n *      be the first thing called.\n */\nvar ClientConnectionState;\n(function (ClientConnectionState) {\n    ClientConnectionState[ClientConnectionState[\"None\"] = 0] = \"None\";\n    ClientConnectionState[ClientConnectionState[\"Connecting\"] = 1] = \"Connecting\";\n    ClientConnectionState[ClientConnectionState[\"Connected\"] = 2] = \"Connected\";\n    ClientConnectionState[ClientConnectionState[\"Disconnected\"] = 3] = \"Disconnected\";\n    ClientConnectionState[ClientConnectionState[\"Closed\"] = 4] = \"Closed\";\n})(ClientConnectionState || (ClientConnectionState = {}));\n/**\n * Wrapper for a network connection that fulfills the client-side event stream RPC protocol contract.\n *\n * The user **must** call close() on a connection once finished with it.  Once close() has been called, no more events\n * will be emitted and all public API invocations will trigger an exception.\n */\nclass ClientConnection extends (0, native_resource_1.NativeResourceMixin)(event_1.BufferedEventEmitter) {\n    /**\n     * Configures and creates a new ClientConnection instance\n     *\n     * @param config configuration options for the event stream connection\n     */\n    constructor(config) {\n        if (config === undefined) {\n            throw new error_1.CrtError(\"Invalid configuration passed to eventstream ClientConnection constructor\");\n        }\n        super();\n        this.state = ClientConnectionState.None;\n        this._super(binding_1.default.event_stream_client_connection_new(this, config, (connection, errorCode) => { ClientConnection._s_on_disconnect(connection, errorCode); }, (connection, message) => { ClientConnection._s_on_protocol_message(connection, message); }, config.socketOptions ? config.socketOptions.native_handle() : null, config.tlsCtx ? config.tlsCtx.native_handle() : null));\n    }\n    /**\n     * Shuts down the connection (if active) and begins the process to release native resources associated with it by\n     * having the native binding release the only reference to the extern object representing the connection.  Once\n     * close() has been called, no more events will be emitted and all public API invocations will trigger an exception.\n     *\n     * Ultimately, the native resources will not be released until the connection has fully shut down and that\n     * shutdown event has reached the libuv event loop.\n     *\n     * This function **must** be called for every ClientConnection instance or native resources will leak.\n     */\n    close() {\n        if (this.state != ClientConnectionState.Closed) {\n            this.state = ClientConnectionState.Closed;\n            // invoke native binding close\n            binding_1.default.event_stream_client_connection_close(this.native_handle());\n        }\n    }\n    /**\n     * Attempts to open a network connection to the configured remote endpoint.  Returned promise will be fulfilled if\n     * the transport-level connection is successfully established, and rejected otherwise.\n     *\n     * connect() may only be called once.\n     */\n    connect(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let cleanupCancelListener = undefined;\n            let connectPromise = new Promise((resolve, reject) => {\n                if (!options) {\n                    reject(new error_1.CrtError(\"Invalid options passed to event stream ClientConnection.connect\"));\n                    return;\n                }\n                if (this.state != ClientConnectionState.None) {\n                    reject(new error_1.CrtError(`Event stream connection in a state (${this.state}) where connect() is not allowed.`));\n                    return;\n                }\n                this.state = ClientConnectionState.Connecting;\n                if (options.cancelController) {\n                    let cancel = () => {\n                        reject(new error_1.CrtError(`Event stream connection connect() cancelled by external request.`));\n                        setImmediate(() => { this.close(); });\n                    };\n                    cleanupCancelListener = options.cancelController.addListener(cancel);\n                    if (!cleanupCancelListener) {\n                        return;\n                    }\n                }\n                function curriedPromiseCallback(connection, errorCode) {\n                    return ClientConnection._s_on_connection_setup(resolve, reject, connection, errorCode);\n                }\n                try {\n                    binding_1.default.event_stream_client_connection_connect(this.native_handle(), curriedPromiseCallback);\n                }\n                catch (e) {\n                    this.state = ClientConnectionState.Disconnected;\n                    reject(e);\n                }\n            });\n            return promise.makeSelfCleaningPromise(connectPromise, cleanupCancelListener);\n        });\n    }\n    /**\n     * Attempts to send an event stream protocol message over an open connection.\n     *\n     * @param options configuration -- including the message itself -- for sending a protocol message\n     *\n     * Returns a promise that will be fulfilled when the message is successfully flushed to the wire, and rejected if\n     * an error occurs prior to that point.\n     */\n    sendProtocolMessage(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let cleanupCancelListener = undefined;\n            let sendProtocolMessagePromise = new Promise((resolve, reject) => {\n                try {\n                    if (!options) {\n                        reject(new error_1.CrtError(\"Invalid options passed to event stream ClientConnection.sendProtocolMessage\"));\n                        return;\n                    }\n                    if (!this.isConnected()) {\n                        reject(new error_1.CrtError(`Event stream connection in a state (${this.state}) where sending protocol messages is not allowed.`));\n                        return;\n                    }\n                    if (options.cancelController) {\n                        let cancel = () => {\n                            reject(new error_1.CrtError(`Event stream connection sendProtocolMessage() cancelled by external request.`));\n                            setImmediate(() => { this.close(); });\n                        };\n                        cleanupCancelListener = options.cancelController.addListener(cancel);\n                        if (!cleanupCancelListener) {\n                            return;\n                        }\n                    }\n                    // invoke native binding send message;\n                    function curriedPromiseCallback(errorCode) {\n                        return ClientConnection._s_on_connection_send_protocol_message_completion(resolve, reject, errorCode);\n                    }\n                    // invoke native binding send message;\n                    binding_1.default.event_stream_client_connection_send_protocol_message(this.native_handle(), options, curriedPromiseCallback);\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n            return promise.makeSelfCleaningPromise(sendProtocolMessagePromise, cleanupCancelListener);\n        });\n    }\n    /**\n     * Returns true if the connection is currently open and ready-to-use, false otherwise.\n     *\n     * Internal note: Our notion of \"connected\" is intentionally not an invocation of\n     * aws_event_stream_rpc_client_connection_is_open() (whose status is an out-of-sync race condition vs. our\n     * well-defined client state)\n     */\n    isConnected() {\n        return this.state == ClientConnectionState.Connected;\n    }\n    /**\n     * Creates a new stream within the connection.\n     */\n    newStream() {\n        if (!this.isConnected()) {\n            throw new error_1.CrtError(`Event stream connection in a state (${this.state}) where creating new streams is forbidden.`);\n        }\n        return new ClientStream(this);\n    }\n    on(event, listener) {\n        super.on(event, listener);\n        return this;\n    }\n    static _s_on_connection_setup(resolve, reject, connection, errorCode) {\n        if (errorCode == 0 && connection.state == ClientConnectionState.Connecting) {\n            connection.state = ClientConnectionState.Connected;\n            resolve();\n        }\n        else {\n            if (connection.state != ClientConnectionState.Closed) {\n                connection.state = ClientConnectionState.Disconnected;\n            }\n            reject(io.error_code_to_string(errorCode));\n        }\n    }\n    static _s_on_disconnect(connection, errorCode) {\n        if (connection.state != ClientConnectionState.Closed) {\n            connection.state = ClientConnectionState.Disconnected;\n        }\n        process.nextTick(() => {\n            connection.emit('disconnection', { errorCode: errorCode });\n        });\n    }\n    static _s_on_protocol_message(connection, message) {\n        process.nextTick(() => {\n            connection.emit('protocolMessage', { message: mapPodMessageToJSMessage(message) });\n        });\n    }\n    static _s_on_connection_send_protocol_message_completion(resolve, reject, errorCode) {\n        if (errorCode == 0) {\n            resolve();\n        }\n        else {\n            reject(io.error_code_to_string(errorCode));\n        }\n    }\n}\nexports.ClientConnection = ClientConnection;\n/**\n * Event emitted when the connection is closed for any reason.\n *\n * Listener type: {@link DisconnectionListener}\n *\n * @event\n */\nClientConnection.DISCONNECTION = 'disconnection';\n/**\n * Event emitted when a protocol message is received from the remote endpoint\n *\n * Listener type: {@link MessageListener}\n *\n * @event\n */\nClientConnection.PROTOCOL_MESSAGE = 'protocolMessage';\n/**\n * @internal\n *\n * While not strictly necessary, the single-threaded nature of JS execution allows us to easily apply some\n * rigid constraints to the public API calls of our event stream objects.  This in turn reduces the complexity of the\n * binding cases we need to consider.\n *\n * This state value is the primary means by which we add and enforce these constraints to stream objects.\n *\n * Constraints enforced in the managed binding:\n *\n *  (1) close() may only be called once.  Once it has been called, nothing else may be called.\n *  (2) sendMessage() may only be called after successful stream activation and before the\n *      stream has been closed.\n *  (3) activate() may only be called once.  Combined with (1) and (2), this means that if activate() is called, it must\n *      be the first thing called.\n */\nvar ClientStreamState;\n(function (ClientStreamState) {\n    ClientStreamState[ClientStreamState[\"None\"] = 0] = \"None\";\n    ClientStreamState[ClientStreamState[\"Activating\"] = 1] = \"Activating\";\n    ClientStreamState[ClientStreamState[\"Activated\"] = 2] = \"Activated\";\n    ClientStreamState[ClientStreamState[\"Ended\"] = 3] = \"Ended\";\n    ClientStreamState[ClientStreamState[\"Closed\"] = 4] = \"Closed\";\n})(ClientStreamState || (ClientStreamState = {}));\n/**\n * Wrapper for an individual stream within an eventstream connection.\n *\n * The user **must** call close() on a stream once finished with it.  Once close() has been called, no more events\n * will be emitted and all public API invocations will trigger an exception.\n */\nclass ClientStream extends (0, native_resource_1.NativeResourceMixin)(event_1.BufferedEventEmitter) {\n    constructor(connection) {\n        super();\n        this._super(binding_1.default.event_stream_client_stream_new(this, connection.native_handle(), (stream) => { ClientStream._s_on_stream_ended(stream); }, (stream, message) => { ClientStream._s_on_stream_message(stream, message); }));\n        this.state = ClientStreamState.None;\n    }\n    /**\n     * Shuts down the stream (if active) and begins the process to release native resources associated with it by\n     * having the native binding release the only reference to the extern object representing the stream.  Once\n     * close() has been called, no more events will be emitted and all public API invocations will trigger an exception.\n     *\n     * Ultimately, the native resources will not be released until the native stream has fully shut down and that\n     * shutdown event has reached the libuv event loop.\n     *\n     * This function **must** be called for every ClientStream instance or native resources will leak.\n     */\n    close() {\n        if (this.state != ClientStreamState.Closed) {\n            this.state = ClientStreamState.Closed;\n            binding_1.default.event_stream_client_stream_close(this.native_handle());\n        }\n    }\n    /**\n     * Activates the stream, allowing it to start sending and receiving messages.  The promise completes when\n     * the activation message has been written to the wire.\n     *\n     * activate() may only be called once.\n     *\n     * @param options -- configuration data for stream activation, including operation name and initial message\n     */\n    activate(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let cleanupCancelListener = undefined;\n            let activatePromise = new Promise((resolve, reject) => {\n                try {\n                    if (this.state != ClientStreamState.None) {\n                        reject(new error_1.CrtError(`Event stream in a state (${this.state}) where activation is not allowed.`));\n                        return;\n                    }\n                    /*\n                     * Intentionally check this after the state check (so closed streams do not reach here).\n                     * Intentionally mutate state the same way a failed synchronous call to native activate does.\n                     */\n                    if (options === undefined) {\n                        this.state = ClientStreamState.Ended;\n                        reject(new error_1.CrtError(\"Invalid options passed to ClientStream.activate\"));\n                        return;\n                    }\n                    this.state = ClientStreamState.Activating;\n                    if (options.cancelController) {\n                        let cancel = () => {\n                            reject(new error_1.CrtError(`Event stream activate() cancelled by external request.`));\n                            setImmediate(() => { this.close(); });\n                        };\n                        cleanupCancelListener = options.cancelController.addListener(cancel);\n                        if (!cleanupCancelListener) {\n                            return;\n                        }\n                    }\n                    function curriedPromiseCallback(stream, errorCode) {\n                        return ClientStream._s_on_stream_activated(resolve, reject, stream, errorCode);\n                    }\n                    binding_1.default.event_stream_client_stream_activate(this.native_handle(), options, curriedPromiseCallback);\n                }\n                catch (e) {\n                    this.state = ClientStreamState.Ended;\n                    reject(e);\n                }\n            });\n            return promise.makeSelfCleaningPromise(activatePromise, cleanupCancelListener);\n        });\n    }\n    /**\n     * Attempts to send an event stream message.\n     *\n     * @param options configuration -- including the message itself -- for sending a message\n     *\n     * Returns a promise that will be fulfilled when the message is successfully flushed to the wire, and rejected if\n     * an error occurs prior to that point.\n     */\n    sendMessage(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let cleanupCancelListener = undefined;\n            let sendMessagePromise = new Promise((resolve, reject) => {\n                try {\n                    if (!options) {\n                        reject(new error_1.CrtError(\"Invalid options passed to ClientStream.sendMessage\"));\n                        return;\n                    }\n                    if (this.state != ClientStreamState.Activated) {\n                        reject(new error_1.CrtError(`Event stream in a state (${this.state}) where sending messages is not allowed.`));\n                        return;\n                    }\n                    if (options.cancelController) {\n                        let cancel = () => {\n                            reject(new error_1.CrtError(`Event stream sendMessage() cancelled by external request.`));\n                            setImmediate(() => { this.close(); });\n                        };\n                        cleanupCancelListener = options.cancelController.addListener(cancel);\n                        if (!cleanupCancelListener) {\n                            return;\n                        }\n                    }\n                    function curriedPromiseCallback(errorCode) {\n                        return ClientStream._s_on_stream_send_message_completion(resolve, reject, errorCode);\n                    }\n                    // invoke native binding send message;\n                    binding_1.default.event_stream_client_stream_send_message(this.native_handle(), options, curriedPromiseCallback);\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n            return promise.makeSelfCleaningPromise(sendMessagePromise, cleanupCancelListener);\n        });\n    }\n    /**\n     * Returns true if the stream is currently active and ready-to-use, false otherwise.\n     */\n    isActive() {\n        return this.state == ClientStreamState.Activated;\n    }\n    on(event, listener) {\n        super.on(event, listener);\n        return this;\n    }\n    static _s_on_stream_activated(resolve, reject, stream, errorCode) {\n        if (errorCode == 0 && stream.state == ClientStreamState.Activating) {\n            stream.state = ClientStreamState.Activated;\n            resolve();\n        }\n        else {\n            if (stream.state != ClientStreamState.Closed) {\n                stream.state = ClientStreamState.Ended;\n            }\n            reject(io.error_code_to_string(errorCode));\n        }\n    }\n    static _s_on_stream_send_message_completion(resolve, reject, errorCode) {\n        if (errorCode == 0) {\n            resolve();\n        }\n        else {\n            reject(io.error_code_to_string(errorCode));\n        }\n    }\n    static _s_on_stream_ended(stream) {\n        process.nextTick(() => {\n            stream.emit(ClientStream.ENDED, {});\n        });\n    }\n    static _s_on_stream_message(stream, message) {\n        process.nextTick(() => {\n            stream.emit(ClientStream.MESSAGE, { message: mapPodMessageToJSMessage(message) });\n        });\n    }\n}\nexports.ClientStream = ClientStream;\n/**\n * Event emitted when the stream is shut down for any reason.\n *\n * Listener type: {@link StreamEndedListener}\n *\n * @event\n */\nClientStream.ENDED = 'ended';\n/**\n * Event emitted when a stream message is received from the remote endpoint\n *\n * Listener type: {@link MessageListener}\n *\n * @event\n */\nClientStream.MESSAGE = 'message';\n//# sourceMappingURL=eventstream.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/aws-crt/dist/native/eventstream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/aws-crt/dist/native/eventstream_utils.js":
/*!***************************************************************!*\
  !*** ./node_modules/aws-crt/dist/native/eventstream_utils.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.unmarshalInt64BigintFromBuffer = exports.marshalInt64BigintAsBuffer = exports.MIN_INT64 = exports.MAX_INT64 = exports.MIN_INT32 = exports.MAX_INT32 = exports.MIN_INT16 = exports.MAX_INT16 = exports.MIN_INT8 = exports.MAX_INT8 = void 0;\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/aws-crt/dist/native/error.js\");\n/*\n* Limits for header value validation\n*/\nexports.MAX_INT8 = 127;\nexports.MIN_INT8 = -128;\nexports.MAX_INT16 = 32767;\nexports.MIN_INT16 = -32768;\nexports.MAX_INT32 = 2147483647;\nexports.MIN_INT32 = -2147483648;\nexports.MAX_INT64 = BigInt(\"9223372036854775807\");\nexports.MIN_INT64 = BigInt(\"-9223372036854775808\");\nconst MAX_UINT8_AS_BIGINT = BigInt(\"256\");\n/** @internal */\nfunction marshalInt64BigintAsBuffer(value) {\n    if (value < exports.MIN_INT64 || value > exports.MAX_INT64) {\n        throw new error_1.CrtError(\"marshalInt64BigintAsBuffer expects a value that can fit in 8 bytes\");\n    }\n    let buffer = new Uint8Array(8);\n    /* encode the integer as a twos-complement byte sequence */\n    if (value < 0) {\n        value = -value - BigInt(1);\n        for (let i = 0; i < 8; ++i) {\n            buffer[i] = 255 - Number(value % MAX_UINT8_AS_BIGINT);\n            value /= MAX_UINT8_AS_BIGINT;\n        }\n    }\n    else {\n        for (let i = 0; i < 8; ++i) {\n            buffer[i] = Number(value % MAX_UINT8_AS_BIGINT);\n            value /= MAX_UINT8_AS_BIGINT;\n        }\n    }\n    return buffer;\n}\nexports.marshalInt64BigintAsBuffer = marshalInt64BigintAsBuffer;\n/** @internal */\nfunction unmarshalInt64BigintFromBuffer(buffer) {\n    let value = BigInt(0);\n    let byteView = new Uint8Array(buffer);\n    if (byteView.length != 8) {\n        throw new error_1.CrtError(\"unmarshalInt64BigintFromBuffer expects a byte buffer of length 8\");\n    }\n    let shift = BigInt(1);\n    let isNegative = (byteView[7] & 0x80) != 0;\n    /* encoding is two's-complement, so treat negative and non-negative differently */\n    if (isNegative) {\n        for (let i = 0; i < byteView.length; ++i) {\n            let byteValue = BigInt(255 - byteView[i]);\n            value += (byteValue * shift);\n            shift *= MAX_UINT8_AS_BIGINT;\n        }\n        value += BigInt(1);\n        value = -value;\n    }\n    else {\n        for (let i = 0; i < byteView.length; ++i) {\n            let byteValue = BigInt(byteView[i]);\n            value += (byteValue * shift);\n            shift *= MAX_UINT8_AS_BIGINT;\n        }\n    }\n    return value;\n}\nexports.unmarshalInt64BigintFromBuffer = unmarshalInt64BigintFromBuffer;\n//# sourceMappingURL=eventstream_utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXdzLWNydC9kaXN0L25hdGl2ZS9ldmVudHN0cmVhbV91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNDQUFzQyxHQUFHLGtDQUFrQyxHQUFHLGlCQUFpQixHQUFHLGlCQUFpQixHQUFHLGlCQUFpQixHQUFHLGlCQUFpQixHQUFHLGlCQUFpQixHQUFHLGlCQUFpQixHQUFHLGdCQUFnQixHQUFHLGdCQUFnQjtBQUN6TyxnQkFBZ0IsbUJBQU8sQ0FBQyxrRUFBUztBQUNqQztBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEIsZ0JBQWdCO0FBQ2hCLGlCQUFpQjtBQUNqQixpQkFBaUI7QUFDakIsaUJBQWlCO0FBQ2pCLGlCQUFpQjtBQUNqQixpQkFBaUI7QUFDakIsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLE9BQU87QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixPQUFPO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHFCQUFxQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHFCQUFxQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0QyIsInNvdXJjZXMiOlsid2VicGFjazovL3BheXdpbmQvLi9ub2RlX21vZHVsZXMvYXdzLWNydC9kaXN0L25hdGl2ZS9ldmVudHN0cmVhbV91dGlscy5qcz8zMDU0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjAuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudW5tYXJzaGFsSW50NjRCaWdpbnRGcm9tQnVmZmVyID0gZXhwb3J0cy5tYXJzaGFsSW50NjRCaWdpbnRBc0J1ZmZlciA9IGV4cG9ydHMuTUlOX0lOVDY0ID0gZXhwb3J0cy5NQVhfSU5UNjQgPSBleHBvcnRzLk1JTl9JTlQzMiA9IGV4cG9ydHMuTUFYX0lOVDMyID0gZXhwb3J0cy5NSU5fSU5UMTYgPSBleHBvcnRzLk1BWF9JTlQxNiA9IGV4cG9ydHMuTUlOX0lOVDggPSBleHBvcnRzLk1BWF9JTlQ4ID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuL2Vycm9yXCIpO1xuLypcbiogTGltaXRzIGZvciBoZWFkZXIgdmFsdWUgdmFsaWRhdGlvblxuKi9cbmV4cG9ydHMuTUFYX0lOVDggPSAxMjc7XG5leHBvcnRzLk1JTl9JTlQ4ID0gLTEyODtcbmV4cG9ydHMuTUFYX0lOVDE2ID0gMzI3Njc7XG5leHBvcnRzLk1JTl9JTlQxNiA9IC0zMjc2ODtcbmV4cG9ydHMuTUFYX0lOVDMyID0gMjE0NzQ4MzY0NztcbmV4cG9ydHMuTUlOX0lOVDMyID0gLTIxNDc0ODM2NDg7XG5leHBvcnRzLk1BWF9JTlQ2NCA9IEJpZ0ludChcIjkyMjMzNzIwMzY4NTQ3NzU4MDdcIik7XG5leHBvcnRzLk1JTl9JTlQ2NCA9IEJpZ0ludChcIi05MjIzMzcyMDM2ODU0Nzc1ODA4XCIpO1xuY29uc3QgTUFYX1VJTlQ4X0FTX0JJR0lOVCA9IEJpZ0ludChcIjI1NlwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmZ1bmN0aW9uIG1hcnNoYWxJbnQ2NEJpZ2ludEFzQnVmZmVyKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlIDwgZXhwb3J0cy5NSU5fSU5UNjQgfHwgdmFsdWUgPiBleHBvcnRzLk1BWF9JTlQ2NCkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5DcnRFcnJvcihcIm1hcnNoYWxJbnQ2NEJpZ2ludEFzQnVmZmVyIGV4cGVjdHMgYSB2YWx1ZSB0aGF0IGNhbiBmaXQgaW4gOCBieXRlc1wiKTtcbiAgICB9XG4gICAgbGV0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KDgpO1xuICAgIC8qIGVuY29kZSB0aGUgaW50ZWdlciBhcyBhIHR3b3MtY29tcGxlbWVudCBieXRlIHNlcXVlbmNlICovXG4gICAgaWYgKHZhbHVlIDwgMCkge1xuICAgICAgICB2YWx1ZSA9IC12YWx1ZSAtIEJpZ0ludCgxKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA4OyArK2kpIHtcbiAgICAgICAgICAgIGJ1ZmZlcltpXSA9IDI1NSAtIE51bWJlcih2YWx1ZSAlIE1BWF9VSU5UOF9BU19CSUdJTlQpO1xuICAgICAgICAgICAgdmFsdWUgLz0gTUFYX1VJTlQ4X0FTX0JJR0lOVDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA4OyArK2kpIHtcbiAgICAgICAgICAgIGJ1ZmZlcltpXSA9IE51bWJlcih2YWx1ZSAlIE1BWF9VSU5UOF9BU19CSUdJTlQpO1xuICAgICAgICAgICAgdmFsdWUgLz0gTUFYX1VJTlQ4X0FTX0JJR0lOVDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYnVmZmVyO1xufVxuZXhwb3J0cy5tYXJzaGFsSW50NjRCaWdpbnRBc0J1ZmZlciA9IG1hcnNoYWxJbnQ2NEJpZ2ludEFzQnVmZmVyO1xuLyoqIEBpbnRlcm5hbCAqL1xuZnVuY3Rpb24gdW5tYXJzaGFsSW50NjRCaWdpbnRGcm9tQnVmZmVyKGJ1ZmZlcikge1xuICAgIGxldCB2YWx1ZSA9IEJpZ0ludCgwKTtcbiAgICBsZXQgYnl0ZVZpZXcgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICAgIGlmIChieXRlVmlldy5sZW5ndGggIT0gOCkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5DcnRFcnJvcihcInVubWFyc2hhbEludDY0QmlnaW50RnJvbUJ1ZmZlciBleHBlY3RzIGEgYnl0ZSBidWZmZXIgb2YgbGVuZ3RoIDhcIik7XG4gICAgfVxuICAgIGxldCBzaGlmdCA9IEJpZ0ludCgxKTtcbiAgICBsZXQgaXNOZWdhdGl2ZSA9IChieXRlVmlld1s3XSAmIDB4ODApICE9IDA7XG4gICAgLyogZW5jb2RpbmcgaXMgdHdvJ3MtY29tcGxlbWVudCwgc28gdHJlYXQgbmVnYXRpdmUgYW5kIG5vbi1uZWdhdGl2ZSBkaWZmZXJlbnRseSAqL1xuICAgIGlmIChpc05lZ2F0aXZlKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZVZpZXcubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGxldCBieXRlVmFsdWUgPSBCaWdJbnQoMjU1IC0gYnl0ZVZpZXdbaV0pO1xuICAgICAgICAgICAgdmFsdWUgKz0gKGJ5dGVWYWx1ZSAqIHNoaWZ0KTtcbiAgICAgICAgICAgIHNoaWZ0ICo9IE1BWF9VSU5UOF9BU19CSUdJTlQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgKz0gQmlnSW50KDEpO1xuICAgICAgICB2YWx1ZSA9IC12YWx1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZVZpZXcubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGxldCBieXRlVmFsdWUgPSBCaWdJbnQoYnl0ZVZpZXdbaV0pO1xuICAgICAgICAgICAgdmFsdWUgKz0gKGJ5dGVWYWx1ZSAqIHNoaWZ0KTtcbiAgICAgICAgICAgIHNoaWZ0ICo9IE1BWF9VSU5UOF9BU19CSUdJTlQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZXhwb3J0cy51bm1hcnNoYWxJbnQ2NEJpZ2ludEZyb21CdWZmZXIgPSB1bm1hcnNoYWxJbnQ2NEJpZ2ludEZyb21CdWZmZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldmVudHN0cmVhbV91dGlscy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/aws-crt/dist/native/eventstream_utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/aws-crt/dist/native/http.js":
/*!**************************************************!*\
  !*** ./node_modules/aws-crt/dist/native/http.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HttpClientConnectionManager = exports.HttpClientStream = exports.HttpStream = exports.HttpClientConnection = exports.HttpProxyOptions = exports.HttpProxyConnectionType = exports.HttpConnection = exports.HttpRequest = exports.HttpHeaders = exports.HttpProxyAuthenticationType = void 0;\n/**\n *\n * A module containing support for creating http connections and making requests on them.\n *\n * @packageDocumentation\n * @module http\n * @mergeTarget\n */\nconst binding_1 = __importDefault(__webpack_require__(/*! ./binding */ \"(ssr)/./node_modules/aws-crt/dist/native/binding.js\"));\nconst native_resource_1 = __webpack_require__(/*! ./native_resource */ \"(ssr)/./node_modules/aws-crt/dist/native/native_resource.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/aws-crt/dist/native/error.js\");\nconst http_1 = __webpack_require__(/*! ../common/http */ \"(ssr)/./node_modules/aws-crt/dist/common/http.js\");\n/** @internal */\nvar http_2 = __webpack_require__(/*! ../common/http */ \"(ssr)/./node_modules/aws-crt/dist/common/http.js\");\nObject.defineProperty(exports, \"HttpProxyAuthenticationType\", ({ enumerable: true, get: function () { return http_2.HttpProxyAuthenticationType; } }));\nconst event_1 = __webpack_require__(/*! ../common/event */ \"(ssr)/./node_modules/aws-crt/dist/common/event.js\");\n/**\n * @category HTTP\n */\nexports.HttpHeaders = binding_1.default.HttpHeaders;\n/** @internal */\nconst nativeHttpRequest = binding_1.default.HttpRequest;\n/**\n * @category HTTP\n */\nclass HttpRequest extends nativeHttpRequest {\n    constructor(method, path, headers, body) {\n        super(method, path, headers, body === null || body === void 0 ? void 0 : body.native_handle());\n    }\n}\nexports.HttpRequest = HttpRequest;\n/**\n * Base class for HTTP connections\n *\n * @category HTTP\n */\nclass HttpConnection extends (0, native_resource_1.NativeResourceMixin)(event_1.BufferedEventEmitter) {\n    constructor(native_handle) {\n        super();\n        this._super(native_handle);\n    }\n    /**\n     * Close the connection.\n     * Shutdown is asynchronous. This call has no effect if the connection is already\n     * closing.\n     */\n    close() {\n        binding_1.default.http_connection_close(this.native_handle());\n    }\n    // Overridden to allow uncorking on ready\n    on(event, listener) {\n        super.on(event, listener);\n        if (event == 'connect') {\n            process.nextTick(() => {\n                this.uncork();\n            });\n        }\n        return this;\n    }\n}\nexports.HttpConnection = HttpConnection;\n/**\n * Emitted when the connection is connected and ready to start streams\n *\n * @event\n */\nHttpConnection.CONNECT = 'connect';\n/**\n * Emitted when an error occurs on the connection\n *\n * @event\n */\nHttpConnection.ERROR = 'error';\n/**\n * Emitted when the connection has completed\n *\n * @event\n */\nHttpConnection.CLOSE = 'close';\n/**\n * Proxy connection types.\n *\n * The original behavior was to make a tunneling connection if TLS was used, and a forwarding connection if it was not.\n * There are legitimate use cases for plaintext tunneling connections, and so the implicit behavior has now\n * been replaced by this setting, with a default that maps to the old behavior.\n *\n * @category HTTP\n */\nvar HttpProxyConnectionType;\n(function (HttpProxyConnectionType) {\n    /**\n     * (Default for backwards compatibility).  If Tls options are supplied then the connection will be a tunneling\n     * one, otherwise it will be a forwarding one.\n     */\n    HttpProxyConnectionType[HttpProxyConnectionType[\"Legacy\"] = 0] = \"Legacy\";\n    /**\n     * Establish a forwarding-based connection with the proxy.  Tls is not allowed in this case.\n     */\n    HttpProxyConnectionType[HttpProxyConnectionType[\"Forwarding\"] = 1] = \"Forwarding\";\n    /**\n     * Establish a tunneling-based connection with the proxy.\n     */\n    HttpProxyConnectionType[HttpProxyConnectionType[\"Tunneling\"] = 2] = \"Tunneling\";\n})(HttpProxyConnectionType = exports.HttpProxyConnectionType || (exports.HttpProxyConnectionType = {}));\n;\n/**\n * Proxy options for HTTP clients.\n *\n * @category HTTP\n */\nclass HttpProxyOptions extends http_1.CommonHttpProxyOptions {\n    /**\n     *\n     * @param host_name Name of the proxy server to connect through\n     * @param port Port number of the proxy server to connect through\n     * @param auth_method Type of proxy authentication to use. Default is {@link HttpProxyAuthenticationType.None}\n     * @param auth_username Username to use when `auth_type` is {@link HttpProxyAuthenticationType.Basic}\n     * @param auth_password Password to use when `auth_type` is {@link HttpProxyAuthenticationType.Basic}\n     * @param tls_opts Optional TLS connection options for the connection to the proxy host.\n     *                 Must be distinct from the {@link TlsConnectionOptions} provided to\n     *                 the HTTP connection\n     * @param connection_type Optional Type of connection to make.  If not specified,\n     *                 {@link HttpProxyConnectionType.Legacy} will be used.\n     */\n    constructor(host_name, port, auth_method = http_1.HttpProxyAuthenticationType.None, auth_username, auth_password, tls_opts, connection_type) {\n        super(host_name, port, auth_method, auth_username, auth_password);\n        this.tls_opts = tls_opts;\n        this.connection_type = connection_type;\n    }\n    /** @internal */\n    create_native_handle() {\n        return binding_1.default.http_proxy_options_new(this.host_name, this.port, this.auth_method, this.auth_username, this.auth_password, this.tls_opts ? this.tls_opts.native_handle() : undefined, this.connection_type ? this.connection_type : HttpProxyConnectionType.Legacy);\n    }\n}\nexports.HttpProxyOptions = HttpProxyOptions;\n/**\n * Represents an HTTP connection from a client to a server\n *\n * @category HTTP\n */\nclass HttpClientConnection extends HttpConnection {\n    /** Asynchronously establish a new HttpClientConnection.\n     * @param bootstrap Client bootstrap to use when initiating socket connection.  Leave undefined to use the\n     *          default system-wide bootstrap (recommended).\n     * @param host_name Host to connect to\n     * @param port Port to connect to on host\n     * @param socket_options Socket options\n     * @param tls_opts Optional TLS connection options\n     * @param proxy_options Optional proxy options\n    */\n    constructor(bootstrap, host_name, port, socket_options, tls_opts, proxy_options, handle) {\n        if (socket_options == null || socket_options == undefined) {\n            throw new error_1.CrtError(\"HttpClientConnection constructor: socket_options not defined\");\n        }\n        super(handle\n            ? handle\n            : binding_1.default.http_connection_new(bootstrap != null ? bootstrap.native_handle() : null, (handle, error_code) => {\n                this._on_setup(handle, error_code);\n            }, (handle, error_code) => {\n                this._on_shutdown(handle, error_code);\n            }, host_name, port, socket_options.native_handle(), tls_opts ? tls_opts.native_handle() : undefined, proxy_options ? proxy_options.create_native_handle() : undefined));\n        this.bootstrap = bootstrap;\n        this.socket_options = socket_options;\n        this.tls_opts = tls_opts;\n    }\n    _on_setup(native_handle, error_code) {\n        if (error_code) {\n            this.emit('error', new error_1.CrtError(error_code));\n            return;\n        }\n        this.emit('connect');\n    }\n    _on_shutdown(native_handle, error_code) {\n        if (error_code) {\n            this.emit('error', new error_1.CrtError(error_code));\n            return;\n        }\n        this.emit('close');\n    }\n    /**\n     * Create {@link HttpClientStream} to carry out the request/response exchange.\n     *\n     * NOTE: The stream sends no data until :meth:`HttpClientStream.activate()`\n     * is called. Call {@link HttpStream.activate} when you're ready for\n     * callbacks and events to fire.\n     * @param request - The HttpRequest to attempt on this connection\n     * @returns A new stream that will deliver events for the request\n     */\n    request(request) {\n        let stream;\n        const on_response_impl = (status_code, headers) => {\n            stream._on_response(status_code, headers);\n        };\n        const on_body_impl = (data) => {\n            stream._on_body(data);\n        };\n        const on_complete_impl = (error_code) => {\n            stream._on_complete(error_code);\n        };\n        const native_handle = binding_1.default.http_stream_new(this.native_handle(), request, on_complete_impl, on_response_impl, on_body_impl);\n        return stream = new HttpClientStream(native_handle, this, request);\n    }\n}\nexports.HttpClientConnection = HttpClientConnection;\n/**\n * Represents a single http message exchange (request/response) in HTTP/1.1. In H2, it may\n * also represent a PUSH_PROMISE followed by the accompanying response.\n *\n * NOTE: Binding either the ready or response event will uncork any buffered events and start\n * event delivery\n *\n * @category HTTP\n */\nclass HttpStream extends (0, native_resource_1.NativeResourceMixin)(event_1.BufferedEventEmitter) {\n    constructor(native_handle, connection) {\n        super();\n        this.connection = connection;\n        this._super(native_handle);\n        this.cork();\n    }\n    /**\n     * Begin sending the request.\n     *\n     * The stream does nothing until this is called. Call activate() when you\n     * are ready for its callbacks and events to fire.\n     */\n    activate() {\n        binding_1.default.http_stream_activate(this.native_handle());\n    }\n    /**\n     * Closes and ends all communication on this stream. Called automatically after the 'end'\n     * event is delivered. Calling this manually is only necessary if you wish to terminate\n     * communication mid-request/response.\n     */\n    close() {\n        binding_1.default.http_stream_close(this.native_handle());\n    }\n    /** @internal */\n    _on_body(data) {\n        this.emit('data', data);\n    }\n    /** @internal */\n    _on_complete(error_code) {\n        if (error_code) {\n            this.emit('error', new error_1.CrtError(error_code));\n            this.close();\n            return;\n        }\n        // schedule death after end is delivered\n        this.on('end', () => {\n            this.close();\n        });\n        this.emit('end');\n    }\n}\nexports.HttpStream = HttpStream;\n/**\n * Stream that sends a request and receives a response.\n *\n * Create an HttpClientStream with {@link HttpClientConnection.request}.\n *\n * NOTE: The stream sends no data until {@link HttpStream.activate} is called.\n * Call {@link HttpStream.activate} when you're ready for callbacks and events to fire.\n *\n * @category HTTP\n */\nclass HttpClientStream extends HttpStream {\n    constructor(native_handle, connection, request) {\n        super(native_handle, connection);\n        this.request = request;\n    }\n    /**\n     * HTTP status code returned from the server.\n     * @return Either the status code, or undefined if the server response has not arrived yet.\n     */\n    status_code() {\n        return this.response_status_code;\n    }\n    // Overridden to allow uncorking on ready and response\n    on(event, listener) {\n        super.on(event, listener);\n        if (event == 'response') {\n            process.nextTick(() => {\n                this.uncork();\n            });\n        }\n        return this;\n    }\n    /** @internal */\n    _on_response(status_code, header_array) {\n        this.response_status_code = status_code;\n        let headers = new exports.HttpHeaders(header_array);\n        this.emit('response', status_code, headers);\n    }\n}\nexports.HttpClientStream = HttpClientStream;\n/**\n * Emitted when the http response headers have arrived.\n *\n * @event\n */\nHttpClientStream.RESPONSE = 'response';\n/**\n * Emitted when http response data is available.\n *\n * @event\n */\nHttpClientStream.DATA = 'data';\n/**\n * Emitted when an error occurs in stream processing\n *\n * @event\n */\nHttpClientStream.ERROR = 'error';\n/**\n * Emitted when the stream has completed\n *\n * @event\n */\nHttpClientStream.END = 'end';\n/**\n * Emitted when inline headers are delivered while communicating over H2\n *\n * @event\n */\nHttpClientStream.HEADERS = 'headers';\n/**\n * Creates, manages, and vends connections to a given host/port endpoint\n *\n * @category HTTP\n */\nclass HttpClientConnectionManager extends native_resource_1.NativeResource {\n    /**\n     * @param bootstrap Client bootstrap to use when initiating socket connections.  Leave undefined to use the\n     *          default system-wide bootstrap (recommended).\n     * @param host Host to connect to\n     * @param port Port to connect to on host\n     * @param max_connections Maximum number of connections to pool\n     * @param initial_window_size Optional initial window size\n     * @param socket_options Socket options to use when initiating socket connections\n     * @param tls_opts Optional TLS connection options\n     * @param proxy_options Optional proxy options\n     */\n    constructor(bootstrap, host, port, max_connections, initial_window_size, socket_options, tls_opts, proxy_options) {\n        if (socket_options == null || socket_options == undefined) {\n            throw new error_1.CrtError(\"HttpClientConnectionManager constructor: socket_options not defined\");\n        }\n        super(binding_1.default.http_connection_manager_new(bootstrap != null ? bootstrap.native_handle() : null, host, port, max_connections, initial_window_size, socket_options.native_handle(), tls_opts ? tls_opts.native_handle() : undefined, proxy_options ? proxy_options.create_native_handle() : undefined, undefined /* on_shutdown */));\n        this.bootstrap = bootstrap;\n        this.host = host;\n        this.port = port;\n        this.max_connections = max_connections;\n        this.initial_window_size = initial_window_size;\n        this.socket_options = socket_options;\n        this.tls_opts = tls_opts;\n        this.proxy_options = proxy_options;\n        this.connections = new Map();\n    }\n    /**\n    * Vends a connection from the pool\n    * @returns A promise that results in an HttpClientConnection. When done with the connection, return\n    *          it via {@link release}\n    */\n    acquire() {\n        return new Promise((resolve, reject) => {\n            // Only create 1 connection in JS/TS from each native connection\n            const on_acquired = (handle, error_code) => {\n                if (error_code) {\n                    reject(new error_1.CrtError(error_code));\n                    return;\n                }\n                let connection = this.connections.get(handle);\n                if (!connection) {\n                    connection = new HttpClientConnection(this.bootstrap, this.host, this.port, this.socket_options, this.tls_opts, this.proxy_options, handle);\n                    this.connections.set(handle, connection);\n                    connection.on('close', () => {\n                        this.connections.delete(handle);\n                    });\n                }\n                resolve(connection);\n            };\n            binding_1.default.http_connection_manager_acquire(this.native_handle(), on_acquired);\n        });\n    }\n    /**\n     * Returns an unused connection to the pool\n     * @param connection - The connection to return\n    */\n    release(connection) {\n        if (connection == null || connection == undefined) {\n            throw new error_1.CrtError(\"HttpClientConnectionManager release: connection not defined\");\n        }\n        binding_1.default.http_connection_manager_release(this.native_handle(), connection.native_handle());\n    }\n    /** Closes all connections and rejects all pending requests */\n    close() {\n        binding_1.default.http_connection_manager_close(this.native_handle());\n    }\n}\nexports.HttpClientConnectionManager = HttpClientConnectionManager;\n//# sourceMappingURL=http.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/aws-crt/dist/native/http.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/aws-crt/dist/native/io.js":
/*!************************************************!*\
  !*** ./node_modules/aws-crt/dist/native/io.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Pkcs11Lib = exports.TlsConnectionOptions = exports.ServerTlsContext = exports.ClientTlsContext = exports.TlsContext = exports.TlsContextOptions = exports.SocketOptions = exports.ClientBootstrap = exports.InputStream = exports.is_alpn_available = exports.enable_logging = exports.LogLevel = exports.error_code_to_name = exports.error_code_to_string = exports.SocketDomain = exports.SocketType = exports.TlsVersion = void 0;\n/**\n *\n * A module containing a grab bag of support for core network I/O functionality, including sockets, TLS, DNS, logging,\n * error handling, streams, and connection -> thread mapping.\n *\n * Categories include:\n * - Network: socket configuration\n * - TLS: tls configuration\n * - Logging: logging controls and configuration\n * - IO: everything else\n *\n * @packageDocumentation\n * @module io\n * @mergeTarget\n */\nconst binding_1 = __importDefault(__webpack_require__(/*! ./binding */ \"(ssr)/./node_modules/aws-crt/dist/native/binding.js\"));\nconst native_resource_1 = __webpack_require__(/*! ./native_resource */ \"(ssr)/./node_modules/aws-crt/dist/native/native_resource.js\");\nconst io_1 = __webpack_require__(/*! ../common/io */ \"(ssr)/./node_modules/aws-crt/dist/common/io.js\");\nvar io_2 = __webpack_require__(/*! ../common/io */ \"(ssr)/./node_modules/aws-crt/dist/common/io.js\");\nObject.defineProperty(exports, \"TlsVersion\", ({ enumerable: true, get: function () { return io_2.TlsVersion; } }));\nObject.defineProperty(exports, \"SocketType\", ({ enumerable: true, get: function () { return io_2.SocketType; } }));\nObject.defineProperty(exports, \"SocketDomain\", ({ enumerable: true, get: function () { return io_2.SocketDomain; } }));\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/aws-crt/dist/native/error.js\");\n/**\n * Convert a native error code into a human-readable string\n * @param error_code - An error code returned from a native API call, or delivered\n * via callback.\n * @returns Long-form description of the error\n * @see CrtError\n *\n * nodejs only.\n *\n * @category System\n */\nfunction error_code_to_string(error_code) {\n    return binding_1.default.error_code_to_string(error_code);\n}\nexports.error_code_to_string = error_code_to_string;\n/**\n * Convert a native error code into a human-readable identifier\n * @param error_code - An error code returned from a native API call, or delivered\n * via callback.\n * @return error name as a string\n * @see CrtError\n *\n * nodejs only.\n *\n * @category System\n */\nfunction error_code_to_name(error_code) {\n    return binding_1.default.error_code_to_name(error_code);\n}\nexports.error_code_to_name = error_code_to_name;\n/**\n * The amount of detail that will be logged\n * @category Logging\n */\nvar LogLevel;\n(function (LogLevel) {\n    /** No logging whatsoever. Equivalent to never calling {@link enable_logging}. */\n    LogLevel[LogLevel[\"NONE\"] = 0] = \"NONE\";\n    /** Only fatals. In practice, this will not do much, as the process will log and then crash (intentionally) if a fatal condition occurs */\n    LogLevel[LogLevel[\"FATAL\"] = 1] = \"FATAL\";\n    /** Only errors */\n    LogLevel[LogLevel[\"ERROR\"] = 2] = \"ERROR\";\n    /** Only warnings and errors */\n    LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\n    /** Information about connection/stream creation/destruction events */\n    LogLevel[LogLevel[\"INFO\"] = 4] = \"INFO\";\n    /** Enough information to debug the chain of events a given network connection encounters */\n    LogLevel[LogLevel[\"DEBUG\"] = 5] = \"DEBUG\";\n    /** Everything. Only use this if you really need to know EVERY single call */\n    LogLevel[LogLevel[\"TRACE\"] = 6] = \"TRACE\";\n})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));\n/**\n * Enables logging of the native AWS CRT libraries.\n * @param level - The logging level to filter to. It is not possible to log less than WARN.\n *\n * nodejs only.\n * @category Logging\n */\nfunction enable_logging(level) {\n    binding_1.default.io_logging_enable(level);\n}\nexports.enable_logging = enable_logging;\n/**\n * Returns true if ALPN is available on this platform natively\n * @return true if ALPN is supported natively, false otherwise\n *\n * nodejs only.\n * @category TLS\n*/\nfunction is_alpn_available() {\n    return binding_1.default.is_alpn_available();\n}\nexports.is_alpn_available = is_alpn_available;\n/**\n * Wraps a ```Readable``` for reading by native code, used to stream\n *  data into the AWS CRT libraries.\n *\n * nodejs only.\n * @category IO\n */\nclass InputStream extends native_resource_1.NativeResource {\n    constructor(source) {\n        super(binding_1.default.io_input_stream_new(16 * 1024));\n        this.source = source;\n        this.source.on('data', (data) => {\n            data = Buffer.isBuffer(data) ? data : Buffer.from(data.toString());\n            binding_1.default.io_input_stream_append(this.native_handle(), data);\n        });\n        this.source.on('end', () => {\n            binding_1.default.io_input_stream_append(this.native_handle(), undefined);\n        });\n    }\n}\nexports.InputStream = InputStream;\n/**\n * Represents native resources required to bootstrap a client connection\n * Things like a host resolver, event loop group, etc. There should only need\n * to be 1 of these per application, in most cases.\n *\n * nodejs only.\n * @category IO\n */\nclass ClientBootstrap extends native_resource_1.NativeResource {\n    constructor() {\n        super(binding_1.default.io_client_bootstrap_new());\n    }\n}\nexports.ClientBootstrap = ClientBootstrap;\n/**\n * Standard Berkeley socket style options.\n *\n * nodejs only.\n * @category Network\n*/\nclass SocketOptions extends native_resource_1.NativeResource {\n    constructor(type = io_1.SocketType.STREAM, domain = io_1.SocketDomain.IPV6, connect_timeout_ms = 5000, keepalive = false, keep_alive_interval_sec = 0, keep_alive_timeout_sec = 0, keep_alive_max_failed_probes = 0) {\n        super(binding_1.default.io_socket_options_new(type, domain, connect_timeout_ms, keep_alive_interval_sec, keep_alive_timeout_sec, keep_alive_max_failed_probes, keepalive));\n    }\n}\nexports.SocketOptions = SocketOptions;\n/**\n * Options for creating a {@link ClientTlsContext} or {@link ServerTlsContext}.\n *\n * nodejs only.\n * @category TLS\n */\nclass TlsContextOptions {\n    constructor() {\n        /** Minimum version of TLS to support. Uses OS/system default if unspecified. */\n        this.min_tls_version = io_1.TlsVersion.Default;\n        /** List of ALPN protocols to be used on platforms which support ALPN */\n        this.alpn_list = [];\n        /**\n         * In client mode, this turns off x.509 validation. Don't do this unless you are testing.\n         * It is much better to just override the default trust store and pass the self-signed\n         * certificate as the ca_file argument.\n         *\n         * In server mode (ServerTlsContext), this defaults to false. If you want to enforce mutual TLS on the server,\n         * set this to true.\n         */\n        this.verify_peer = true;\n    }\n    /**\n     * Overrides the default system trust store.\n     * @param ca_dirpath - Only used on Unix-style systems where all trust anchors are\n     * stored in a directory (e.g. /etc/ssl/certs).\n     * @param ca_filepath - Single file containing all trust CAs, in PEM format\n     */\n    override_default_trust_store_from_path(ca_dirpath, ca_filepath) {\n        this.ca_dirpath = ca_dirpath;\n        this.ca_filepath = ca_filepath;\n    }\n    /**\n     * Overrides the default system trust store.\n     * @param certificate_authority - String containing all trust CAs, in PEM format\n     */\n    override_default_trust_store(certificate_authority) {\n        this.certificate_authority = certificate_authority;\n    }\n    /**\n     * Create options configured for mutual TLS in client mode,\n     * with client certificate and private key provided as in-memory strings.\n     * @param certificate - Client certificate file contents, in PEM format\n     * @param private_key - Client private key file contents, in PEM format\n     *\n     * @returns newly configured TlsContextOptions object\n     */\n    static create_client_with_mtls(certificate, private_key) {\n        let opt = new TlsContextOptions();\n        opt.certificate = certificate;\n        opt.private_key = private_key;\n        opt.verify_peer = true;\n        return opt;\n    }\n    /**\n     * Create options configured for mutual TLS in client mode,\n     * with client certificate and private key provided via filepath.\n     * @param certificate_filepath - Path to client certificate, in PEM format\n     * @param private_key_filepath - Path to private key, in PEM format\n     *\n     * @returns newly configured TlsContextOptions object\n     */\n    static create_client_with_mtls_from_path(certificate_filepath, private_key_filepath) {\n        let opt = new TlsContextOptions();\n        opt.certificate_filepath = certificate_filepath;\n        opt.private_key_filepath = private_key_filepath;\n        opt.verify_peer = true;\n        return opt;\n    }\n    /**\n     * Create options for mutual TLS in client mode,\n     * with client certificate and private key bundled in a single PKCS#12 file.\n     * @param pkcs12_filepath - Path to PKCS#12 file containing client certificate and private key.\n     * @param pkcs12_password - PKCS#12 password\n     *\n     * @returns newly configured TlsContextOptions object\n    */\n    static create_client_with_mtls_pkcs12_from_path(pkcs12_filepath, pkcs12_password) {\n        let opt = new TlsContextOptions();\n        opt.pkcs12_filepath = pkcs12_filepath;\n        opt.pkcs12_password = pkcs12_password;\n        opt.verify_peer = true;\n        return opt;\n    }\n    /**\n     * @deprecated Renamed [[create_client_with_mtls_pkcs12_from_path]]\n     */\n    static create_client_with_mtls_pkcs_from_path(pkcs12_filepath, pkcs12_password) {\n        return this.create_client_with_mtls_pkcs12_from_path(pkcs12_filepath, pkcs12_password);\n    }\n    /**\n     * Create options configured for mutual TLS in client mode,\n     * using a PKCS#11 library for private key operations.\n     *\n     * NOTE: This configuration only works on Unix devices.\n     *\n     * @param options - PKCS#11 options\n     *\n     * @returns newly configured TlsContextOptions object\n     */\n    static create_client_with_mtls_pkcs11(options) {\n        let opt = new TlsContextOptions();\n        opt.pkcs11_options = options;\n        opt.verify_peer = true;\n        return opt;\n    }\n    /**\n     * Create options configured for mutual TLS in client mode,\n     * using a certificate in a Windows certificate store.\n     *\n     * NOTE: Windows only.\n     *\n     * @param certificate_path - Path to certificate in a Windows certificate store.\n     *      The path must use backslashes and end with the certificate's thumbprint.\n     *      Example: `CurrentUser\\MY\\A11F8A9B5DF5B98BA3508FBCA575D09570E0D2C6`\n     */\n    static create_client_with_mtls_windows_cert_store_path(certificate_path) {\n        let opt = new TlsContextOptions();\n        opt.windows_cert_store_path = certificate_path;\n        opt.verify_peer = true;\n        return opt;\n    }\n    /**\n     * Creates TLS context with peer verification disabled, along with a certificate and private key\n     * @param certificate_filepath - Path to certificate, in PEM format\n     * @param private_key_filepath - Path to private key, in PEM format\n     *\n     * @returns newly configured TlsContextOptions object\n     */\n    static create_server_with_mtls_from_path(certificate_filepath, private_key_filepath) {\n        let opt = new TlsContextOptions();\n        opt.certificate_filepath = certificate_filepath;\n        opt.private_key_filepath = private_key_filepath;\n        opt.verify_peer = false;\n        return opt;\n    }\n    /**\n     * Creates TLS context with peer verification disabled, along with a certificate and private key\n     * in PKCS#12 format\n     * @param pkcs12_filepath - Path to certificate, in PKCS#12 format\n     * @param pkcs12_password - PKCS#12 Password\n     *\n     * @returns newly configured TlsContextOptions object\n     */\n    static create_server_with_mtls_pkcs_from_path(pkcs12_filepath, pkcs12_password) {\n        let opt = new TlsContextOptions();\n        opt.pkcs12_filepath = pkcs12_filepath;\n        opt.pkcs12_password = pkcs12_password;\n        opt.verify_peer = false;\n        return opt;\n    }\n}\nexports.TlsContextOptions = TlsContextOptions;\n/**\n * Abstract base TLS context used for client/server TLS communications over sockets.\n *\n * @see ClientTlsContext\n * @see ServerTlsContext\n *\n * nodejs only.\n * @category TLS\n */\nclass TlsContext extends native_resource_1.NativeResource {\n    constructor(ctx_opt) {\n        if (ctx_opt == null || ctx_opt == undefined) {\n            throw new error_1.CrtError(\"TlsContext constructor: ctx_opt not defined\");\n        }\n        super(binding_1.default.io_tls_ctx_new(ctx_opt.min_tls_version, ctx_opt.ca_filepath, ctx_opt.ca_dirpath, ctx_opt.certificate_authority, (ctx_opt.alpn_list && ctx_opt.alpn_list.length > 0) ? ctx_opt.alpn_list.join(';') : undefined, ctx_opt.certificate_filepath, ctx_opt.certificate, ctx_opt.private_key_filepath, ctx_opt.private_key, ctx_opt.pkcs12_filepath, ctx_opt.pkcs12_password, ctx_opt.pkcs11_options, ctx_opt.windows_cert_store_path, ctx_opt.verify_peer));\n    }\n}\nexports.TlsContext = TlsContext;\n/**\n * TLS context used for client TLS communications over sockets. If no\n * options are supplied, the context will default to enabling peer verification\n * only.\n *\n * nodejs only.\n * @category TLS\n */\nclass ClientTlsContext extends TlsContext {\n    constructor(ctx_opt) {\n        if (!ctx_opt) {\n            ctx_opt = new TlsContextOptions();\n            ctx_opt.verify_peer = true;\n        }\n        super(ctx_opt);\n    }\n}\nexports.ClientTlsContext = ClientTlsContext;\n/**\n * TLS context used for server TLS communications over sockets. If no\n * options are supplied, the context will default to disabling peer verification\n * only.\n *\n * nodejs only.\n * @category TLS\n */\nclass ServerTlsContext extends TlsContext {\n    constructor(ctx_opt) {\n        if (!ctx_opt) {\n            ctx_opt = new TlsContextOptions();\n            ctx_opt.verify_peer = false;\n        }\n        super(ctx_opt);\n    }\n}\nexports.ServerTlsContext = ServerTlsContext;\n/**\n * TLS options that are unique to a given connection using a shared TlsContext.\n *\n * nodejs only.\n * @category TLS\n */\nclass TlsConnectionOptions extends native_resource_1.NativeResource {\n    constructor(tls_ctx, server_name, alpn_list = []) {\n        if (tls_ctx == null || tls_ctx == undefined) {\n            throw new error_1.CrtError(\"TlsConnectionOptions constructor: tls_ctx not defined\");\n        }\n        super(binding_1.default.io_tls_connection_options_new(tls_ctx.native_handle(), server_name, (alpn_list && alpn_list.length > 0) ? alpn_list.join(';') : undefined));\n        this.tls_ctx = tls_ctx;\n        this.server_name = server_name;\n        this.alpn_list = alpn_list;\n    }\n}\nexports.TlsConnectionOptions = TlsConnectionOptions;\n/**\n * Handle to a loaded PKCS#11 library.\n *\n * For most use cases, a single instance of Pkcs11Lib should be used\n * for the lifetime of your application.\n *\n * nodejs only.\n * @category TLS\n */\nclass Pkcs11Lib extends native_resource_1.NativeResource {\n    /**\n     * @param path - Path to PKCS#11 library.\n     * @param behavior - Specifies how `C_Initialize()` and `C_Finalize()`\n     *                   will be called on the PKCS#11 library.\n     */\n    constructor(path, behavior = Pkcs11Lib.InitializeFinalizeBehavior.DEFAULT) {\n        super(binding_1.default.io_pkcs11_lib_new(path, behavior));\n    }\n    /**\n     * Release the PKCS#11 library immediately, without waiting for the GC.\n     */\n    close() {\n        binding_1.default.io_pkcs11_lib_close(this.native_handle());\n    }\n}\nexports.Pkcs11Lib = Pkcs11Lib;\n(function (Pkcs11Lib) {\n    /**\n     * Controls `C_Initialize()` and `C_Finalize()` are called on the PKCS#11 library.\n     */\n    let InitializeFinalizeBehavior;\n    (function (InitializeFinalizeBehavior) {\n        /**\n         * Default behavior that accommodates most use cases.\n         *\n         * `C_Initialize()` is called on creation, and \"already-initialized\"\n         * errors are ignored. `C_Finalize()` is never called, just in case\n         * another part of your application is still using the PKCS#11 library.\n         */\n        InitializeFinalizeBehavior[InitializeFinalizeBehavior[\"DEFAULT\"] = 0] = \"DEFAULT\";\n        /**\n         * Skip calling `C_Initialize()` and `C_Finalize()`.\n         *\n         * Use this if your application has already initialized the PKCS#11 library,\n         * and you do not want `C_Initialize()` called again.\n         */\n        InitializeFinalizeBehavior[InitializeFinalizeBehavior[\"OMIT\"] = 1] = \"OMIT\";\n        /**\n         * `C_Initialize()` is called on creation and `C_Finalize()` is called on cleanup.\n         *\n         * If `C_Initialize()` reports that's it's already initialized, this is\n         * treated as an error. Use this if you need perfect cleanup (ex: running\n         * valgrind with --leak-check).\n         */\n        InitializeFinalizeBehavior[InitializeFinalizeBehavior[\"STRICT\"] = 2] = \"STRICT\";\n    })(InitializeFinalizeBehavior = Pkcs11Lib.InitializeFinalizeBehavior || (Pkcs11Lib.InitializeFinalizeBehavior = {}));\n})(Pkcs11Lib = exports.Pkcs11Lib || (exports.Pkcs11Lib = {}));\n//# sourceMappingURL=io.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/aws-crt/dist/native/io.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/aws-crt/dist/native/iot.js":
/*!*************************************************!*\
  !*** ./node_modules/aws-crt/dist/native/iot.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * Module for AWS IoT MQTT client configuration and connection establishment.\n *\n * @packageDocumentation\n * @module iot\n * @mergeTarget\n */\n__exportStar(__webpack_require__(/*! ./aws_iot */ \"(ssr)/./node_modules/aws-crt/dist/native/aws_iot.js\"), exports);\n__exportStar(__webpack_require__(/*! ./aws_iot_mqtt5 */ \"(ssr)/./node_modules/aws-crt/dist/native/aws_iot_mqtt5.js\"), exports);\n//# sourceMappingURL=iot.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXdzLWNydC9kaXN0L25hdGl2ZS9pb3QuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsbUJBQU8sQ0FBQyxzRUFBVztBQUNoQyxhQUFhLG1CQUFPLENBQUMsa0ZBQWlCO0FBQ3RDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGF5d2luZC8uL25vZGVfbW9kdWxlcy9hd3MtY3J0L2Rpc3QvbmF0aXZlL2lvdC5qcz82NGQyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjAuXG4gKi9cbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBNb2R1bGUgZm9yIEFXUyBJb1QgTVFUVCBjbGllbnQgY29uZmlndXJhdGlvbiBhbmQgY29ubmVjdGlvbiBlc3RhYmxpc2htZW50LlxuICpcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBpb3RcbiAqIEBtZXJnZVRhcmdldFxuICovXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYXdzX2lvdFwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYXdzX2lvdF9tcXR0NVwiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pb3QuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/aws-crt/dist/native/iot.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/aws-crt/dist/native/mqtt.js":
/*!**************************************************!*\
  !*** ./node_modules/aws-crt/dist/native/mqtt.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MqttClientConnection = exports.MqttClient = exports.MqttWill = exports.QoS = exports.HttpProxyOptions = void 0;\n/**\n *\n * A module containing support for mqtt connection establishment and operations.\n *\n * @packageDocumentation\n * @module mqtt\n * @mergeTarget\n */\nconst binding_1 = __importDefault(__webpack_require__(/*! ./binding */ \"(ssr)/./node_modules/aws-crt/dist/native/binding.js\"));\nconst native_resource_1 = __webpack_require__(/*! ./native_resource */ \"(ssr)/./node_modules/aws-crt/dist/native/native_resource.js\");\nconst event_1 = __webpack_require__(/*! ../common/event */ \"(ssr)/./node_modules/aws-crt/dist/common/event.js\");\nconst crt = __importStar(__webpack_require__(/*! ../common/mqtt_shared */ \"(ssr)/./node_modules/aws-crt/dist/common/mqtt_shared.js\"));\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/aws-crt/dist/native/error.js\");\nconst io = __importStar(__webpack_require__(/*! ./io */ \"(ssr)/./node_modules/aws-crt/dist/native/io.js\"));\nvar http_1 = __webpack_require__(/*! ./http */ \"(ssr)/./node_modules/aws-crt/dist/native/http.js\");\nObject.defineProperty(exports, \"HttpProxyOptions\", ({ enumerable: true, get: function () { return http_1.HttpProxyOptions; } }));\nconst mqtt_1 = __webpack_require__(/*! ../common/mqtt */ \"(ssr)/./node_modules/aws-crt/dist/common/mqtt.js\");\nvar mqtt_2 = __webpack_require__(/*! ../common/mqtt */ \"(ssr)/./node_modules/aws-crt/dist/common/mqtt.js\");\nObject.defineProperty(exports, \"QoS\", ({ enumerable: true, get: function () { return mqtt_2.QoS; } }));\nObject.defineProperty(exports, \"MqttWill\", ({ enumerable: true, get: function () { return mqtt_2.MqttWill; } }));\n/**\n * MQTT client\n *\n * @category MQTT\n */\nclass MqttClient extends native_resource_1.NativeResource {\n    /**\n     * @param bootstrap The {@link ClientBootstrap} to use for socket connections.  Leave undefined to use the\n     *          default system-wide bootstrap (recommended).\n     */\n    constructor(bootstrap = undefined) {\n        super(binding_1.default.mqtt_client_new(bootstrap != null ? bootstrap.native_handle() : null));\n        this.bootstrap = bootstrap;\n    }\n    /**\n     * Creates a new {@link MqttClientConnection}\n     * @param config Configuration for the mqtt connection\n     * @returns A new connection\n     */\n    new_connection(config) {\n        return new MqttClientConnection(this, config);\n    }\n}\nexports.MqttClient = MqttClient;\n;\n/**\n * MQTT client connection\n *\n * @category MQTT\n */\nclass MqttClientConnection extends (0, native_resource_1.NativeResourceMixin)(event_1.BufferedEventEmitter) {\n    /**\n     * @param client The client that owns this connection\n     * @param config The configuration for this connection\n     */\n    constructor(client, config) {\n        super();\n        this.client = client;\n        this.config = config;\n        if (config == null || config == undefined) {\n            throw new error_1.CrtError(\"MqttClientConnection constructor: config not defined\");\n        }\n        // If there is a will, ensure that its payload is normalized to a DataView\n        const will = config.will ?\n            {\n                topic: config.will.topic,\n                qos: config.will.qos,\n                payload: crt.normalize_payload(config.will.payload),\n                retain: config.will.retain\n            }\n            : undefined;\n        /** clamp reconnection time out values */\n        var min_sec = mqtt_1.DEFAULT_RECONNECT_MIN_SEC;\n        var max_sec = mqtt_1.DEFAULT_RECONNECT_MAX_SEC;\n        if (config.reconnect_min_sec) {\n            min_sec = config.reconnect_min_sec;\n            // clamp max, in case they only passed in min\n            max_sec = Math.max(min_sec, max_sec);\n        }\n        if (config.reconnect_max_sec) {\n            max_sec = config.reconnect_max_sec;\n            // clamp min, in case they only passed in max (or passed in min > max)\n            min_sec = Math.min(min_sec, max_sec);\n        }\n        if (client == undefined || client == null) {\n            throw new error_1.CrtError(\"MqttClientConnection constructor: client not defined\");\n        }\n        if (config.socket_options == undefined || config.socket_options == null) {\n            throw new error_1.CrtError(\"MqttClientConnection constructor: socket_options in configuration not defined\");\n        }\n        this._super(binding_1.default.mqtt_client_connection_new(client.native_handle(), (error_code) => { this._on_connection_interrupted(error_code); }, (return_code, session_present) => { this._on_connection_resumed(return_code, session_present); }, config.tls_ctx ? config.tls_ctx.native_handle() : null, will, config.username, config.password, config.use_websocket, config.proxy_options ? config.proxy_options.create_native_handle() : undefined, config.websocket_handshake_transform, min_sec, max_sec));\n        this.tls_ctx = config.tls_ctx;\n        binding_1.default.mqtt_client_connection_on_message(this.native_handle(), this._on_any_publish.bind(this));\n        binding_1.default.mqtt_client_connection_on_closed(this.native_handle(), this._on_connection_closed.bind(this));\n        /*\n         * Failed mqtt operations (which is normal) emit error events as well as rejecting the original promise.\n         * By installing a default error handler here we help prevent common issues where operation failures bring\n         * the whole program to an end because a handler wasn't installed.  Programs that install their own handler\n         * will be unaffected.\n         */\n        this.on('error', (error) => { });\n    }\n    close() {\n        binding_1.default.mqtt_client_connection_close(this.native_handle());\n    }\n    // Overridden to allow uncorking on ready\n    on(event, listener) {\n        super.on(event, listener);\n        if (event == 'connect') {\n            process.nextTick(() => {\n                this.uncork();\n            });\n        }\n        return this;\n    }\n    /**\n     * Open the actual connection to the server (async).\n     * @returns A Promise which completes whether the connection succeeds or fails.\n     *          If connection fails, the Promise will reject with an exception.\n     *          If connection succeeds, the Promise will return a boolean that is\n     *          true for resuming an existing session, or false if the session is new\n     */\n    connect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                reject = this._reject(reject);\n                if (this.config.socket_options == null || this.config.socket_options == undefined) {\n                    throw new error_1.CrtError(\"MqttClientConnection connect: socket_options in configuration not defined\");\n                }\n                try {\n                    binding_1.default.mqtt_client_connection_connect(this.native_handle(), this.config.client_id, this.config.host_name, this.config.port, this.config.socket_options.native_handle(), this.config.keep_alive, this.config.ping_timeout, this.config.protocol_operation_timeout, this.config.clean_session, this._on_connect_callback.bind(this, resolve, reject));\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    /**\n     * The connection will automatically reconnect when disconnected, removing the need for this function.\n     * To cease automatic reconnection attempts, call {@link disconnect}.\n     * @deprecated\n     */\n    reconnect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                reject = this._reject(reject);\n                try {\n                    binding_1.default.mqtt_client_connection_reconnect(this.native_handle(), this._on_connect_callback.bind(this, resolve, reject));\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    /**\n     * Publish message (async).\n     * If the device is offline, the PUBLISH packet will be sent once the connection resumes.\n     *\n     * @param topic Topic name\n     * @param payload Contents of message\n     * @param qos Quality of Service for delivering this message\n     * @param retain If true, the server will store the message and its QoS so that it can be\n     *               delivered to future subscribers whose subscriptions match the topic name\n     * @returns Promise which returns a {@link MqttRequest} which will contain the packet id of\n     *          the PUBLISH packet.\n     *\n     * * For QoS 0, completes as soon as the packet is sent.\n     * * For QoS 1, completes when PUBACK is received.\n     * * For QoS 2, completes when PUBCOMP is received.\n     */\n    publish(topic, payload, qos, retain = false) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Skip payload since it can be several different types\n            if (typeof (topic) !== 'string') {\n                return Promise.reject(\"topic is not a string\");\n            }\n            if (typeof (qos) !== 'number') {\n                return Promise.reject(\"qos is not a number\");\n            }\n            if (typeof (retain) !== 'boolean') {\n                return Promise.reject(\"retain is not a boolean\");\n            }\n            return new Promise((resolve, reject) => {\n                reject = this._reject(reject);\n                try {\n                    binding_1.default.mqtt_client_connection_publish(this.native_handle(), topic, crt.normalize_payload(payload), qos, retain, this._on_puback_callback.bind(this, resolve, reject));\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    /**\n     * Subscribe to a topic filter (async).\n     * The client sends a SUBSCRIBE packet and the server responds with a SUBACK.\n     *\n     * subscribe() may be called while the device is offline, though the async\n     * operation cannot complete successfully until the connection resumes.\n     *\n     * Once subscribed, `callback` is invoked each time a message matching\n     * the `topic` is received. It is possible for such messages to arrive before\n     * the SUBACK is received.\n     *\n     * @param topic Subscribe to this topic filter, which may include wildcards\n     * @param qos Maximum requested QoS that server may use when sending messages to the client.\n     *            The server may grant a lower QoS in the SUBACK\n     * @param on_message Optional callback invoked when message received.\n     * @returns Promise which returns a {@link MqttSubscribeRequest} which will contain the\n     *          result of the SUBSCRIBE. The Promise resolves when a SUBACK is returned\n     *          from the server or is rejected when an exception occurs.\n     */\n    subscribe(topic, qos, on_message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof (topic) !== 'string') {\n                return Promise.reject(\"topic is not a string\");\n            }\n            if (typeof (qos) !== 'number') {\n                return Promise.reject(\"qos is not a number\");\n            }\n            return new Promise((resolve, reject) => {\n                reject = this._reject(reject);\n                try {\n                    binding_1.default.mqtt_client_connection_subscribe(this.native_handle(), topic, qos, on_message, this._on_suback_callback.bind(this, resolve, reject));\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    /**\n     * Unsubscribe from a topic filter (async).\n     * The client sends an UNSUBSCRIBE packet, and the server responds with an UNSUBACK.\n     * @param topic The topic filter to unsubscribe from. May contain wildcards.\n     * @returns Promise wihch returns a {@link MqttRequest} which will contain the packet id\n     *          of the UNSUBSCRIBE packet being acknowledged. Promise is resolved when an\n     *          UNSUBACK is received from the server or is rejected when an exception occurs.\n     */\n    unsubscribe(topic) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof (topic) !== 'string') {\n                return Promise.reject(\"topic is not a string\");\n            }\n            return new Promise((resolve, reject) => {\n                reject = this._reject(reject);\n                try {\n                    binding_1.default.mqtt_client_connection_unsubscribe(this.native_handle(), topic, this._on_unsuback_callback.bind(this, resolve, reject));\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    /**\n     * Close the connection (async).\n     *\n     * Will free all native resources, rendering the connection unusable after the disconnect() call.\n     *\n     * @returns Promise which completes when the connection is closed.\n    */\n    disconnect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                reject = this._reject(reject);\n                try {\n                    binding_1.default.mqtt_client_connection_disconnect(this.native_handle(), this._on_disconnect_callback.bind(this, resolve));\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    /**\n     * Queries a small set of numerical statistics about the current state of the connection's operation queue\n     *\n     * @group Node-only\n     */\n    getQueueStatistics() {\n        return binding_1.default.mqtt_client_connection_get_queue_statistics(this.native_handle());\n    }\n    // Wrap a promise rejection with a function that will also emit the error as an event\n    _reject(reject) {\n        return (reason) => {\n            reject(reason);\n            process.nextTick(() => {\n                this.emit('error', new error_1.CrtError(reason));\n            });\n        };\n    }\n    _on_connection_interrupted(error_code) {\n        this.emit('interrupt', new error_1.CrtError(error_code));\n    }\n    _on_connection_resumed(return_code, session_present) {\n        this.emit('resume', return_code, session_present);\n        let successCallbackData = { session_present: session_present, reason_code: return_code };\n        this.emit('connection_success', successCallbackData);\n    }\n    _on_any_publish(topic, payload, dup, qos, retain) {\n        this.emit('message', topic, payload, dup, qos, retain);\n    }\n    _on_connection_closed() {\n        let closedCallbackData = {};\n        this.emit('closed', closedCallbackData);\n        /**\n         * We call close() here instead of on disconnect because on_close is always called AFTER disconnect\n         * but if we call close() before, then we cannot emit the closed callback.\n         */\n        this.close();\n    }\n    _on_connect_callback(resolve, reject, error_code, return_code, session_present) {\n        if (error_code == 0 && return_code == 0) {\n            resolve(session_present);\n            this.emit('connect', session_present);\n            let successCallbackData = { session_present: session_present, reason_code: return_code };\n            this.emit('connection_success', successCallbackData);\n        }\n        else if (error_code != 0) {\n            reject(\"Failed to connect: \" + io.error_code_to_string(error_code));\n            let failureCallbackData = { error: new error_1.CrtError(error_code) };\n            this.emit('connection_failure', failureCallbackData);\n        }\n        else {\n            reject(\"Server rejected connection.\");\n            let failureCallbackData = { error: new error_1.CrtError(5134) }; // 5134 = AWS_ERROR_MQTT_UNEXPECTED_HANGUP\n            this.emit('connection_failure', failureCallbackData);\n        }\n    }\n    _on_puback_callback(resolve, reject, packet_id, error_code) {\n        if (error_code == 0) {\n            resolve({ packet_id });\n        }\n        else {\n            reject(\"Failed to publish: \" + io.error_code_to_string(error_code));\n        }\n    }\n    _on_suback_callback(resolve, reject, packet_id, topic, qos, error_code) {\n        if (error_code == 0) {\n            resolve({ packet_id, topic, qos, error_code });\n        }\n        else {\n            reject(\"Failed to subscribe: \" + io.error_code_to_string(error_code));\n        }\n    }\n    _on_unsuback_callback(resolve, reject, packet_id, error_code) {\n        if (error_code == 0) {\n            resolve({ packet_id });\n        }\n        else {\n            reject(\"Failed to unsubscribe: \" + io.error_code_to_string(error_code));\n        }\n    }\n    _on_disconnect_callback(resolve) {\n        resolve();\n        this.emit('disconnect');\n        /** NOTE: We are NOT calling close() here but instead calling it at\n         * on_closed because it is always called after disconnect */\n    }\n}\nexports.MqttClientConnection = MqttClientConnection;\n/**\n * Emitted when the connection successfully establishes itself for the first time\n *\n * @event\n */\nMqttClientConnection.CONNECT = 'connect';\n/**\n * Emitted when connection has disconnected successfully.\n *\n * @event\n */\nMqttClientConnection.DISCONNECT = 'disconnect';\n/**\n * Emitted when an error occurs.  The error will contain the error\n * code and message.\n *\n * @event\n */\nMqttClientConnection.ERROR = 'error';\n/**\n * Emitted when the connection is dropped unexpectedly. The error will contain the error\n * code and message.  The underlying mqtt implementation will attempt to reconnect.\n *\n * @event\n */\nMqttClientConnection.INTERRUPT = 'interrupt';\n/**\n * Emitted when the connection reconnects (after an interrupt). Only triggers on connections after the initial one.\n *\n * @event\n */\nMqttClientConnection.RESUME = 'resume';\n/**\n * Emitted when any MQTT publish message arrives.\n *\n * @event\n */\nMqttClientConnection.MESSAGE = 'message';\n/**\n * Emitted on every successful connect and reconnect.\n * Will contain a number with the connection reason code and\n * a boolean indicating whether the connection resumed a session.\n *\n * @event\n */\nMqttClientConnection.CONNECTION_SUCCESS = 'connection_success';\n/**\n * Emitted on an unsuccessful connect and reconnect.\n * Will contain an error code indicating the reason for the unsuccessful connection.\n *\n * @event\n */\nMqttClientConnection.CONNECTION_FAILURE = 'connection_failure';\n/**\n * Emitted when the MQTT connection was disconnected and shutdown successfully.\n *\n * @event\n */\nMqttClientConnection.CLOSED = 'closed';\n//# sourceMappingURL=mqtt.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/aws-crt/dist/native/mqtt.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/aws-crt/dist/native/mqtt5.js":
/*!***************************************************!*\
  !*** ./node_modules/aws-crt/dist/native/mqtt5.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Mqtt5Client = exports.ClientExtendedValidationAndFlowControl = exports.ClientOperationQueueBehavior = exports.HttpProxyOptions = void 0;\n/**\n * Node.js specific MQTT5 client implementation\n *\n * DEVELOPER PREVIEW DISCLAIMER\n *\n * MQTT5 support is currently in **developer preview**.  We encourage feedback at all times, but feedback during the\n * preview window is especially valuable in shaping the final product.  During the preview period we may make\n * backwards-incompatible changes to the public API, but in general, this is something we will try our best to avoid.\n *\n * [MQTT5 Client User Guide](https://www.github.com/awslabs/aws-crt-nodejs/blob/main/MQTT5-UserGuide.md)\n *\n * @packageDocumentation\n * @module mqtt5\n * @mergeTarget\n *\n */\nconst binding_1 = __importDefault(__webpack_require__(/*! ./binding */ \"(ssr)/./node_modules/aws-crt/dist/native/binding.js\"));\nconst native_resource_1 = __webpack_require__(/*! ./native_resource */ \"(ssr)/./node_modules/aws-crt/dist/native/native_resource.js\");\nconst event_1 = __webpack_require__(/*! ../common/event */ \"(ssr)/./node_modules/aws-crt/dist/common/event.js\");\nconst io = __importStar(__webpack_require__(/*! ./io */ \"(ssr)/./node_modules/aws-crt/dist/native/io.js\"));\nconst mqtt_shared = __importStar(__webpack_require__(/*! ../common/mqtt_shared */ \"(ssr)/./node_modules/aws-crt/dist/common/mqtt_shared.js\"));\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/aws-crt/dist/native/error.js\");\nvar http_1 = __webpack_require__(/*! ./http */ \"(ssr)/./node_modules/aws-crt/dist/native/http.js\");\nObject.defineProperty(exports, \"HttpProxyOptions\", ({ enumerable: true, get: function () { return http_1.HttpProxyOptions; } }));\n__exportStar(__webpack_require__(/*! ../common/mqtt5 */ \"(ssr)/./node_modules/aws-crt/dist/common/mqtt5.js\"), exports);\n__exportStar(__webpack_require__(/*! ../common/mqtt5_packet */ \"(ssr)/./node_modules/aws-crt/dist/common/mqtt5_packet.js\"), exports);\n;\n/**\n * Controls how disconnects affect the queued and in-progress operations tracked by the client.  Also controls\n * how operations are handled while the client is not connected.  In particular, if the client is not connected,\n * then any operation that would be failed on disconnect (according to these rules) will be rejected.\n */\nvar ClientOperationQueueBehavior;\n(function (ClientOperationQueueBehavior) {\n    /** Same as FailQos0PublishOnDisconnect */\n    ClientOperationQueueBehavior[ClientOperationQueueBehavior[\"Default\"] = 0] = \"Default\";\n    /**\n     * Re-queues QoS 1+ publishes on disconnect; un-acked publishes go to the front while unprocessed publishes stay\n     * in place.  All other operations (QoS 0 publishes, subscribe, unsubscribe) are failed.\n     */\n    ClientOperationQueueBehavior[ClientOperationQueueBehavior[\"FailNonQos1PublishOnDisconnect\"] = 1] = \"FailNonQos1PublishOnDisconnect\";\n    /**\n     * QoS 0 publishes that are not complete at the time of disconnection are failed.  Un-acked QoS 1+ publishes are\n     * re-queued at the head of the line for immediate retransmission on a session resumption.  All other operations\n     * are requeued in original order behind any retransmissions.\n     */\n    ClientOperationQueueBehavior[ClientOperationQueueBehavior[\"FailQos0PublishOnDisconnect\"] = 2] = \"FailQos0PublishOnDisconnect\";\n    /**\n     * All operations that are not complete at the time of disconnection are failed, except operations that\n     * the MQTT5 spec requires to be retransmitted (un-acked QoS1+ publishes).\n     */\n    ClientOperationQueueBehavior[ClientOperationQueueBehavior[\"FailAllOnDisconnect\"] = 3] = \"FailAllOnDisconnect\";\n})(ClientOperationQueueBehavior = exports.ClientOperationQueueBehavior || (exports.ClientOperationQueueBehavior = {}));\n/**\n * Additional controls for client behavior with respect to operation validation and flow control; these checks\n * go beyond the MQTT5 spec to respect limits of specific MQTT brokers.\n */\nvar ClientExtendedValidationAndFlowControl;\n(function (ClientExtendedValidationAndFlowControl) {\n    /**\n     * Do not do any additional validation or flow control\n     */\n    ClientExtendedValidationAndFlowControl[ClientExtendedValidationAndFlowControl[\"None\"] = 0] = \"None\";\n    /**\n     * Apply additional client-side validation and operational flow control that respects the\n     * default AWS IoT Core limits.\n     *\n     * Currently applies the following additional validation:\n     *\n     * 1. No more than 8 subscriptions per SUBSCRIBE packet\n     * 1. Topics and topic filters have a maximum of 7 slashes (8 segments), not counting any AWS rules prefix\n     * 1. Topics must be <= 256 bytes in length\n     * 1. Client id must be <= 128 bytes in length\n     *\n     * Also applies the following flow control:\n     *\n     * 1. Outbound throughput throttled to 512KB/s\n     * 1. Outbound publish TPS throttled to 100\n     */\n    ClientExtendedValidationAndFlowControl[ClientExtendedValidationAndFlowControl[\"AwsIotCoreDefaults\"] = 1] = \"AwsIotCoreDefaults\";\n})(ClientExtendedValidationAndFlowControl = exports.ClientExtendedValidationAndFlowControl || (exports.ClientExtendedValidationAndFlowControl = {}));\n/**\n * Node.js specific MQTT5 client implementation\n *\n * DEVELOPER PREVIEW DISCLAIMER\n *\n * MQTT5 support is currently in **developer preview**.  We encourage feedback at all times, but feedback during the\n * preview window is especially valuable in shaping the final product.  During the preview period we may make\n * backwards-incompatible changes to the public API, but in general, this is something we will try our best to avoid.\n *\n * Not all parts of the MQTT5 spec are supported. We currently do not support:\n *\n * * AUTH packets and the authentication fields in the CONNECT packet\n * * QoS 2\n *\n * [MQTT5 Client User Guide](https://www.github.com/awslabs/aws-crt-nodejs/blob/main/MQTT5-UserGuide.md)\n *\n * This client is based on native resources.  When finished with the client, you must call close() to dispose of\n * them or they will leak.\n *\n */\nclass Mqtt5Client extends (0, native_resource_1.NativeResourceMixin)(event_1.BufferedEventEmitter) {\n    /**\n     * Client constructor\n     *\n     * @param config The configuration for this client\n     */\n    constructor(config) {\n        super();\n        this._super(binding_1.default.mqtt5_client_new(this, config, (client) => { Mqtt5Client._s_on_stopped(client); }, (client) => { Mqtt5Client._s_on_attempting_connect(client); }, (client, connack, settings) => { Mqtt5Client._s_on_connection_success(client, connack, settings); }, (client, errorCode, connack) => { Mqtt5Client._s_on_connection_failure(client, new error_1.CrtError(errorCode), connack); }, (client, errorCode, disconnect) => { Mqtt5Client._s_on_disconnection(client, new error_1.CrtError(errorCode), disconnect); }, (client, message) => { Mqtt5Client._s_on_message_received(client, message); }, config.clientBootstrap ? config.clientBootstrap.native_handle() : null, config.socketOptions ? config.socketOptions.native_handle() : null, config.tlsCtx ? config.tlsCtx.native_handle() : null, config.httpProxyOptions ? config.httpProxyOptions.create_native_handle() : null));\n    }\n    /**\n     * Triggers cleanup of native resources associated with the MQTT5 client.  Once this has been invoked, callbacks\n     * and events are not guaranteed to be received.\n     *\n     * This must be called when finished with a client; otherwise, native resources will leak.  It is not safe\n     * to invoke any further operations on the client after close() has been called.\n     *\n     * For a running client, safe and proper shutdown can be accomplished by\n     *\n     * ```ts\n     * const stopped = once(client, \"stopped\");\n     * client.stop();\n     * await stopped;\n     * client.close();\n     * ```\n     *\n     * This is an asynchronous operation.\n     *\n     * @group Node-only\n     */\n    close() {\n        binding_1.default.mqtt5_client_close(this.native_handle());\n    }\n    /**\n     * Notifies the MQTT5 client that you want it to maintain connectivity to the configured endpoint.\n     * The client will attempt to stay connected using the properties of the reconnect-related parameters\n     * in the mqtt5 client configuration.\n     *\n     * This is an asynchronous operation.\n     */\n    start() {\n        binding_1.default.mqtt5_client_start(this.native_handle());\n    }\n    /**\n     * Notifies the MQTT5 client that you want it to end connectivity to the configured endpoint, disconnecting any\n     * existing connection and halting reconnection attempts.\n     *\n     * This is an asynchronous operation.  Once the process completes, no further events will be emitted until the client\n     * has {@link start} invoked.  Invoking {@link start start()} after a {@link stop stop()} will always result in a\n     * new MQTT session.\n     *\n     * @param disconnectPacket (optional) properties of a DISCONNECT packet to send as part of the shutdown process\n     */\n    stop(disconnectPacket) {\n        binding_1.default.mqtt5_client_stop(this.native_handle(), disconnectPacket);\n    }\n    /**\n     * Subscribe to one or more topic filters by queuing a SUBSCRIBE packet to be sent to the server.\n     *\n     * @param packet SUBSCRIBE packet to send to the server\n     * @returns a promise that will be rejected with an error or resolved with the SUBACK response\n     */\n    subscribe(packet) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                function curriedPromiseCallback(client, errorCode, suback) {\n                    return Mqtt5Client._s_on_suback_callback(resolve, reject, client, errorCode, suback);\n                }\n                try {\n                    binding_1.default.mqtt5_client_subscribe(this.native_handle(), packet, curriedPromiseCallback);\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    /**\n     * Unsubscribe from one or more topic filters by queuing an UNSUBSCRIBE packet to be sent to the server.\n     *\n     * @param packet UNSUBSCRIBE packet to send to the server\n     * @returns a promise that will be rejected with an error or resolved with the UNSUBACK response\n     */\n    unsubscribe(packet) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                function curriedPromiseCallback(client, errorCode, unsuback) {\n                    return Mqtt5Client._s_on_unsuback_callback(resolve, reject, client, errorCode, unsuback);\n                }\n                try {\n                    binding_1.default.mqtt5_client_unsubscribe(this.native_handle(), packet, curriedPromiseCallback);\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    /**\n     * Send a message to subscribing clients by queuing a PUBLISH packet to be sent to the server.\n     *\n     * @param packet PUBLISH packet to send to the server\n     * @returns a promise that will be rejected with an error or resolved with the PUBACK response (QoS 1) or\n     * undefined (QoS 0)\n     */\n    publish(packet) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => {\n                if (packet && packet.payload) {\n                    packet.payload = mqtt_shared.normalize_payload(packet.payload);\n                }\n                function curriedPromiseCallback(client, errorCode, result) {\n                    return Mqtt5Client._s_on_puback_callback(resolve, reject, client, errorCode, result);\n                }\n                try {\n                    binding_1.default.mqtt5_client_publish(this.native_handle(), packet, curriedPromiseCallback);\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    /**\n     * Queries a small set of numerical statistics about the current state of the client's operation queue\n     *\n     * @group Node-only\n     */\n    getQueueStatistics() {\n        return binding_1.default.mqtt5_client_get_queue_statistics(this.native_handle());\n    }\n    on(event, listener) {\n        super.on(event, listener);\n        return this;\n    }\n    /*\n     * Private helper functions\n     *\n     * Callbacks come through static functions so that the native threadsafe function objects do not\n     * capture the client object itself, simplifying the number of strong references to the client floating around.\n     */\n    static _s_on_stopped(client) {\n        process.nextTick(() => {\n            let stoppedEvent = {};\n            client.emit(Mqtt5Client.STOPPED, stoppedEvent);\n        });\n    }\n    static _s_on_attempting_connect(client) {\n        process.nextTick(() => {\n            let attemptingConnectEvent = {};\n            client.emit(Mqtt5Client.ATTEMPTING_CONNECT, attemptingConnectEvent);\n        });\n    }\n    static _s_on_connection_success(client, connack, settings) {\n        let connectionSuccessEvent = {\n            connack: connack,\n            settings: settings\n        };\n        process.nextTick(() => {\n            client.emit(Mqtt5Client.CONNECTION_SUCCESS, connectionSuccessEvent);\n        });\n    }\n    static _s_on_connection_failure(client, error, connack) {\n        let connectionFailureEvent = {\n            error: error\n        };\n        if (connack !== null && connack !== undefined) {\n            connectionFailureEvent.connack = connack;\n        }\n        process.nextTick(() => {\n            client.emit(Mqtt5Client.CONNECTION_FAILURE, connectionFailureEvent);\n        });\n    }\n    static _s_on_disconnection(client, error, disconnect) {\n        let disconnectionEvent = {\n            error: error\n        };\n        if (disconnect !== null && disconnect !== undefined) {\n            disconnectionEvent.disconnect = disconnect;\n        }\n        process.nextTick(() => {\n            client.emit(Mqtt5Client.DISCONNECTION, disconnectionEvent);\n        });\n    }\n    static _s_on_suback_callback(resolve, reject, client, errorCode, suback) {\n        if (errorCode == 0 && suback !== undefined) {\n            resolve(suback);\n        }\n        else {\n            reject(io.error_code_to_string(errorCode));\n        }\n    }\n    static _s_on_unsuback_callback(resolve, reject, client, errorCode, unsuback) {\n        if (errorCode == 0 && unsuback !== undefined) {\n            resolve(unsuback);\n        }\n        else {\n            reject(io.error_code_to_string(errorCode));\n        }\n    }\n    static _s_on_puback_callback(resolve, reject, client, errorCode, result) {\n        if (errorCode == 0) {\n            resolve(result);\n        }\n        else {\n            reject(io.error_code_to_string(errorCode));\n        }\n    }\n    static _s_on_message_received(client, message) {\n        let messageReceivedEvent = {\n            message: message\n        };\n        process.nextTick(() => {\n            client.emit(Mqtt5Client.MESSAGE_RECEIVED, messageReceivedEvent);\n        });\n    }\n}\nexports.Mqtt5Client = Mqtt5Client;\n/**\n * Event emitted when the client encounters a serious error condition, such as invalid input, napi failures, and\n * other potentially unrecoverable situations.\n *\n * Listener type: {@link ErrorEventListener}\n *\n * @event\n */\nMqtt5Client.ERROR = 'error';\n/**\n * Event emitted when an MQTT PUBLISH packet is received by the client.\n *\n * Listener type: {@link MessageReceivedEventListener}\n *\n * @event\n */\nMqtt5Client.MESSAGE_RECEIVED = 'messageReceived';\n/**\n * Event emitted when the client begins a connection attempt.\n *\n * Listener type: {@link AttemptingConnectEventListener}\n *\n * @event\n */\nMqtt5Client.ATTEMPTING_CONNECT = 'attemptingConnect';\n/**\n * Event emitted when the client successfully establishes an MQTT connection.  Only emitted after\n * an {@link ATTEMPTING_CONNECT attemptingConnect} event.\n *\n * Listener type: {@link ConnectionSuccessEventListener}\n *\n * @event\n */\nMqtt5Client.CONNECTION_SUCCESS = 'connectionSuccess';\n/**\n * Event emitted when the client fails to establish an MQTT connection.  Only emitted after\n * an {@link ATTEMPTING_CONNECT attemptingConnect} event.\n *\n * Listener type: {@link ConnectionFailureEventListener}\n *\n * @event\n */\nMqtt5Client.CONNECTION_FAILURE = 'connectionFailure';\n/**\n * Event emitted when the client's current connection is closed for any reason.  Only emitted after\n * a {@link CONNECTION_SUCCESS connectionSuccess} event.\n *\n * Listener type: {@link DisconnectionEventListener}\n *\n * @event\n */\nMqtt5Client.DISCONNECTION = 'disconnection';\n/**\n * Event emitted when the client finishes shutdown as a result of the user invoking {@link stop}.\n *\n * Listener type: {@link StoppedEventListener}\n *\n * @event\n */\nMqtt5Client.STOPPED = 'stopped';\n//# sourceMappingURL=mqtt5.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXdzLWNydC9kaXN0L25hdGl2ZS9tcXR0NS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSwwQ0FBMEMsNEJBQTRCO0FBQ3RFLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLCtEQUErRCxpQkFBaUI7QUFDNUc7QUFDQSxvQ0FBb0MsTUFBTSwrQkFBK0IsWUFBWTtBQUNyRixtQ0FBbUMsTUFBTSxtQ0FBbUMsWUFBWTtBQUN4RixnQ0FBZ0M7QUFDaEM7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUIsR0FBRyw4Q0FBOEMsR0FBRyxvQ0FBb0MsR0FBRyx3QkFBd0I7QUFDdEk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsbUJBQU8sQ0FBQyxzRUFBVztBQUNyRCwwQkFBMEIsbUJBQU8sQ0FBQyxzRkFBbUI7QUFDckQsZ0JBQWdCLG1CQUFPLENBQUMsMEVBQWlCO0FBQ3pDLHdCQUF3QixtQkFBTyxDQUFDLDREQUFNO0FBQ3RDLGlDQUFpQyxtQkFBTyxDQUFDLHNGQUF1QjtBQUNoRSxnQkFBZ0IsbUJBQU8sQ0FBQyxrRUFBUztBQUNqQyxhQUFhLG1CQUFPLENBQUMsZ0VBQVE7QUFDN0Isb0RBQW1ELEVBQUUscUNBQXFDLG1DQUFtQyxFQUFDO0FBQzlILGFBQWEsbUJBQU8sQ0FBQywwRUFBaUI7QUFDdEMsYUFBYSxtQkFBTyxDQUFDLHdGQUF3QjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDBFQUEwRSxvQ0FBb0MsS0FBSztBQUNwSDtBQUNBLGtHQUFrRztBQUNsRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsOEZBQThGLDhDQUE4QyxLQUFLO0FBQ2xKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUZBQW1GLG9DQUFvQyxnQkFBZ0IsK0NBQStDLG1DQUFtQyxrRUFBa0Usb0NBQW9DLHlGQUF5Rix1Q0FBdUMsdUZBQXVGLHlCQUF5QixzREFBc0Q7QUFDcm1CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0Q7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxhQUFhLG9CQUFvQixxQkFBcUIsU0FBUyxtQkFBbUI7QUFDOUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sNENBQTRDO0FBQ25EO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sNENBQTRDO0FBQ25EO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sNENBQTRDO0FBQ2xEO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRkFBcUYsV0FBVztBQUNoRztBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGF5d2luZC8uL25vZGVfbW9kdWxlcy9hd3MtY3J0L2Rpc3QvbmF0aXZlL21xdHQ1LmpzPzkzMDgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IEFtYXpvbi5jb20sIEluYy4gb3IgaXRzIGFmZmlsaWF0ZXMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMC5cbiAqL1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1xdHQ1Q2xpZW50ID0gZXhwb3J0cy5DbGllbnRFeHRlbmRlZFZhbGlkYXRpb25BbmRGbG93Q29udHJvbCA9IGV4cG9ydHMuQ2xpZW50T3BlcmF0aW9uUXVldWVCZWhhdmlvciA9IGV4cG9ydHMuSHR0cFByb3h5T3B0aW9ucyA9IHZvaWQgMDtcbi8qKlxuICogTm9kZS5qcyBzcGVjaWZpYyBNUVRUNSBjbGllbnQgaW1wbGVtZW50YXRpb25cbiAqXG4gKiBERVZFTE9QRVIgUFJFVklFVyBESVNDTEFJTUVSXG4gKlxuICogTVFUVDUgc3VwcG9ydCBpcyBjdXJyZW50bHkgaW4gKipkZXZlbG9wZXIgcHJldmlldyoqLiAgV2UgZW5jb3VyYWdlIGZlZWRiYWNrIGF0IGFsbCB0aW1lcywgYnV0IGZlZWRiYWNrIGR1cmluZyB0aGVcbiAqIHByZXZpZXcgd2luZG93IGlzIGVzcGVjaWFsbHkgdmFsdWFibGUgaW4gc2hhcGluZyB0aGUgZmluYWwgcHJvZHVjdC4gIER1cmluZyB0aGUgcHJldmlldyBwZXJpb2Qgd2UgbWF5IG1ha2VcbiAqIGJhY2t3YXJkcy1pbmNvbXBhdGlibGUgY2hhbmdlcyB0byB0aGUgcHVibGljIEFQSSwgYnV0IGluIGdlbmVyYWwsIHRoaXMgaXMgc29tZXRoaW5nIHdlIHdpbGwgdHJ5IG91ciBiZXN0IHRvIGF2b2lkLlxuICpcbiAqIFtNUVRUNSBDbGllbnQgVXNlciBHdWlkZV0oaHR0cHM6Ly93d3cuZ2l0aHViLmNvbS9hd3NsYWJzL2F3cy1jcnQtbm9kZWpzL2Jsb2IvbWFpbi9NUVRUNS1Vc2VyR3VpZGUubWQpXG4gKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIG1xdHQ1XG4gKiBAbWVyZ2VUYXJnZXRcbiAqXG4gKi9cbmNvbnN0IGJpbmRpbmdfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9iaW5kaW5nXCIpKTtcbmNvbnN0IG5hdGl2ZV9yZXNvdXJjZV8xID0gcmVxdWlyZShcIi4vbmF0aXZlX3Jlc291cmNlXCIpO1xuY29uc3QgZXZlbnRfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vZXZlbnRcIik7XG5jb25zdCBpbyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9pb1wiKSk7XG5jb25zdCBtcXR0X3NoYXJlZCA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi4vY29tbW9uL21xdHRfc2hhcmVkXCIpKTtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi9lcnJvclwiKTtcbnZhciBodHRwXzEgPSByZXF1aXJlKFwiLi9odHRwXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiSHR0cFByb3h5T3B0aW9uc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaHR0cF8xLkh0dHBQcm94eU9wdGlvbnM7IH0gfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4uL2NvbW1vbi9tcXR0NVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4uL2NvbW1vbi9tcXR0NV9wYWNrZXRcIiksIGV4cG9ydHMpO1xuO1xuLyoqXG4gKiBDb250cm9scyBob3cgZGlzY29ubmVjdHMgYWZmZWN0IHRoZSBxdWV1ZWQgYW5kIGluLXByb2dyZXNzIG9wZXJhdGlvbnMgdHJhY2tlZCBieSB0aGUgY2xpZW50LiAgQWxzbyBjb250cm9sc1xuICogaG93IG9wZXJhdGlvbnMgYXJlIGhhbmRsZWQgd2hpbGUgdGhlIGNsaWVudCBpcyBub3QgY29ubmVjdGVkLiAgSW4gcGFydGljdWxhciwgaWYgdGhlIGNsaWVudCBpcyBub3QgY29ubmVjdGVkLFxuICogdGhlbiBhbnkgb3BlcmF0aW9uIHRoYXQgd291bGQgYmUgZmFpbGVkIG9uIGRpc2Nvbm5lY3QgKGFjY29yZGluZyB0byB0aGVzZSBydWxlcykgd2lsbCBiZSByZWplY3RlZC5cbiAqL1xudmFyIENsaWVudE9wZXJhdGlvblF1ZXVlQmVoYXZpb3I7XG4oZnVuY3Rpb24gKENsaWVudE9wZXJhdGlvblF1ZXVlQmVoYXZpb3IpIHtcbiAgICAvKiogU2FtZSBhcyBGYWlsUW9zMFB1Ymxpc2hPbkRpc2Nvbm5lY3QgKi9cbiAgICBDbGllbnRPcGVyYXRpb25RdWV1ZUJlaGF2aW9yW0NsaWVudE9wZXJhdGlvblF1ZXVlQmVoYXZpb3JbXCJEZWZhdWx0XCJdID0gMF0gPSBcIkRlZmF1bHRcIjtcbiAgICAvKipcbiAgICAgKiBSZS1xdWV1ZXMgUW9TIDErIHB1Ymxpc2hlcyBvbiBkaXNjb25uZWN0OyB1bi1hY2tlZCBwdWJsaXNoZXMgZ28gdG8gdGhlIGZyb250IHdoaWxlIHVucHJvY2Vzc2VkIHB1Ymxpc2hlcyBzdGF5XG4gICAgICogaW4gcGxhY2UuICBBbGwgb3RoZXIgb3BlcmF0aW9ucyAoUW9TIDAgcHVibGlzaGVzLCBzdWJzY3JpYmUsIHVuc3Vic2NyaWJlKSBhcmUgZmFpbGVkLlxuICAgICAqL1xuICAgIENsaWVudE9wZXJhdGlvblF1ZXVlQmVoYXZpb3JbQ2xpZW50T3BlcmF0aW9uUXVldWVCZWhhdmlvcltcIkZhaWxOb25Rb3MxUHVibGlzaE9uRGlzY29ubmVjdFwiXSA9IDFdID0gXCJGYWlsTm9uUW9zMVB1Ymxpc2hPbkRpc2Nvbm5lY3RcIjtcbiAgICAvKipcbiAgICAgKiBRb1MgMCBwdWJsaXNoZXMgdGhhdCBhcmUgbm90IGNvbXBsZXRlIGF0IHRoZSB0aW1lIG9mIGRpc2Nvbm5lY3Rpb24gYXJlIGZhaWxlZC4gIFVuLWFja2VkIFFvUyAxKyBwdWJsaXNoZXMgYXJlXG4gICAgICogcmUtcXVldWVkIGF0IHRoZSBoZWFkIG9mIHRoZSBsaW5lIGZvciBpbW1lZGlhdGUgcmV0cmFuc21pc3Npb24gb24gYSBzZXNzaW9uIHJlc3VtcHRpb24uICBBbGwgb3RoZXIgb3BlcmF0aW9uc1xuICAgICAqIGFyZSByZXF1ZXVlZCBpbiBvcmlnaW5hbCBvcmRlciBiZWhpbmQgYW55IHJldHJhbnNtaXNzaW9ucy5cbiAgICAgKi9cbiAgICBDbGllbnRPcGVyYXRpb25RdWV1ZUJlaGF2aW9yW0NsaWVudE9wZXJhdGlvblF1ZXVlQmVoYXZpb3JbXCJGYWlsUW9zMFB1Ymxpc2hPbkRpc2Nvbm5lY3RcIl0gPSAyXSA9IFwiRmFpbFFvczBQdWJsaXNoT25EaXNjb25uZWN0XCI7XG4gICAgLyoqXG4gICAgICogQWxsIG9wZXJhdGlvbnMgdGhhdCBhcmUgbm90IGNvbXBsZXRlIGF0IHRoZSB0aW1lIG9mIGRpc2Nvbm5lY3Rpb24gYXJlIGZhaWxlZCwgZXhjZXB0IG9wZXJhdGlvbnMgdGhhdFxuICAgICAqIHRoZSBNUVRUNSBzcGVjIHJlcXVpcmVzIHRvIGJlIHJldHJhbnNtaXR0ZWQgKHVuLWFja2VkIFFvUzErIHB1Ymxpc2hlcykuXG4gICAgICovXG4gICAgQ2xpZW50T3BlcmF0aW9uUXVldWVCZWhhdmlvcltDbGllbnRPcGVyYXRpb25RdWV1ZUJlaGF2aW9yW1wiRmFpbEFsbE9uRGlzY29ubmVjdFwiXSA9IDNdID0gXCJGYWlsQWxsT25EaXNjb25uZWN0XCI7XG59KShDbGllbnRPcGVyYXRpb25RdWV1ZUJlaGF2aW9yID0gZXhwb3J0cy5DbGllbnRPcGVyYXRpb25RdWV1ZUJlaGF2aW9yIHx8IChleHBvcnRzLkNsaWVudE9wZXJhdGlvblF1ZXVlQmVoYXZpb3IgPSB7fSkpO1xuLyoqXG4gKiBBZGRpdGlvbmFsIGNvbnRyb2xzIGZvciBjbGllbnQgYmVoYXZpb3Igd2l0aCByZXNwZWN0IHRvIG9wZXJhdGlvbiB2YWxpZGF0aW9uIGFuZCBmbG93IGNvbnRyb2w7IHRoZXNlIGNoZWNrc1xuICogZ28gYmV5b25kIHRoZSBNUVRUNSBzcGVjIHRvIHJlc3BlY3QgbGltaXRzIG9mIHNwZWNpZmljIE1RVFQgYnJva2Vycy5cbiAqL1xudmFyIENsaWVudEV4dGVuZGVkVmFsaWRhdGlvbkFuZEZsb3dDb250cm9sO1xuKGZ1bmN0aW9uIChDbGllbnRFeHRlbmRlZFZhbGlkYXRpb25BbmRGbG93Q29udHJvbCkge1xuICAgIC8qKlxuICAgICAqIERvIG5vdCBkbyBhbnkgYWRkaXRpb25hbCB2YWxpZGF0aW9uIG9yIGZsb3cgY29udHJvbFxuICAgICAqL1xuICAgIENsaWVudEV4dGVuZGVkVmFsaWRhdGlvbkFuZEZsb3dDb250cm9sW0NsaWVudEV4dGVuZGVkVmFsaWRhdGlvbkFuZEZsb3dDb250cm9sW1wiTm9uZVwiXSA9IDBdID0gXCJOb25lXCI7XG4gICAgLyoqXG4gICAgICogQXBwbHkgYWRkaXRpb25hbCBjbGllbnQtc2lkZSB2YWxpZGF0aW9uIGFuZCBvcGVyYXRpb25hbCBmbG93IGNvbnRyb2wgdGhhdCByZXNwZWN0cyB0aGVcbiAgICAgKiBkZWZhdWx0IEFXUyBJb1QgQ29yZSBsaW1pdHMuXG4gICAgICpcbiAgICAgKiBDdXJyZW50bHkgYXBwbGllcyB0aGUgZm9sbG93aW5nIGFkZGl0aW9uYWwgdmFsaWRhdGlvbjpcbiAgICAgKlxuICAgICAqIDEuIE5vIG1vcmUgdGhhbiA4IHN1YnNjcmlwdGlvbnMgcGVyIFNVQlNDUklCRSBwYWNrZXRcbiAgICAgKiAxLiBUb3BpY3MgYW5kIHRvcGljIGZpbHRlcnMgaGF2ZSBhIG1heGltdW0gb2YgNyBzbGFzaGVzICg4IHNlZ21lbnRzKSwgbm90IGNvdW50aW5nIGFueSBBV1MgcnVsZXMgcHJlZml4XG4gICAgICogMS4gVG9waWNzIG11c3QgYmUgPD0gMjU2IGJ5dGVzIGluIGxlbmd0aFxuICAgICAqIDEuIENsaWVudCBpZCBtdXN0IGJlIDw9IDEyOCBieXRlcyBpbiBsZW5ndGhcbiAgICAgKlxuICAgICAqIEFsc28gYXBwbGllcyB0aGUgZm9sbG93aW5nIGZsb3cgY29udHJvbDpcbiAgICAgKlxuICAgICAqIDEuIE91dGJvdW5kIHRocm91Z2hwdXQgdGhyb3R0bGVkIHRvIDUxMktCL3NcbiAgICAgKiAxLiBPdXRib3VuZCBwdWJsaXNoIFRQUyB0aHJvdHRsZWQgdG8gMTAwXG4gICAgICovXG4gICAgQ2xpZW50RXh0ZW5kZWRWYWxpZGF0aW9uQW5kRmxvd0NvbnRyb2xbQ2xpZW50RXh0ZW5kZWRWYWxpZGF0aW9uQW5kRmxvd0NvbnRyb2xbXCJBd3NJb3RDb3JlRGVmYXVsdHNcIl0gPSAxXSA9IFwiQXdzSW90Q29yZURlZmF1bHRzXCI7XG59KShDbGllbnRFeHRlbmRlZFZhbGlkYXRpb25BbmRGbG93Q29udHJvbCA9IGV4cG9ydHMuQ2xpZW50RXh0ZW5kZWRWYWxpZGF0aW9uQW5kRmxvd0NvbnRyb2wgfHwgKGV4cG9ydHMuQ2xpZW50RXh0ZW5kZWRWYWxpZGF0aW9uQW5kRmxvd0NvbnRyb2wgPSB7fSkpO1xuLyoqXG4gKiBOb2RlLmpzIHNwZWNpZmljIE1RVFQ1IGNsaWVudCBpbXBsZW1lbnRhdGlvblxuICpcbiAqIERFVkVMT1BFUiBQUkVWSUVXIERJU0NMQUlNRVJcbiAqXG4gKiBNUVRUNSBzdXBwb3J0IGlzIGN1cnJlbnRseSBpbiAqKmRldmVsb3BlciBwcmV2aWV3KiouICBXZSBlbmNvdXJhZ2UgZmVlZGJhY2sgYXQgYWxsIHRpbWVzLCBidXQgZmVlZGJhY2sgZHVyaW5nIHRoZVxuICogcHJldmlldyB3aW5kb3cgaXMgZXNwZWNpYWxseSB2YWx1YWJsZSBpbiBzaGFwaW5nIHRoZSBmaW5hbCBwcm9kdWN0LiAgRHVyaW5nIHRoZSBwcmV2aWV3IHBlcmlvZCB3ZSBtYXkgbWFrZVxuICogYmFja3dhcmRzLWluY29tcGF0aWJsZSBjaGFuZ2VzIHRvIHRoZSBwdWJsaWMgQVBJLCBidXQgaW4gZ2VuZXJhbCwgdGhpcyBpcyBzb21ldGhpbmcgd2Ugd2lsbCB0cnkgb3VyIGJlc3QgdG8gYXZvaWQuXG4gKlxuICogTm90IGFsbCBwYXJ0cyBvZiB0aGUgTVFUVDUgc3BlYyBhcmUgc3VwcG9ydGVkLiBXZSBjdXJyZW50bHkgZG8gbm90IHN1cHBvcnQ6XG4gKlxuICogKiBBVVRIIHBhY2tldHMgYW5kIHRoZSBhdXRoZW50aWNhdGlvbiBmaWVsZHMgaW4gdGhlIENPTk5FQ1QgcGFja2V0XG4gKiAqIFFvUyAyXG4gKlxuICogW01RVFQ1IENsaWVudCBVc2VyIEd1aWRlXShodHRwczovL3d3dy5naXRodWIuY29tL2F3c2xhYnMvYXdzLWNydC1ub2RlanMvYmxvYi9tYWluL01RVFQ1LVVzZXJHdWlkZS5tZClcbiAqXG4gKiBUaGlzIGNsaWVudCBpcyBiYXNlZCBvbiBuYXRpdmUgcmVzb3VyY2VzLiAgV2hlbiBmaW5pc2hlZCB3aXRoIHRoZSBjbGllbnQsIHlvdSBtdXN0IGNhbGwgY2xvc2UoKSB0byBkaXNwb3NlIG9mXG4gKiB0aGVtIG9yIHRoZXkgd2lsbCBsZWFrLlxuICpcbiAqL1xuY2xhc3MgTXF0dDVDbGllbnQgZXh0ZW5kcyAoMCwgbmF0aXZlX3Jlc291cmNlXzEuTmF0aXZlUmVzb3VyY2VNaXhpbikoZXZlbnRfMS5CdWZmZXJlZEV2ZW50RW1pdHRlcikge1xuICAgIC8qKlxuICAgICAqIENsaWVudCBjb25zdHJ1Y3RvclxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbmZpZyBUaGUgY29uZmlndXJhdGlvbiBmb3IgdGhpcyBjbGllbnRcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fc3VwZXIoYmluZGluZ18xLmRlZmF1bHQubXF0dDVfY2xpZW50X25ldyh0aGlzLCBjb25maWcsIChjbGllbnQpID0+IHsgTXF0dDVDbGllbnQuX3Nfb25fc3RvcHBlZChjbGllbnQpOyB9LCAoY2xpZW50KSA9PiB7IE1xdHQ1Q2xpZW50Ll9zX29uX2F0dGVtcHRpbmdfY29ubmVjdChjbGllbnQpOyB9LCAoY2xpZW50LCBjb25uYWNrLCBzZXR0aW5ncykgPT4geyBNcXR0NUNsaWVudC5fc19vbl9jb25uZWN0aW9uX3N1Y2Nlc3MoY2xpZW50LCBjb25uYWNrLCBzZXR0aW5ncyk7IH0sIChjbGllbnQsIGVycm9yQ29kZSwgY29ubmFjaykgPT4geyBNcXR0NUNsaWVudC5fc19vbl9jb25uZWN0aW9uX2ZhaWx1cmUoY2xpZW50LCBuZXcgZXJyb3JfMS5DcnRFcnJvcihlcnJvckNvZGUpLCBjb25uYWNrKTsgfSwgKGNsaWVudCwgZXJyb3JDb2RlLCBkaXNjb25uZWN0KSA9PiB7IE1xdHQ1Q2xpZW50Ll9zX29uX2Rpc2Nvbm5lY3Rpb24oY2xpZW50LCBuZXcgZXJyb3JfMS5DcnRFcnJvcihlcnJvckNvZGUpLCBkaXNjb25uZWN0KTsgfSwgKGNsaWVudCwgbWVzc2FnZSkgPT4geyBNcXR0NUNsaWVudC5fc19vbl9tZXNzYWdlX3JlY2VpdmVkKGNsaWVudCwgbWVzc2FnZSk7IH0sIGNvbmZpZy5jbGllbnRCb290c3RyYXAgPyBjb25maWcuY2xpZW50Qm9vdHN0cmFwLm5hdGl2ZV9oYW5kbGUoKSA6IG51bGwsIGNvbmZpZy5zb2NrZXRPcHRpb25zID8gY29uZmlnLnNvY2tldE9wdGlvbnMubmF0aXZlX2hhbmRsZSgpIDogbnVsbCwgY29uZmlnLnRsc0N0eCA/IGNvbmZpZy50bHNDdHgubmF0aXZlX2hhbmRsZSgpIDogbnVsbCwgY29uZmlnLmh0dHBQcm94eU9wdGlvbnMgPyBjb25maWcuaHR0cFByb3h5T3B0aW9ucy5jcmVhdGVfbmF0aXZlX2hhbmRsZSgpIDogbnVsbCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VycyBjbGVhbnVwIG9mIG5hdGl2ZSByZXNvdXJjZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBNUVRUNSBjbGllbnQuICBPbmNlIHRoaXMgaGFzIGJlZW4gaW52b2tlZCwgY2FsbGJhY2tzXG4gICAgICogYW5kIGV2ZW50cyBhcmUgbm90IGd1YXJhbnRlZWQgdG8gYmUgcmVjZWl2ZWQuXG4gICAgICpcbiAgICAgKiBUaGlzIG11c3QgYmUgY2FsbGVkIHdoZW4gZmluaXNoZWQgd2l0aCBhIGNsaWVudDsgb3RoZXJ3aXNlLCBuYXRpdmUgcmVzb3VyY2VzIHdpbGwgbGVhay4gIEl0IGlzIG5vdCBzYWZlXG4gICAgICogdG8gaW52b2tlIGFueSBmdXJ0aGVyIG9wZXJhdGlvbnMgb24gdGhlIGNsaWVudCBhZnRlciBjbG9zZSgpIGhhcyBiZWVuIGNhbGxlZC5cbiAgICAgKlxuICAgICAqIEZvciBhIHJ1bm5pbmcgY2xpZW50LCBzYWZlIGFuZCBwcm9wZXIgc2h1dGRvd24gY2FuIGJlIGFjY29tcGxpc2hlZCBieVxuICAgICAqXG4gICAgICogYGBgdHNcbiAgICAgKiBjb25zdCBzdG9wcGVkID0gb25jZShjbGllbnQsIFwic3RvcHBlZFwiKTtcbiAgICAgKiBjbGllbnQuc3RvcCgpO1xuICAgICAqIGF3YWl0IHN0b3BwZWQ7XG4gICAgICogY2xpZW50LmNsb3NlKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBUaGlzIGlzIGFuIGFzeW5jaHJvbm91cyBvcGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAZ3JvdXAgTm9kZS1vbmx5XG4gICAgICovXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIGJpbmRpbmdfMS5kZWZhdWx0Lm1xdHQ1X2NsaWVudF9jbG9zZSh0aGlzLm5hdGl2ZV9oYW5kbGUoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE5vdGlmaWVzIHRoZSBNUVRUNSBjbGllbnQgdGhhdCB5b3Ugd2FudCBpdCB0byBtYWludGFpbiBjb25uZWN0aXZpdHkgdG8gdGhlIGNvbmZpZ3VyZWQgZW5kcG9pbnQuXG4gICAgICogVGhlIGNsaWVudCB3aWxsIGF0dGVtcHQgdG8gc3RheSBjb25uZWN0ZWQgdXNpbmcgdGhlIHByb3BlcnRpZXMgb2YgdGhlIHJlY29ubmVjdC1yZWxhdGVkIHBhcmFtZXRlcnNcbiAgICAgKiBpbiB0aGUgbXF0dDUgY2xpZW50IGNvbmZpZ3VyYXRpb24uXG4gICAgICpcbiAgICAgKiBUaGlzIGlzIGFuIGFzeW5jaHJvbm91cyBvcGVyYXRpb24uXG4gICAgICovXG4gICAgc3RhcnQoKSB7XG4gICAgICAgIGJpbmRpbmdfMS5kZWZhdWx0Lm1xdHQ1X2NsaWVudF9zdGFydCh0aGlzLm5hdGl2ZV9oYW5kbGUoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE5vdGlmaWVzIHRoZSBNUVRUNSBjbGllbnQgdGhhdCB5b3Ugd2FudCBpdCB0byBlbmQgY29ubmVjdGl2aXR5IHRvIHRoZSBjb25maWd1cmVkIGVuZHBvaW50LCBkaXNjb25uZWN0aW5nIGFueVxuICAgICAqIGV4aXN0aW5nIGNvbm5lY3Rpb24gYW5kIGhhbHRpbmcgcmVjb25uZWN0aW9uIGF0dGVtcHRzLlxuICAgICAqXG4gICAgICogVGhpcyBpcyBhbiBhc3luY2hyb25vdXMgb3BlcmF0aW9uLiAgT25jZSB0aGUgcHJvY2VzcyBjb21wbGV0ZXMsIG5vIGZ1cnRoZXIgZXZlbnRzIHdpbGwgYmUgZW1pdHRlZCB1bnRpbCB0aGUgY2xpZW50XG4gICAgICogaGFzIHtAbGluayBzdGFydH0gaW52b2tlZC4gIEludm9raW5nIHtAbGluayBzdGFydCBzdGFydCgpfSBhZnRlciBhIHtAbGluayBzdG9wIHN0b3AoKX0gd2lsbCBhbHdheXMgcmVzdWx0IGluIGFcbiAgICAgKiBuZXcgTVFUVCBzZXNzaW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIGRpc2Nvbm5lY3RQYWNrZXQgKG9wdGlvbmFsKSBwcm9wZXJ0aWVzIG9mIGEgRElTQ09OTkVDVCBwYWNrZXQgdG8gc2VuZCBhcyBwYXJ0IG9mIHRoZSBzaHV0ZG93biBwcm9jZXNzXG4gICAgICovXG4gICAgc3RvcChkaXNjb25uZWN0UGFja2V0KSB7XG4gICAgICAgIGJpbmRpbmdfMS5kZWZhdWx0Lm1xdHQ1X2NsaWVudF9zdG9wKHRoaXMubmF0aXZlX2hhbmRsZSgpLCBkaXNjb25uZWN0UGFja2V0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU3Vic2NyaWJlIHRvIG9uZSBvciBtb3JlIHRvcGljIGZpbHRlcnMgYnkgcXVldWluZyBhIFNVQlNDUklCRSBwYWNrZXQgdG8gYmUgc2VudCB0byB0aGUgc2VydmVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhY2tldCBTVUJTQ1JJQkUgcGFja2V0IHRvIHNlbmQgdG8gdGhlIHNlcnZlclxuICAgICAqIEByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHdpbGwgYmUgcmVqZWN0ZWQgd2l0aCBhbiBlcnJvciBvciByZXNvbHZlZCB3aXRoIHRoZSBTVUJBQ0sgcmVzcG9uc2VcbiAgICAgKi9cbiAgICBzdWJzY3JpYmUocGFja2V0KSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGN1cnJpZWRQcm9taXNlQ2FsbGJhY2soY2xpZW50LCBlcnJvckNvZGUsIHN1YmFjaykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTXF0dDVDbGllbnQuX3Nfb25fc3ViYWNrX2NhbGxiYWNrKHJlc29sdmUsIHJlamVjdCwgY2xpZW50LCBlcnJvckNvZGUsIHN1YmFjayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGJpbmRpbmdfMS5kZWZhdWx0Lm1xdHQ1X2NsaWVudF9zdWJzY3JpYmUodGhpcy5uYXRpdmVfaGFuZGxlKCksIHBhY2tldCwgY3VycmllZFByb21pc2VDYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVuc3Vic2NyaWJlIGZyb20gb25lIG9yIG1vcmUgdG9waWMgZmlsdGVycyBieSBxdWV1aW5nIGFuIFVOU1VCU0NSSUJFIHBhY2tldCB0byBiZSBzZW50IHRvIHRoZSBzZXJ2ZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGFja2V0IFVOU1VCU0NSSUJFIHBhY2tldCB0byBzZW5kIHRvIHRoZSBzZXJ2ZXJcbiAgICAgKiBAcmV0dXJucyBhIHByb21pc2UgdGhhdCB3aWxsIGJlIHJlamVjdGVkIHdpdGggYW4gZXJyb3Igb3IgcmVzb2x2ZWQgd2l0aCB0aGUgVU5TVUJBQ0sgcmVzcG9uc2VcbiAgICAgKi9cbiAgICB1bnN1YnNjcmliZShwYWNrZXQpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY3VycmllZFByb21pc2VDYWxsYmFjayhjbGllbnQsIGVycm9yQ29kZSwgdW5zdWJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1xdHQ1Q2xpZW50Ll9zX29uX3Vuc3ViYWNrX2NhbGxiYWNrKHJlc29sdmUsIHJlamVjdCwgY2xpZW50LCBlcnJvckNvZGUsIHVuc3ViYWNrKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgYmluZGluZ18xLmRlZmF1bHQubXF0dDVfY2xpZW50X3Vuc3Vic2NyaWJlKHRoaXMubmF0aXZlX2hhbmRsZSgpLCBwYWNrZXQsIGN1cnJpZWRQcm9taXNlQ2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kIGEgbWVzc2FnZSB0byBzdWJzY3JpYmluZyBjbGllbnRzIGJ5IHF1ZXVpbmcgYSBQVUJMSVNIIHBhY2tldCB0byBiZSBzZW50IHRvIHRoZSBzZXJ2ZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGFja2V0IFBVQkxJU0ggcGFja2V0IHRvIHNlbmQgdG8gdGhlIHNlcnZlclxuICAgICAqIEByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHdpbGwgYmUgcmVqZWN0ZWQgd2l0aCBhbiBlcnJvciBvciByZXNvbHZlZCB3aXRoIHRoZSBQVUJBQ0sgcmVzcG9uc2UgKFFvUyAxKSBvclxuICAgICAqIHVuZGVmaW5lZCAoUW9TIDApXG4gICAgICovXG4gICAgcHVibGlzaChwYWNrZXQpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHBhY2tldCAmJiBwYWNrZXQucGF5bG9hZCkge1xuICAgICAgICAgICAgICAgICAgICBwYWNrZXQucGF5bG9hZCA9IG1xdHRfc2hhcmVkLm5vcm1hbGl6ZV9wYXlsb2FkKHBhY2tldC5wYXlsb2FkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY3VycmllZFByb21pc2VDYWxsYmFjayhjbGllbnQsIGVycm9yQ29kZSwgcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBNcXR0NUNsaWVudC5fc19vbl9wdWJhY2tfY2FsbGJhY2socmVzb2x2ZSwgcmVqZWN0LCBjbGllbnQsIGVycm9yQ29kZSwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgYmluZGluZ18xLmRlZmF1bHQubXF0dDVfY2xpZW50X3B1Ymxpc2godGhpcy5uYXRpdmVfaGFuZGxlKCksIHBhY2tldCwgY3VycmllZFByb21pc2VDYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFF1ZXJpZXMgYSBzbWFsbCBzZXQgb2YgbnVtZXJpY2FsIHN0YXRpc3RpY3MgYWJvdXQgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGNsaWVudCdzIG9wZXJhdGlvbiBxdWV1ZVxuICAgICAqXG4gICAgICogQGdyb3VwIE5vZGUtb25seVxuICAgICAqL1xuICAgIGdldFF1ZXVlU3RhdGlzdGljcygpIHtcbiAgICAgICAgcmV0dXJuIGJpbmRpbmdfMS5kZWZhdWx0Lm1xdHQ1X2NsaWVudF9nZXRfcXVldWVfc3RhdGlzdGljcyh0aGlzLm5hdGl2ZV9oYW5kbGUoKSk7XG4gICAgfVxuICAgIG9uKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgICAgICBzdXBlci5vbihldmVudCwgbGlzdGVuZXIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLypcbiAgICAgKiBQcml2YXRlIGhlbHBlciBmdW5jdGlvbnNcbiAgICAgKlxuICAgICAqIENhbGxiYWNrcyBjb21lIHRocm91Z2ggc3RhdGljIGZ1bmN0aW9ucyBzbyB0aGF0IHRoZSBuYXRpdmUgdGhyZWFkc2FmZSBmdW5jdGlvbiBvYmplY3RzIGRvIG5vdFxuICAgICAqIGNhcHR1cmUgdGhlIGNsaWVudCBvYmplY3QgaXRzZWxmLCBzaW1wbGlmeWluZyB0aGUgbnVtYmVyIG9mIHN0cm9uZyByZWZlcmVuY2VzIHRvIHRoZSBjbGllbnQgZmxvYXRpbmcgYXJvdW5kLlxuICAgICAqL1xuICAgIHN0YXRpYyBfc19vbl9zdG9wcGVkKGNsaWVudCkge1xuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICAgIGxldCBzdG9wcGVkRXZlbnQgPSB7fTtcbiAgICAgICAgICAgIGNsaWVudC5lbWl0KE1xdHQ1Q2xpZW50LlNUT1BQRUQsIHN0b3BwZWRFdmVudCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzdGF0aWMgX3Nfb25fYXR0ZW1wdGluZ19jb25uZWN0KGNsaWVudCkge1xuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICAgIGxldCBhdHRlbXB0aW5nQ29ubmVjdEV2ZW50ID0ge307XG4gICAgICAgICAgICBjbGllbnQuZW1pdChNcXR0NUNsaWVudC5BVFRFTVBUSU5HX0NPTk5FQ1QsIGF0dGVtcHRpbmdDb25uZWN0RXZlbnQpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhdGljIF9zX29uX2Nvbm5lY3Rpb25fc3VjY2VzcyhjbGllbnQsIGNvbm5hY2ssIHNldHRpbmdzKSB7XG4gICAgICAgIGxldCBjb25uZWN0aW9uU3VjY2Vzc0V2ZW50ID0ge1xuICAgICAgICAgICAgY29ubmFjazogY29ubmFjayxcbiAgICAgICAgICAgIHNldHRpbmdzOiBzZXR0aW5nc1xuICAgICAgICB9O1xuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICAgIGNsaWVudC5lbWl0KE1xdHQ1Q2xpZW50LkNPTk5FQ1RJT05fU1VDQ0VTUywgY29ubmVjdGlvblN1Y2Nlc3NFdmVudCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzdGF0aWMgX3Nfb25fY29ubmVjdGlvbl9mYWlsdXJlKGNsaWVudCwgZXJyb3IsIGNvbm5hY2spIHtcbiAgICAgICAgbGV0IGNvbm5lY3Rpb25GYWlsdXJlRXZlbnQgPSB7XG4gICAgICAgICAgICBlcnJvcjogZXJyb3JcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGNvbm5hY2sgIT09IG51bGwgJiYgY29ubmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25uZWN0aW9uRmFpbHVyZUV2ZW50LmNvbm5hY2sgPSBjb25uYWNrO1xuICAgICAgICB9XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgICAgY2xpZW50LmVtaXQoTXF0dDVDbGllbnQuQ09OTkVDVElPTl9GQUlMVVJFLCBjb25uZWN0aW9uRmFpbHVyZUV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN0YXRpYyBfc19vbl9kaXNjb25uZWN0aW9uKGNsaWVudCwgZXJyb3IsIGRpc2Nvbm5lY3QpIHtcbiAgICAgICAgbGV0IGRpc2Nvbm5lY3Rpb25FdmVudCA9IHtcbiAgICAgICAgICAgIGVycm9yOiBlcnJvclxuICAgICAgICB9O1xuICAgICAgICBpZiAoZGlzY29ubmVjdCAhPT0gbnVsbCAmJiBkaXNjb25uZWN0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGRpc2Nvbm5lY3Rpb25FdmVudC5kaXNjb25uZWN0ID0gZGlzY29ubmVjdDtcbiAgICAgICAgfVxuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICAgIGNsaWVudC5lbWl0KE1xdHQ1Q2xpZW50LkRJU0NPTk5FQ1RJT04sIGRpc2Nvbm5lY3Rpb25FdmVudCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzdGF0aWMgX3Nfb25fc3ViYWNrX2NhbGxiYWNrKHJlc29sdmUsIHJlamVjdCwgY2xpZW50LCBlcnJvckNvZGUsIHN1YmFjaykge1xuICAgICAgICBpZiAoZXJyb3JDb2RlID09IDAgJiYgc3ViYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlc29sdmUoc3ViYWNrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdChpby5lcnJvcl9jb2RlX3RvX3N0cmluZyhlcnJvckNvZGUpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgX3Nfb25fdW5zdWJhY2tfY2FsbGJhY2socmVzb2x2ZSwgcmVqZWN0LCBjbGllbnQsIGVycm9yQ29kZSwgdW5zdWJhY2spIHtcbiAgICAgICAgaWYgKGVycm9yQ29kZSA9PSAwICYmIHVuc3ViYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJlc29sdmUodW5zdWJhY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KGlvLmVycm9yX2NvZGVfdG9fc3RyaW5nKGVycm9yQ29kZSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyBfc19vbl9wdWJhY2tfY2FsbGJhY2socmVzb2x2ZSwgcmVqZWN0LCBjbGllbnQsIGVycm9yQ29kZSwgcmVzdWx0KSB7XG4gICAgICAgIGlmIChlcnJvckNvZGUgPT0gMCkge1xuICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KGlvLmVycm9yX2NvZGVfdG9fc3RyaW5nKGVycm9yQ29kZSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyBfc19vbl9tZXNzYWdlX3JlY2VpdmVkKGNsaWVudCwgbWVzc2FnZSkge1xuICAgICAgICBsZXQgbWVzc2FnZVJlY2VpdmVkRXZlbnQgPSB7XG4gICAgICAgICAgICBtZXNzYWdlOiBtZXNzYWdlXG4gICAgICAgIH07XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgICAgY2xpZW50LmVtaXQoTXF0dDVDbGllbnQuTUVTU0FHRV9SRUNFSVZFRCwgbWVzc2FnZVJlY2VpdmVkRXZlbnQpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLk1xdHQ1Q2xpZW50ID0gTXF0dDVDbGllbnQ7XG4vKipcbiAqIEV2ZW50IGVtaXR0ZWQgd2hlbiB0aGUgY2xpZW50IGVuY291bnRlcnMgYSBzZXJpb3VzIGVycm9yIGNvbmRpdGlvbiwgc3VjaCBhcyBpbnZhbGlkIGlucHV0LCBuYXBpIGZhaWx1cmVzLCBhbmRcbiAqIG90aGVyIHBvdGVudGlhbGx5IHVucmVjb3ZlcmFibGUgc2l0dWF0aW9ucy5cbiAqXG4gKiBMaXN0ZW5lciB0eXBlOiB7QGxpbmsgRXJyb3JFdmVudExpc3RlbmVyfVxuICpcbiAqIEBldmVudFxuICovXG5NcXR0NUNsaWVudC5FUlJPUiA9ICdlcnJvcic7XG4vKipcbiAqIEV2ZW50IGVtaXR0ZWQgd2hlbiBhbiBNUVRUIFBVQkxJU0ggcGFja2V0IGlzIHJlY2VpdmVkIGJ5IHRoZSBjbGllbnQuXG4gKlxuICogTGlzdGVuZXIgdHlwZToge0BsaW5rIE1lc3NhZ2VSZWNlaXZlZEV2ZW50TGlzdGVuZXJ9XG4gKlxuICogQGV2ZW50XG4gKi9cbk1xdHQ1Q2xpZW50Lk1FU1NBR0VfUkVDRUlWRUQgPSAnbWVzc2FnZVJlY2VpdmVkJztcbi8qKlxuICogRXZlbnQgZW1pdHRlZCB3aGVuIHRoZSBjbGllbnQgYmVnaW5zIGEgY29ubmVjdGlvbiBhdHRlbXB0LlxuICpcbiAqIExpc3RlbmVyIHR5cGU6IHtAbGluayBBdHRlbXB0aW5nQ29ubmVjdEV2ZW50TGlzdGVuZXJ9XG4gKlxuICogQGV2ZW50XG4gKi9cbk1xdHQ1Q2xpZW50LkFUVEVNUFRJTkdfQ09OTkVDVCA9ICdhdHRlbXB0aW5nQ29ubmVjdCc7XG4vKipcbiAqIEV2ZW50IGVtaXR0ZWQgd2hlbiB0aGUgY2xpZW50IHN1Y2Nlc3NmdWxseSBlc3RhYmxpc2hlcyBhbiBNUVRUIGNvbm5lY3Rpb24uICBPbmx5IGVtaXR0ZWQgYWZ0ZXJcbiAqIGFuIHtAbGluayBBVFRFTVBUSU5HX0NPTk5FQ1QgYXR0ZW1wdGluZ0Nvbm5lY3R9IGV2ZW50LlxuICpcbiAqIExpc3RlbmVyIHR5cGU6IHtAbGluayBDb25uZWN0aW9uU3VjY2Vzc0V2ZW50TGlzdGVuZXJ9XG4gKlxuICogQGV2ZW50XG4gKi9cbk1xdHQ1Q2xpZW50LkNPTk5FQ1RJT05fU1VDQ0VTUyA9ICdjb25uZWN0aW9uU3VjY2Vzcyc7XG4vKipcbiAqIEV2ZW50IGVtaXR0ZWQgd2hlbiB0aGUgY2xpZW50IGZhaWxzIHRvIGVzdGFibGlzaCBhbiBNUVRUIGNvbm5lY3Rpb24uICBPbmx5IGVtaXR0ZWQgYWZ0ZXJcbiAqIGFuIHtAbGluayBBVFRFTVBUSU5HX0NPTk5FQ1QgYXR0ZW1wdGluZ0Nvbm5lY3R9IGV2ZW50LlxuICpcbiAqIExpc3RlbmVyIHR5cGU6IHtAbGluayBDb25uZWN0aW9uRmFpbHVyZUV2ZW50TGlzdGVuZXJ9XG4gKlxuICogQGV2ZW50XG4gKi9cbk1xdHQ1Q2xpZW50LkNPTk5FQ1RJT05fRkFJTFVSRSA9ICdjb25uZWN0aW9uRmFpbHVyZSc7XG4vKipcbiAqIEV2ZW50IGVtaXR0ZWQgd2hlbiB0aGUgY2xpZW50J3MgY3VycmVudCBjb25uZWN0aW9uIGlzIGNsb3NlZCBmb3IgYW55IHJlYXNvbi4gIE9ubHkgZW1pdHRlZCBhZnRlclxuICogYSB7QGxpbmsgQ09OTkVDVElPTl9TVUNDRVNTIGNvbm5lY3Rpb25TdWNjZXNzfSBldmVudC5cbiAqXG4gKiBMaXN0ZW5lciB0eXBlOiB7QGxpbmsgRGlzY29ubmVjdGlvbkV2ZW50TGlzdGVuZXJ9XG4gKlxuICogQGV2ZW50XG4gKi9cbk1xdHQ1Q2xpZW50LkRJU0NPTk5FQ1RJT04gPSAnZGlzY29ubmVjdGlvbic7XG4vKipcbiAqIEV2ZW50IGVtaXR0ZWQgd2hlbiB0aGUgY2xpZW50IGZpbmlzaGVzIHNodXRkb3duIGFzIGEgcmVzdWx0IG9mIHRoZSB1c2VyIGludm9raW5nIHtAbGluayBzdG9wfS5cbiAqXG4gKiBMaXN0ZW5lciB0eXBlOiB7QGxpbmsgU3RvcHBlZEV2ZW50TGlzdGVuZXJ9XG4gKlxuICogQGV2ZW50XG4gKi9cbk1xdHQ1Q2xpZW50LlNUT1BQRUQgPSAnc3RvcHBlZCc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tcXR0NS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/aws-crt/dist/native/mqtt5.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/aws-crt/dist/native/native_resource.js":
/*!*************************************************************!*\
  !*** ./node_modules/aws-crt/dist/native/native_resource.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n * SPDX-License-Identifier: Apache-2.0.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NativeResourceMixin = exports.NativeResource = void 0;\n/**\n * Represents an object allocated natively inside the AWS CRT.\n * @internal\n */\nclass NativeResource {\n    constructor(handle) {\n        this.handle = handle;\n    }\n    /** @internal */\n    native_handle() {\n        return this.handle;\n    }\n}\nexports.NativeResource = NativeResource;\n/**\n * Represents an object allocated natively inside the AWS CRT which also\n * needs a node/TS base class\n * @internal\n */\nfunction NativeResourceMixin(Base) {\n    /** @internal */\n    return class extends Base {\n        /** @internal */\n        constructor(...args) {\n            const handle = args.shift();\n            super(...args);\n            this._handle = handle;\n        }\n        /** @internal */\n        _super(handle) {\n            this._handle = handle;\n        }\n        /** @internal */\n        native_handle() {\n            return this._handle;\n        }\n    };\n}\nexports.NativeResourceMixin = NativeResourceMixin;\n//# sourceMappingURL=native_resource.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXdzLWNydC9kaXN0L25hdGl2ZS9uYXRpdmVfcmVzb3VyY2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwyQkFBMkIsR0FBRyxzQkFBc0I7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGF5d2luZC8uL25vZGVfbW9kdWxlcy9hd3MtY3J0L2Rpc3QvbmF0aXZlL25hdGl2ZV9yZXNvdXJjZS5qcz85MjUxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBBbWF6b24uY29tLCBJbmMuIG9yIGl0cyBhZmZpbGlhdGVzLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjAuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTmF0aXZlUmVzb3VyY2VNaXhpbiA9IGV4cG9ydHMuTmF0aXZlUmVzb3VyY2UgPSB2b2lkIDA7XG4vKipcbiAqIFJlcHJlc2VudHMgYW4gb2JqZWN0IGFsbG9jYXRlZCBuYXRpdmVseSBpbnNpZGUgdGhlIEFXUyBDUlQuXG4gKiBAaW50ZXJuYWxcbiAqL1xuY2xhc3MgTmF0aXZlUmVzb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKGhhbmRsZSkge1xuICAgICAgICB0aGlzLmhhbmRsZSA9IGhhbmRsZTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIG5hdGl2ZV9oYW5kbGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhbmRsZTtcbiAgICB9XG59XG5leHBvcnRzLk5hdGl2ZVJlc291cmNlID0gTmF0aXZlUmVzb3VyY2U7XG4vKipcbiAqIFJlcHJlc2VudHMgYW4gb2JqZWN0IGFsbG9jYXRlZCBuYXRpdmVseSBpbnNpZGUgdGhlIEFXUyBDUlQgd2hpY2ggYWxzb1xuICogbmVlZHMgYSBub2RlL1RTIGJhc2UgY2xhc3NcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBOYXRpdmVSZXNvdXJjZU1peGluKEJhc2UpIHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgcmV0dXJuIGNsYXNzIGV4dGVuZHMgQmFzZSB7XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgY29uc3RydWN0b3IoLi4uYXJncykge1xuICAgICAgICAgICAgY29uc3QgaGFuZGxlID0gYXJncy5zaGlmdCgpO1xuICAgICAgICAgICAgc3VwZXIoLi4uYXJncyk7XG4gICAgICAgICAgICB0aGlzLl9oYW5kbGUgPSBoYW5kbGU7XG4gICAgICAgIH1cbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICBfc3VwZXIoaGFuZGxlKSB7XG4gICAgICAgICAgICB0aGlzLl9oYW5kbGUgPSBoYW5kbGU7XG4gICAgICAgIH1cbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICBuYXRpdmVfaGFuZGxlKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hhbmRsZTtcbiAgICAgICAgfVxuICAgIH07XG59XG5leHBvcnRzLk5hdGl2ZVJlc291cmNlTWl4aW4gPSBOYXRpdmVSZXNvdXJjZU1peGluO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmF0aXZlX3Jlc291cmNlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/aws-crt/dist/native/native_resource.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/aws-crt/package.json":
/*!*******************************************!*\
  !*** ./node_modules/aws-crt/package.json ***!
  \*******************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"aws-crt","version":"1.18.0","description":"NodeJS/browser bindings to the aws-c-* libraries","homepage":"https://github.com/awslabs/aws-crt-nodejs","repository":{"type":"git","url":"git+https://github.com/awslabs/aws-crt-nodejs.git"},"contributors":["AWS Common Runtime Team <aws-sdk-common-runtime@amazon.com>"],"license":"Apache-2.0","main":"./dist/index.js","browser":"./dist.browser/browser.js","types":"./dist/index.d.ts","scripts":{"tsc":"node ./scripts/tsc.js","test":"npm run test:native","test:node":"npm run test:native","test:native":"npx jest --runInBand --verbose --config test/native/jest.config.js --forceExit","test:browser":"npx jest --runInBand --verbose --config test/browser/jest.config.js --forceExit","test:browser:ci":"npm run install:puppeteer && npm run test:browser","install:puppeteer":"npm install --save-dev jest-puppeteer puppeteer @types/puppeteer","prepare":"node ./scripts/tsc.js && node ./scripts/install.js","install":"node ./scripts/install.js"},"devDependencies":{"@types/crypto-js":"^3.1.43","@types/jest":"^27.0.1","@types/node":"^10.17.54","@types/prettier":"2.6.0","@types/puppeteer":"^5.4.7","@types/uuid":"^3.4.8","@types/ws":"^7.4.7","aws-sdk":"^2.848.0","https-proxy-agent":"^5.0.1","jest":"^27.2.1","jest-puppeteer":"^5.0.4","jest-runtime":"^27.2.1","puppeteer":"^3.3.0","ts-jest":"^27.0.5","typedoc":"^0.22.18","typedoc-plugin-merge-modules":"^3.1.0","typescript":"^4.7.4","uuid":"^8.3.2","yargs":"^17.2.1","cmake-js":"^6.3.2","tar":"^6.1.11"},"dependencies":{"@aws-sdk/util-utf8-browser":"^3.109.0","@httptoolkit/websocket-stream":"^6.0.0","axios":"^0.24.0","buffer":"^6.0.3","crypto-js":"^4.0.0","mqtt":"^4.3.7","process":"^0.11.10"}}');

/***/ })

};
;